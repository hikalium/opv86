[
 {
  "opcode": "37",
  "opcode_parsed": [
   "37"
  ],
  "opcode_bytes": [
   {
    "components": [
     "37"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AAA",
  "instr_parsed": [
   "AAA"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "ASCII adjust AL after addition.",
  "page": 122
 },
 {
  "opcode": "D5 0A",
  "opcode_parsed": [
   "D5",
   "0A"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AAD",
  "instr_parsed": [
   "AAD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "ASCII adjust AX before division.",
  "page": 124
 },
 {
  "opcode": "D5 ib",
  "opcode_parsed": [
   "D5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AAD imm8",
  "instr_parsed": [
   "AAD",
   "imm8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Adjust AX before division to number base imm8.",
  "page": 124
 },
 {
  "opcode": "D4 0A",
  "opcode_parsed": [
   "D4",
   "0A"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AAM",
  "instr_parsed": [
   "AAM"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "ASCII adjust AX after multiply.",
  "page": 126
 },
 {
  "opcode": "D4 ib",
  "opcode_parsed": [
   "D4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AAM imm8",
  "instr_parsed": [
   "AAM",
   "imm8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Adjust AX after multiply to number base imm8.",
  "page": 126
 },
 {
  "opcode": "3F",
  "opcode_parsed": [
   "3F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "3F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AAS",
  "instr_parsed": [
   "AAS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "ASCII adjust AL after subtraction.",
  "page": 128
 },
 {
  "opcode": "14 ib",
  "opcode_parsed": [
   "14",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "14"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC AL, imm8",
  "instr_parsed": [
   "ADC",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry imm8 to AL.",
  "page": 130
 },
 {
  "opcode": "15 iw",
  "opcode_parsed": [
   "15",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "15"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "ADC AX, imm16",
  "instr_parsed": [
   "ADC",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry imm16 to AX.",
  "page": 130
 },
 {
  "opcode": "15 id",
  "opcode_parsed": [
   "15",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "15"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADC EAX, imm32",
  "instr_parsed": [
   "ADC",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry imm32 to EAX.",
  "page": 130
 },
 {
  "opcode": "REX.W + 15 id",
  "opcode_parsed": [
   "REX.W",
   "15",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "15"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADC RAX, imm32",
  "instr_parsed": [
   "ADC",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with carry imm32 sign extended to 64bits to RAX.",
  "page": 130
 },
 {
  "opcode": "80 /2 ib",
  "opcode_parsed": [
   "80",
   "/2",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m8 , imm8",
  "instr_parsed": [
   "ADC",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry imm8 to r/m8.",
  "page": 130
 },
 {
  "opcode": "REX + 80 /2 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/2",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m8 * , imm8",
  "instr_parsed": [
   "ADC",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with carry imm8 to r/m8.",
  "page": 130
 },
 {
  "opcode": "81 /2 iw",
  "opcode_parsed": [
   "81",
   "/2",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "ADC r/m16, imm16",
  "instr_parsed": [
   "ADC",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry imm16 to r/m16.",
  "page": 130
 },
 {
  "opcode": "81 /2 id",
  "opcode_parsed": [
   "81",
   "/2",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADC r/m32, imm32",
  "instr_parsed": [
   "ADC",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with CF imm32 to r/m32.",
  "page": 130
 },
 {
  "opcode": "REX.W + 81 /2 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/2",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADC r/m64, imm32",
  "instr_parsed": [
   "ADC",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with CF imm32 sign extended to 64-bits to r/m64.",
  "page": 130
 },
 {
  "opcode": "83 /2 ib",
  "opcode_parsed": [
   "83",
   "/2",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m16, imm8",
  "instr_parsed": [
   "ADC",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with CF sign-extended imm8 to r/m16.",
  "page": 130
 },
 {
  "opcode": "83 /2 ib",
  "opcode_parsed": [
   "83",
   "/2",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m32, imm8",
  "instr_parsed": [
   "ADC",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with CF sign-extended imm8 into r/m32.",
  "page": 130
 },
 {
  "opcode": "REX.W + 83 /2 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/2",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m64, imm8",
  "instr_parsed": [
   "ADC",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with CF sign-extended imm8 into r/m64.",
  "page": 130
 },
 {
  "opcode": "10 / r",
  "opcode_parsed": [
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m8, r8",
  "instr_parsed": [
   "ADC",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry byte register to r/m8.",
  "page": 130
 },
 {
  "opcode": "REX + 10 / r",
  "opcode_parsed": [
   "REX",
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m8 * , r8 *",
  "instr_parsed": [
   "ADC",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with carry byte register to r/m64.",
  "page": 130
 },
 {
  "opcode": "11 / r",
  "opcode_parsed": [
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m16, r16",
  "instr_parsed": [
   "ADC",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry r16 to r/m16.",
  "page": 130
 },
 {
  "opcode": "11 / r",
  "opcode_parsed": [
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m32, r32",
  "instr_parsed": [
   "ADC",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with CF r32 to r/m32.",
  "page": 130
 },
 {
  "opcode": "REX.W + 11 / r",
  "opcode_parsed": [
   "REX.W",
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r/m64, r64",
  "instr_parsed": [
   "ADC",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with CF r64 to r/m64.",
  "page": 130
 },
 {
  "opcode": "12 / r",
  "opcode_parsed": [
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r8, r/m8",
  "instr_parsed": [
   "ADC",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry r/m8 to byte register.",
  "page": 130
 },
 {
  "opcode": "REX + 12 / r",
  "opcode_parsed": [
   "REX",
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r8 * , r/m8 *",
  "instr_parsed": [
   "ADC",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with carry r/m64 to byte register.",
  "page": 130
 },
 {
  "opcode": "13 / r",
  "opcode_parsed": [
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r16, r/m16",
  "instr_parsed": [
   "ADC",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with carry r/m16 to r16.",
  "page": 130
 },
 {
  "opcode": "13 / r",
  "opcode_parsed": [
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r32, r/m32",
  "instr_parsed": [
   "ADC",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add with CF r/m32 to r32.",
  "page": 130
 },
 {
  "opcode": "REX.W + 13 / r",
  "opcode_parsed": [
   "REX.W",
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADC r64, r/m64",
  "instr_parsed": [
   "ADC",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add with CF r/m64 to r64.",
  "page": 130
 },
 {
  "opcode": "04 ib",
  "opcode_parsed": [
   "04",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "04"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD AL, imm8",
  "instr_parsed": [
   "ADD",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add imm8 to AL.",
  "page": 135
 },
 {
  "opcode": "05 iw",
  "opcode_parsed": [
   "05",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "05"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "ADD AX, imm16",
  "instr_parsed": [
   "ADD",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add imm16 to AX.",
  "page": 135
 },
 {
  "opcode": "05 id",
  "opcode_parsed": [
   "05",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "05"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADD EAX, imm32",
  "instr_parsed": [
   "ADD",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add imm32 to EAX.",
  "page": 135
 },
 {
  "opcode": "REX.W + 05 id",
  "opcode_parsed": [
   "REX.W",
   "05",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "05"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADD RAX, imm32",
  "instr_parsed": [
   "ADD",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add imm32 sign-extended to 64-bits to RAX.",
  "page": 135
 },
 {
  "opcode": "80 /0 ib",
  "opcode_parsed": [
   "80",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m8, imm8",
  "instr_parsed": [
   "ADD",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add imm8 to r/m8.",
  "page": 135
 },
 {
  "opcode": "REX + 80 /0 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m8 * , imm8",
  "instr_parsed": [
   "ADD",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add sign-extended imm8 to r/m8.",
  "page": 135
 },
 {
  "opcode": "81 /0 iw",
  "opcode_parsed": [
   "81",
   "/0",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "ADD r/m16, imm16",
  "instr_parsed": [
   "ADD",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add imm16 to r/m16.",
  "page": 135
 },
 {
  "opcode": "81 /0 id",
  "opcode_parsed": [
   "81",
   "/0",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADD r/m32, imm32",
  "instr_parsed": [
   "ADD",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add imm32 to r/m32 .",
  "page": 135
 },
 {
  "opcode": "REX.W + 81 /0 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/0",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "ADD r/m64, imm32",
  "instr_parsed": [
   "ADD",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add imm32 sign-extended to 64-bits to r/m64 .",
  "page": 135
 },
 {
  "opcode": "83 /0 ib",
  "opcode_parsed": [
   "83",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m16, imm8",
  "instr_parsed": [
   "ADD",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add sign-extended imm8 to r/m16.",
  "page": 135
 },
 {
  "opcode": "83 /0 ib",
  "opcode_parsed": [
   "83",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m32, imm8",
  "instr_parsed": [
   "ADD",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add sign-extended imm8 to r/m32.",
  "page": 135
 },
 {
  "opcode": "REX.W + 83 /0 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m64, imm8",
  "instr_parsed": [
   "ADD",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add sign-extended imm8 to r/m64.",
  "page": 135
 },
 {
  "opcode": "00 / r",
  "opcode_parsed": [
   "00",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m8, r8",
  "instr_parsed": [
   "ADD",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add r8 to r/m8.",
  "page": 135
 },
 {
  "opcode": "REX + 00 / r",
  "opcode_parsed": [
   "REX",
   "00",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m8 * , r8 *",
  "instr_parsed": [
   "ADD",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add r8 to r/m8.",
  "page": 135
 },
 {
  "opcode": "01 / r",
  "opcode_parsed": [
   "01",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m16, r16",
  "instr_parsed": [
   "ADD",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add r16 to r/m16.",
  "page": 135
 },
 {
  "opcode": "01 / r",
  "opcode_parsed": [
   "01",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m32, r32",
  "instr_parsed": [
   "ADD",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add r32 to r/m32.",
  "page": 135
 },
 {
  "opcode": "REX.W + 01 / r",
  "opcode_parsed": [
   "REX.W",
   "01",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r/m64, r64",
  "instr_parsed": [
   "ADD",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add r64 to r/m64.",
  "page": 135
 },
 {
  "opcode": "02 / r",
  "opcode_parsed": [
   "02",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "02"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r8, r/m8",
  "instr_parsed": [
   "ADD",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add r/m8 to r8.",
  "page": 135
 },
 {
  "opcode": "REX + 02 / r",
  "opcode_parsed": [
   "REX",
   "02",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "02"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r8 * , r/m8 *",
  "instr_parsed": [
   "ADD",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add r/m8 to r8.",
  "page": 135
 },
 {
  "opcode": "03 / r",
  "opcode_parsed": [
   "03",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "03"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r16, r/m16",
  "instr_parsed": [
   "ADD",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add r/m16 to r16.",
  "page": 135
 },
 {
  "opcode": "03 / r",
  "opcode_parsed": [
   "03",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "03"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r32, r/m32",
  "instr_parsed": [
   "ADD",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add r/m32 to r32.",
  "page": 135
 },
 {
  "opcode": "REX.W + 03 / r",
  "opcode_parsed": [
   "REX.W",
   "03",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "03"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ADD r64, r/m64",
  "instr_parsed": [
   "ADD",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Add r/m64 to r64.",
  "page": 135
 },
 {
  "opcode": "24 ib",
  "opcode_parsed": [
   "24",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "24"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND AL, imm8",
  "instr_parsed": [
   "AND",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AL  AND imm8.",
  "page": 181
 },
 {
  "opcode": "25 iw",
  "opcode_parsed": [
   "25",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "25"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "AND AX, imm16",
  "instr_parsed": [
   "AND",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AX  AND  i mm16.",
  "page": 181
 },
 {
  "opcode": "25 id",
  "opcode_parsed": [
   "25",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "25"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "AND EAX, imm32",
  "instr_parsed": [
   "AND",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "EAX  AND imm32.",
  "page": 181
 },
 {
  "opcode": "REX.W + 25 id",
  "opcode_parsed": [
   "REX.W",
   "25",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "25"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "AND RAX, imm32",
  "instr_parsed": [
   "AND",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "RAX  AND imm32 sign-extended to 64-bits.",
  "page": 181
 },
 {
  "opcode": "80 /4 ib",
  "opcode_parsed": [
   "80",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m8, imm8",
  "instr_parsed": [
   "AND",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m8 AND imm8.",
  "page": 181
 },
 {
  "opcode": "REX + 80 /4 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m8 * , imm8",
  "instr_parsed": [
   "AND",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m8 AND imm8.",
  "page": 181
 },
 {
  "opcode": "81 /4 iw",
  "opcode_parsed": [
   "81",
   "/4",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "AND r/m16, imm16",
  "instr_parsed": [
   "AND",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 AND imm16.",
  "page": 181
 },
 {
  "opcode": "81 /4 id",
  "opcode_parsed": [
   "81",
   "/4",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "AND r/m32, imm32",
  "instr_parsed": [
   "AND",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 AND imm32.",
  "page": 181
 },
 {
  "opcode": "REX.W + 81 /4 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/4",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "AND r/m64, imm32",
  "instr_parsed": [
   "AND",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 AND imm32 sign extended to 64-bits.",
  "page": 181
 },
 {
  "opcode": "83 /4 ib",
  "opcode_parsed": [
   "83",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m16, imm8",
  "instr_parsed": [
   "AND",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 AND imm8 (sign-extended).",
  "page": 181
 },
 {
  "opcode": "83 /4 ib",
  "opcode_parsed": [
   "83",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m32, imm8",
  "instr_parsed": [
   "AND",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 AND imm8 (sign-extended).",
  "page": 181
 },
 {
  "opcode": "REX.W + 83 /4 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m64, imm8",
  "instr_parsed": [
   "AND",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 AND imm8 (sign-extended).",
  "page": 181
 },
 {
  "opcode": "20 /r",
  "opcode_parsed": [
   "20",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "20"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m8, r8",
  "instr_parsed": [
   "AND",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m8 AND r8.",
  "page": 181
 },
 {
  "opcode": "REX + 20 /r",
  "opcode_parsed": [
   "REX",
   "20",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "20"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m8 * , r8 *",
  "instr_parsed": [
   "AND",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 AND r8 (sign-extended).",
  "page": 181
 },
 {
  "opcode": "21 / r",
  "opcode_parsed": [
   "21",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "21"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m16, r16",
  "instr_parsed": [
   "AND",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 AND r16.",
  "page": 181
 },
 {
  "opcode": "21 / r",
  "opcode_parsed": [
   "21",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "21"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m32, r32",
  "instr_parsed": [
   "AND",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 AND r32.",
  "page": 181
 },
 {
  "opcode": "REX.W + 21 / r",
  "opcode_parsed": [
   "REX.W",
   "21",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "21"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r/m64, r64",
  "instr_parsed": [
   "AND",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 AND r32.",
  "page": 181
 },
 {
  "opcode": "22 / r",
  "opcode_parsed": [
   "22",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "22"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r8, r/m8",
  "instr_parsed": [
   "AND",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r8 AND r/m8.",
  "page": 181
 },
 {
  "opcode": "REX + 22 / r",
  "opcode_parsed": [
   "REX",
   "22",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "22"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r8 * , r/m8 *",
  "instr_parsed": [
   "AND",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 AND r8 (sign-extended).",
  "page": 181
 },
 {
  "opcode": "23 / r",
  "opcode_parsed": [
   "23",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "23"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r16, r/m16",
  "instr_parsed": [
   "AND",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r16 AND r/m16.",
  "page": 181
 },
 {
  "opcode": "23 / r",
  "opcode_parsed": [
   "23",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "23"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r32, r/m32",
  "instr_parsed": [
   "AND",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r32 AND r/m32.",
  "page": 181
 },
 {
  "opcode": "REX.W + 23 / r",
  "opcode_parsed": [
   "REX.W",
   "23",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "23"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "AND r64, r/m64",
  "instr_parsed": [
   "AND",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r64 AND r/m64.",
  "page": 181
 },
 {
  "opcode": "0F BC /r",
  "opcode_parsed": [
   "0F",
   "BC",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSF r16, r/m16",
  "instr_parsed": [
   "BSF",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Bit scan forward on r/m16.",
  "page": 228
 },
 {
  "opcode": "0F BC /r",
  "opcode_parsed": [
   "0F",
   "BC",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSF r32, r/m32",
  "instr_parsed": [
   "BSF",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Bit scan forward on r/m32.",
  "page": 228
 },
 {
  "opcode": "REX.W + 0F BC /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BC",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSF r64, r/m64",
  "instr_parsed": [
   "BSF",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Bit scan forward on r/m64.",
  "page": 228
 },
 {
  "opcode": "0F BD /r",
  "opcode_parsed": [
   "0F",
   "BD",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSR r16, r/m16",
  "instr_parsed": [
   "BSR",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Bit scan reverse on r/m16.",
  "page": 230
 },
 {
  "opcode": "0F BD /r",
  "opcode_parsed": [
   "0F",
   "BD",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSR r32, r/m32",
  "instr_parsed": [
   "BSR",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Bit scan reverse on r/m32.",
  "page": 230
 },
 {
  "opcode": "REX.W + 0F BD /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BD",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSR r64, r/m64",
  "instr_parsed": [
   "BSR",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Bit scan reverse on r/m64.",
  "page": 230
 },
 {
  "opcode": "0F C8+ rd",
  "opcode_parsed": [
   "0F",
   "C8",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C8",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSWAP r32",
  "instr_parsed": [
   "BSWAP",
   "r32"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Reverses the byte order of a 32-bit register.",
  "page": 232
 },
 {
  "opcode": "REX.W + 0F C8+ rd",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "C8",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C8",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BSWAP r64",
  "instr_parsed": [
   "BSWAP",
   "r64"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Reverses the byte order of a 64-bit register.",
  "page": 232
 },
 {
  "opcode": "0F A3 /r",
  "opcode_parsed": [
   "0F",
   "A3",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BT r/m16, r16",
  "instr_parsed": [
   "BT",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag.",
  "page": 233
 },
 {
  "opcode": "0F A3 /r",
  "opcode_parsed": [
   "0F",
   "A3",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BT r/m32, r32",
  "instr_parsed": [
   "BT",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag.",
  "page": 233
 },
 {
  "opcode": "REX.W + 0F A3 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "A3",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BT r/m64, r64",
  "instr_parsed": [
   "BT",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag.",
  "page": 233
 },
 {
  "opcode": "0F BA /4 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BT r/m16, imm8",
  "instr_parsed": [
   "BT",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag.",
  "page": 233
 },
 {
  "opcode": "0F BA /4 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BT r/m32, imm8",
  "instr_parsed": [
   "BT",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag.",
  "page": 233
 },
 {
  "opcode": "REX.W + 0F BA /4 ib",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BA",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BT r/m64, imm8",
  "instr_parsed": [
   "BT",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag.",
  "page": 233
 },
 {
  "opcode": "0F BB /r",
  "opcode_parsed": [
   "0F",
   "BB",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTC r/m16, r16",
  "instr_parsed": [
   "BTC",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and complement.",
  "page": 235
 },
 {
  "opcode": "0F BB /r",
  "opcode_parsed": [
   "0F",
   "BB",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTC r/m32, r32",
  "instr_parsed": [
   "BTC",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and complement.",
  "page": 235
 },
 {
  "opcode": "REX.W + 0F BB /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BB",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTC r/m64, r64",
  "instr_parsed": [
   "BTC",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag and complement.",
  "page": 235
 },
 {
  "opcode": "0F BA /7 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTC r/m16, imm8",
  "instr_parsed": [
   "BTC",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and complement.",
  "page": 235
 },
 {
  "opcode": "0F BA /7 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTC r/m32, imm8",
  "instr_parsed": [
   "BTC",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and complement.",
  "page": 235
 },
 {
  "opcode": "REX.W + 0F BA /7 ib",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BA",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTC r/m64, imm8",
  "instr_parsed": [
   "BTC",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag and complement.",
  "page": 235
 },
 {
  "opcode": "0F B3 /r",
  "opcode_parsed": [
   "0F",
   "B3",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTR r/m16, r16",
  "instr_parsed": [
   "BTR",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and clear.",
  "page": 237
 },
 {
  "opcode": "0F B3 /r",
  "opcode_parsed": [
   "0F",
   "B3",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTR r/m32, r32",
  "instr_parsed": [
   "BTR",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and clear.",
  "page": 237
 },
 {
  "opcode": "REX.W + 0F B3 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "B3",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTR r/m64, r64",
  "instr_parsed": [
   "BTR",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag and clear.",
  "page": 237
 },
 {
  "opcode": "0F BA /6 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTR r/m16, imm8",
  "instr_parsed": [
   "BTR",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and clear.",
  "page": 237
 },
 {
  "opcode": "0F BA /6 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTR r/m32, imm8",
  "instr_parsed": [
   "BTR",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and clear.",
  "page": 237
 },
 {
  "opcode": "REX.W + 0F BA /6 ib",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BA",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTR r/m64, imm8",
  "instr_parsed": [
   "BTR",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag and clear.",
  "page": 237
 },
 {
  "opcode": "0F AB /r",
  "opcode_parsed": [
   "0F",
   "AB",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTS r/m16, r16",
  "instr_parsed": [
   "BTS",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and set.",
  "page": 239
 },
 {
  "opcode": "0F AB /r",
  "opcode_parsed": [
   "0F",
   "AB",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTS r/m32, r32",
  "instr_parsed": [
   "BTS",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and set.",
  "page": 239
 },
 {
  "opcode": "REX.W + 0F AB /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "AB",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTS r/m64, r64",
  "instr_parsed": [
   "BTS",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag and set.",
  "page": 239
 },
 {
  "opcode": "0F BA /5 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTS r/m16, imm8",
  "instr_parsed": [
   "BTS",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and set.",
  "page": 239
 },
 {
  "opcode": "0F BA /5 ib",
  "opcode_parsed": [
   "0F",
   "BA",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTS r/m32, imm8",
  "instr_parsed": [
   "BTS",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store selected bit in CF flag and set.",
  "page": 239
 },
 {
  "opcode": "REX.W + 0F BA /5 ib",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BA",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "BTS r/m64, imm8",
  "instr_parsed": [
   "BTS",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store selected bit in CF flag and set.",
  "page": 239
 },
 {
  "opcode": "E8 cw",
  "opcode_parsed": [
   "E8",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "CALL rel16",
  "instr_parsed": [
   "CALL",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Call near, relative, displacement relative to next instruction.",
  "page": 242
 },
 {
  "opcode": "E8 cd",
  "opcode_parsed": [
   "E8",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "CALL rel32",
  "instr_parsed": [
   "CALL",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode.",
  "page": 242
 },
 {
  "opcode": "FF /2",
  "opcode_parsed": [
   "FF",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CALL r/m16",
  "instr_parsed": [
   "CALL",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Call near, absolute indirect, address given in r/m16.",
  "page": 242
 },
 {
  "opcode": "FF /2",
  "opcode_parsed": [
   "FF",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CALL r/m32",
  "instr_parsed": [
   "CALL",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Call near, absolute indirect, address given in r/m32.",
  "page": 242
 },
 {
  "opcode": "FF /2",
  "opcode_parsed": [
   "FF",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CALL r/m64",
  "instr_parsed": [
   "CALL",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Call near, absolute indirect, address given in r/m 64.",
  "page": 242
 },
 {
  "opcode": "9A cd",
  "opcode_parsed": [
   "9A",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "CALL ptr16:16",
  "instr_parsed": [
   "CALL",
   "ptr16:16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Call far, absolute, address given in operand.",
  "page": 242
 },
 {
  "opcode": "9A cp",
  "opcode_parsed": [
   "9A",
   "cp"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cp"
    ],
    "byte_type": "imm",
    "byte_size_min": 6,
    "byte_size_max": 6
   }
  ],
  "instr": "CALL ptr16:32",
  "instr_parsed": [
   "CALL",
   "ptr16:32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Call far, absolute, address given in operand.",
  "page": 242
 },
 {
  "opcode": "FF /3",
  "opcode_parsed": [
   "FF",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CALL m16:16",
  "instr_parsed": [
   "CALL",
   "m16:16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Call far, absolute indirect address given in m16:16. In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction.",
  "page": 242
 },
 {
  "opcode": "FF /3",
  "opcode_parsed": [
   "FF",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CALL m16:32",
  "instr_parsed": [
   "CALL",
   "m16:32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction.",
  "page": 242
 },
 {
  "opcode": "REX.W FF /3",
  "opcode_parsed": [
   "REX.W",
   "FF",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CALL m16:64",
  "instr_parsed": [
   "CALL",
   "m16:64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = 64-bit offset from far pointer referenced in the instruction.",
  "page": 242
 },
 {
  "opcode": "98",
  "opcode_parsed": [
   "98"
  ],
  "opcode_bytes": [
   {
    "components": [
     "98"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CBW",
  "instr_parsed": [
   "CBW"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AX := sign-extend of AL.",
  "page": 259
 },
 {
  "opcode": "98",
  "opcode_parsed": [
   "98"
  ],
  "opcode_bytes": [
   {
    "components": [
     "98"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CWDE",
  "instr_parsed": [
   "CWDE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "EAX := sign-extend of AX.",
  "page": 259
 },
 {
  "opcode": "REX.W + 98",
  "opcode_parsed": [
   "REX.W",
   "98"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "98"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CDQE",
  "instr_parsed": [
   "CDQE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "RAX := sign-extend of EAX.",
  "page": 259
 },
 {
  "opcode": "F8",
  "opcode_parsed": [
   "F8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLC",
  "instr_parsed": [
   "CLC"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Clear CF flag.",
  "page": 261
 },
 {
  "opcode": "FC",
  "opcode_parsed": [
   "FC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLD",
  "instr_parsed": [
   "CLD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Clear DF flag.",
  "page": 262
 },
 {
  "opcode": "NP 0F 1C /0",
  "opcode_parsed": [
   "NP",
   "0F",
   "1C",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "1C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLDEMOTE m8",
  "instr_parsed": [
   "CLDEMOTE",
   "m8"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "CLDEMOTE",
  "description": "Hint to hardware to move the cache line containing m8 to a more distant level of the cache without writing back to memory. 1",
  "page": 263
 },
 {
  "opcode": "NP 0F AE /7",
  "opcode_parsed": [
   "NP",
   "0F",
   "AE",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLFLUSH m8",
  "instr_parsed": [
   "CLFLUSH",
   "m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Flushes cache line containing m8 .",
  "page": 265
 },
 {
  "opcode": "NFx 66 0F AE /7",
  "opcode_parsed": [
   "NFx",
   "66",
   "0F",
   "AE",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NFx"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLFLUSHOPT m8",
  "instr_parsed": [
   "CLFLUSHOPT",
   "m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Flushes cache line containing m8 .",
  "page": 267
 },
 {
  "opcode": "FA",
  "opcode_parsed": [
   "FA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLI",
  "instr_parsed": [
   "CLI"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Clear interrupt flag; interrupts disabled when interrupt flag cleared.",
  "page": 269
 },
 {
  "opcode": "0F 06",
  "opcode_parsed": [
   "0F",
   "06"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "06"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLTS",
  "instr_parsed": [
   "CLTS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Clears TS flag in CR0.",
  "page": 273
 },
 {
  "opcode": "66 0F AE /6",
  "opcode_parsed": [
   "66",
   "0F",
   "AE",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CLWB m8",
  "instr_parsed": [
   "CLWB",
   "m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "CLWB",
  "description": "Writes back modified cache line containing m8, and may retain the line in cache hierarchy in non-modified state. 1",
  "page": 274
 },
 {
  "opcode": "F5",
  "opcode_parsed": [
   "F5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMC",
  "instr_parsed": [
   "CMC"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Complement CF flag.",
  "page": 276
 },
 {
  "opcode": "0F 47 /r",
  "opcode_parsed": [
   "0F",
   "47",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "47"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVA r16, r/m16",
  "instr_parsed": [
   "CMOVA",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if above (CF=0 and ZF=0).",
  "page": 277
 },
 {
  "opcode": "0F 47 /r",
  "opcode_parsed": [
   "0F",
   "47",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "47"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVA r32, r/m32",
  "instr_parsed": [
   "CMOVA",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if above (CF=0 and ZF=0).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 47 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "47",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "47"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVA r64, r/m64",
  "instr_parsed": [
   "CMOVA",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if above (CF=0 and ZF=0).",
  "page": 277
 },
 {
  "opcode": "0F 43 /r",
  "opcode_parsed": [
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVAE r16, r/m16",
  "instr_parsed": [
   "CMOVAE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if above or equal (CF=0).",
  "page": 277
 },
 {
  "opcode": "0F 43 /r",
  "opcode_parsed": [
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVAE r32, r/m32",
  "instr_parsed": [
   "CMOVAE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if above or equal (CF=0).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 43 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVAE r64, r/m64",
  "instr_parsed": [
   "CMOVAE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if above or equal (CF=0).",
  "page": 277
 },
 {
  "opcode": "0F 42 /r",
  "opcode_parsed": [
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVB r16, r/m16",
  "instr_parsed": [
   "CMOVB",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if below (CF=1).",
  "page": 277
 },
 {
  "opcode": "0F 42 /r",
  "opcode_parsed": [
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVB r32, r/m32",
  "instr_parsed": [
   "CMOVB",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if below (CF=1).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 42 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVB r64, r/m64",
  "instr_parsed": [
   "CMOVB",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if below (CF=1).",
  "page": 277
 },
 {
  "opcode": "0F 46 /r",
  "opcode_parsed": [
   "0F",
   "46",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "46"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVBE r16, r/m16",
  "instr_parsed": [
   "CMOVBE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if below or equal (CF=1 or ZF=1).",
  "page": 277
 },
 {
  "opcode": "0F 46 /r",
  "opcode_parsed": [
   "0F",
   "46",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "46"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVBE r32, r/m32",
  "instr_parsed": [
   "CMOVBE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if below or equal (CF=1 or ZF=1).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 46 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "46",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "46"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVBE r64, r/m64",
  "instr_parsed": [
   "CMOVBE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if below or equal (CF=1 or ZF=1).",
  "page": 277
 },
 {
  "opcode": "0F 42 /r",
  "opcode_parsed": [
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVC r16, r/m16",
  "instr_parsed": [
   "CMOVC",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if carry (CF=1).",
  "page": 277
 },
 {
  "opcode": "0F 42 /r",
  "opcode_parsed": [
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVC r32, r/m32",
  "instr_parsed": [
   "CMOVC",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if carry (CF=1).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 42 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVC r64, r/m64",
  "instr_parsed": [
   "CMOVC",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if carry (CF=1).",
  "page": 277
 },
 {
  "opcode": "0F 44 /r",
  "opcode_parsed": [
   "0F",
   "44",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVE r16, r/m16",
  "instr_parsed": [
   "CMOVE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if equal (ZF=1).",
  "page": 277
 },
 {
  "opcode": "0F 44 /r",
  "opcode_parsed": [
   "0F",
   "44",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVE r32, r/m32",
  "instr_parsed": [
   "CMOVE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if equal (ZF=1).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 44 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "44",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVE r64, r/m64",
  "instr_parsed": [
   "CMOVE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if equal (ZF=1).",
  "page": 277
 },
 {
  "opcode": "0F 4F /r",
  "opcode_parsed": [
   "0F",
   "4F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVG r16, r/m16",
  "instr_parsed": [
   "CMOVG",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if greater (ZF=0 and SF=OF).",
  "page": 277
 },
 {
  "opcode": "0F 4F /r",
  "opcode_parsed": [
   "0F",
   "4F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVG r32, r/m32",
  "instr_parsed": [
   "CMOVG",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if greater (ZF=0 and SF=OF).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 4F /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVG r64, r/m64",
  "instr_parsed": [
   "CMOVG",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if greater (ZF=0 and SF=OF).",
  "page": 277
 },
 {
  "opcode": "0F 4D /r",
  "opcode_parsed": [
   "0F",
   "4D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVGE r16, r/m16",
  "instr_parsed": [
   "CMOVGE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if greater or equal (SF=OF).",
  "page": 277
 },
 {
  "opcode": "0F 4D /r",
  "opcode_parsed": [
   "0F",
   "4D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVGE r32, r/m32",
  "instr_parsed": [
   "CMOVGE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if greater or equal (SF=OF).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 4D /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVGE r64, r/m64",
  "instr_parsed": [
   "CMOVGE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if greater or equal (SF=OF).",
  "page": 277
 },
 {
  "opcode": "0F 4C /r",
  "opcode_parsed": [
   "0F",
   "4C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVL r16, r/m16",
  "instr_parsed": [
   "CMOVL",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if less (SF ≠ OF).",
  "page": 277
 },
 {
  "opcode": "0F 4C /r",
  "opcode_parsed": [
   "0F",
   "4C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVL r32, r/m32",
  "instr_parsed": [
   "CMOVL",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if less (SF ≠ OF).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 4C /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVL r64, r/m64",
  "instr_parsed": [
   "CMOVL",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if less (SF ≠ OF).",
  "page": 277
 },
 {
  "opcode": "0F 4E /r",
  "opcode_parsed": [
   "0F",
   "4E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVLE r16, r/m16",
  "instr_parsed": [
   "CMOVLE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if less or equal (ZF=1 or SF ≠ OF).",
  "page": 277
 },
 {
  "opcode": "0F 4E /r",
  "opcode_parsed": [
   "0F",
   "4E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVLE r32, r/m32",
  "instr_parsed": [
   "CMOVLE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if less or equal (ZF=1 or SF ≠ OF).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 4E /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVLE r64, r/m64",
  "instr_parsed": [
   "CMOVLE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if less or equal (ZF=1 or SF ≠ OF).",
  "page": 277
 },
 {
  "opcode": "0F 46 /r",
  "opcode_parsed": [
   "0F",
   "46",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "46"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNA r16, r/m16",
  "instr_parsed": [
   "CMOVNA",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not above (CF=1 or ZF=1).",
  "page": 277
 },
 {
  "opcode": "0F 46 /r",
  "opcode_parsed": [
   "0F",
   "46",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "46"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNA r32, r/m32",
  "instr_parsed": [
   "CMOVNA",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not above (CF=1 or ZF=1).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 46 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "46",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "46"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNA r64, r/m64",
  "instr_parsed": [
   "CMOVNA",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not above (CF=1 or ZF=1).",
  "page": 277
 },
 {
  "opcode": "0F 42 /r",
  "opcode_parsed": [
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNAE r16, r/m16",
  "instr_parsed": [
   "CMOVNAE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not above or equal (CF=1).",
  "page": 277
 },
 {
  "opcode": "0F 42 /r",
  "opcode_parsed": [
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNAE r32, r/m32",
  "instr_parsed": [
   "CMOVNAE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not above or equal (CF=1).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 42 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "42",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "42"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNAE r64, r/m64",
  "instr_parsed": [
   "CMOVNAE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not above or equal (CF=1).",
  "page": 277
 },
 {
  "opcode": "0F 43 /r",
  "opcode_parsed": [
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNB r16, r/m16",
  "instr_parsed": [
   "CMOVNB",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not below (CF=0).",
  "page": 277
 },
 {
  "opcode": "0F 43 /r",
  "opcode_parsed": [
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNB r32, r/m32",
  "instr_parsed": [
   "CMOVNB",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not below (CF=0).",
  "page": 277
 },
 {
  "opcode": "REX.W + 0F 43 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNB r64, r/m64",
  "instr_parsed": [
   "CMOVNB",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not below (CF=0).",
  "page": 277
 },
 {
  "opcode": "0F 47 /r",
  "opcode_parsed": [
   "0F",
   "47",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "47"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNBE r16, r/m16",
  "instr_parsed": [
   "CMOVNBE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not below or equal (CF=0 and ZF=0).",
  "page": 277
 },
 {
  "opcode": "0F 47 /r",
  "opcode_parsed": [
   "0F",
   "47",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "47"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNBE r32, r/m32",
  "instr_parsed": [
   "CMOVNBE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not below or equal (CF=0 and ZF=0).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 47 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "47",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "47"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNBE r64, r/m64",
  "instr_parsed": [
   "CMOVNBE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not below or equal (CF=0 and ZF=0).",
  "page": 278
 },
 {
  "opcode": "0F 43 /r",
  "opcode_parsed": [
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNC r16, r/m16",
  "instr_parsed": [
   "CMOVNC",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not carry (CF=0).",
  "page": 278
 },
 {
  "opcode": "0F 43 /r",
  "opcode_parsed": [
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNC r32, r/m32",
  "instr_parsed": [
   "CMOVNC",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not carry (CF=0).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 43 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "43",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "43"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNC r64, r/m64",
  "instr_parsed": [
   "CMOVNC",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not carry (CF=0).",
  "page": 278
 },
 {
  "opcode": "0F 45 /r",
  "opcode_parsed": [
   "0F",
   "45",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "45"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNE r16, r/m16",
  "instr_parsed": [
   "CMOVNE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not equal (ZF=0).",
  "page": 278
 },
 {
  "opcode": "0F 45 /r",
  "opcode_parsed": [
   "0F",
   "45",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "45"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNE r32, r/m32",
  "instr_parsed": [
   "CMOVNE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not equal (ZF=0).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 45 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "45",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "45"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNE r64, r/m64",
  "instr_parsed": [
   "CMOVNE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not equal (ZF=0).",
  "page": 278
 },
 {
  "opcode": "0F 4E /r",
  "opcode_parsed": [
   "0F",
   "4E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNG r16, r/m16",
  "instr_parsed": [
   "CMOVNG",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not greater (ZF=1 or SF ≠ OF).",
  "page": 278
 },
 {
  "opcode": "0F 4E /r",
  "opcode_parsed": [
   "0F",
   "4E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNG r32, r/m32",
  "instr_parsed": [
   "CMOVNG",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not greater (ZF=1 or SF ≠ OF).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 4E /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNG r64, r/m64",
  "instr_parsed": [
   "CMOVNG",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not greater (ZF=1 or SF ≠ OF).",
  "page": 278
 },
 {
  "opcode": "0F 4C /r",
  "opcode_parsed": [
   "0F",
   "4C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNGE r16, r/m16",
  "instr_parsed": [
   "CMOVNGE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not greater or equal (SF ≠ OF).",
  "page": 278
 },
 {
  "opcode": "0F 4C /r",
  "opcode_parsed": [
   "0F",
   "4C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNGE r32, r/m32",
  "instr_parsed": [
   "CMOVNGE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not greater or equal (SF ≠ OF).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 4C /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNGE r64, r/m64",
  "instr_parsed": [
   "CMOVNGE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not greater or equal (SF ≠ OF).",
  "page": 278
 },
 {
  "opcode": "0F 4D /r",
  "opcode_parsed": [
   "0F",
   "4D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNL r16, r/m16",
  "instr_parsed": [
   "CMOVNL",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not less (SF=OF).",
  "page": 278
 },
 {
  "opcode": "0F 4D /r",
  "opcode_parsed": [
   "0F",
   "4D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNL r32, r/m32",
  "instr_parsed": [
   "CMOVNL",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not less (SF=OF).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 4D /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNL r64, r/m64",
  "instr_parsed": [
   "CMOVNL",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not less (SF=OF).",
  "page": 278
 },
 {
  "opcode": "0F 4F /r",
  "opcode_parsed": [
   "0F",
   "4F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNLE r16, r/m16",
  "instr_parsed": [
   "CMOVNLE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not less or equal (ZF=0 and SF=OF).",
  "page": 278
 },
 {
  "opcode": "0F 4F /r",
  "opcode_parsed": [
   "0F",
   "4F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNLE r32, r/m32",
  "instr_parsed": [
   "CMOVNLE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not less or equal (ZF=0 and SF=OF).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 4F /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNLE r64, r/m64",
  "instr_parsed": [
   "CMOVNLE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not less or equal (ZF=0 and SF=OF).",
  "page": 278
 },
 {
  "opcode": "0F 41 /r",
  "opcode_parsed": [
   "0F",
   "41",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "41"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNO r16, r/m16",
  "instr_parsed": [
   "CMOVNO",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not overflow (OF=0).",
  "page": 278
 },
 {
  "opcode": "0F 41 /r",
  "opcode_parsed": [
   "0F",
   "41",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "41"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNO r32, r/m32",
  "instr_parsed": [
   "CMOVNO",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not overflow (OF=0).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 41 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "41",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "41"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNO r64, r/m64",
  "instr_parsed": [
   "CMOVNO",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not overflow (OF=0).",
  "page": 278
 },
 {
  "opcode": "0F 4B /r",
  "opcode_parsed": [
   "0F",
   "4B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNP r16, r/m16",
  "instr_parsed": [
   "CMOVNP",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not parity (PF=0).",
  "page": 278
 },
 {
  "opcode": "0F 4B /r",
  "opcode_parsed": [
   "0F",
   "4B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNP r32, r/m32",
  "instr_parsed": [
   "CMOVNP",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not parity (PF=0).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 4B /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNP r64, r/m64",
  "instr_parsed": [
   "CMOVNP",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not parity (PF=0).",
  "page": 278
 },
 {
  "opcode": "0F 49 /r",
  "opcode_parsed": [
   "0F",
   "49",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "49"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNS r16, r/m16",
  "instr_parsed": [
   "CMOVNS",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not sign (SF=0).",
  "page": 278
 },
 {
  "opcode": "0F 49 /r",
  "opcode_parsed": [
   "0F",
   "49",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "49"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNS r32, r/m32",
  "instr_parsed": [
   "CMOVNS",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not sign (SF=0).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 49 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "49",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "49"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNS r64, r/m64",
  "instr_parsed": [
   "CMOVNS",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not sign (SF=0).",
  "page": 278
 },
 {
  "opcode": "0F 45 /r",
  "opcode_parsed": [
   "0F",
   "45",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "45"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNZ r16, r/m16",
  "instr_parsed": [
   "CMOVNZ",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not zero (ZF=0).",
  "page": 278
 },
 {
  "opcode": "0F 45 /r",
  "opcode_parsed": [
   "0F",
   "45",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "45"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNZ r32, r/m32",
  "instr_parsed": [
   "CMOVNZ",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if not zero (ZF=0).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 45 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "45",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "45"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVNZ r64, r/m64",
  "instr_parsed": [
   "CMOVNZ",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if not zero (ZF=0).",
  "page": 278
 },
 {
  "opcode": "0F 40 /r",
  "opcode_parsed": [
   "0F",
   "40",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "40"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVO r16, r/m16",
  "instr_parsed": [
   "CMOVO",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if overflow (OF=1).",
  "page": 278
 },
 {
  "opcode": "0F 40 /r",
  "opcode_parsed": [
   "0F",
   "40",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "40"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVO r32, r/m32",
  "instr_parsed": [
   "CMOVO",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if overflow (OF=1).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 40 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "40",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "40"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVO r64, r/m64",
  "instr_parsed": [
   "CMOVO",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if overflow (OF=1).",
  "page": 278
 },
 {
  "opcode": "0F 4A /r",
  "opcode_parsed": [
   "0F",
   "4A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVP r16, r/m16",
  "instr_parsed": [
   "CMOVP",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if parity (PF=1).",
  "page": 278
 },
 {
  "opcode": "0F 4A /r",
  "opcode_parsed": [
   "0F",
   "4A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVP r32, r/m32",
  "instr_parsed": [
   "CMOVP",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if parity (PF=1).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 4A /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVP r64, r/m64",
  "instr_parsed": [
   "CMOVP",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if parity (PF=1).",
  "page": 278
 },
 {
  "opcode": "0F 4A /r",
  "opcode_parsed": [
   "0F",
   "4A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVPE r16, r/m16",
  "instr_parsed": [
   "CMOVPE",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if parity even (PF=1).",
  "page": 278
 },
 {
  "opcode": "0F 4A /r",
  "opcode_parsed": [
   "0F",
   "4A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVPE r32, r/m32",
  "instr_parsed": [
   "CMOVPE",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if parity even (PF=1).",
  "page": 278
 },
 {
  "opcode": "REX.W + 0F 4A /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVPE r64, r/m64",
  "instr_parsed": [
   "CMOVPE",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if parity even (PF=1).",
  "page": 278
 },
 {
  "opcode": "0F 4B /r",
  "opcode_parsed": [
   "0F",
   "4B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVPO r16, r/m16",
  "instr_parsed": [
   "CMOVPO",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if parity odd (PF=0).",
  "page": 279
 },
 {
  "opcode": "0F 4B /r",
  "opcode_parsed": [
   "0F",
   "4B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVPO r32, r/m32",
  "instr_parsed": [
   "CMOVPO",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if parity odd (PF=0).",
  "page": 279
 },
 {
  "opcode": "REX.W + 0F 4B /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "4B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "4B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVPO r64, r/m64",
  "instr_parsed": [
   "CMOVPO",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if parity odd (PF=0).",
  "page": 279
 },
 {
  "opcode": "0F 48 /r",
  "opcode_parsed": [
   "0F",
   "48",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "48"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVS r16, r/m16",
  "instr_parsed": [
   "CMOVS",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if sign (SF=1).",
  "page": 279
 },
 {
  "opcode": "0F 48 /r",
  "opcode_parsed": [
   "0F",
   "48",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "48"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVS r32, r/m32",
  "instr_parsed": [
   "CMOVS",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if sign (SF=1).",
  "page": 279
 },
 {
  "opcode": "REX.W + 0F 48 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "48",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "48"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVS r64, r/m64",
  "instr_parsed": [
   "CMOVS",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if sign (SF=1).",
  "page": 279
 },
 {
  "opcode": "0F 44 /r",
  "opcode_parsed": [
   "0F",
   "44",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVZ r16, r/m16",
  "instr_parsed": [
   "CMOVZ",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if zero (ZF=1).",
  "page": 279
 },
 {
  "opcode": "0F 44 /r",
  "opcode_parsed": [
   "0F",
   "44",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVZ r32, r/m32",
  "instr_parsed": [
   "CMOVZ",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move if zero (ZF=1).",
  "page": 279
 },
 {
  "opcode": "REX.W + 0F 44 /r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "44",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMOVZ r64, r/m64",
  "instr_parsed": [
   "CMOVZ",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move if zero (ZF=1).",
  "page": 279
 },
 {
  "opcode": "3C ib",
  "opcode_parsed": [
   "3C",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "3C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP AL, imm8",
  "instr_parsed": [
   "CMP",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm8 with AL.",
  "page": 281
 },
 {
  "opcode": "3D iw",
  "opcode_parsed": [
   "3D",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "3D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "CMP AX, imm16",
  "instr_parsed": [
   "CMP",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm16 with AX.",
  "page": 281
 },
 {
  "opcode": "3D id",
  "opcode_parsed": [
   "3D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "3D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "CMP EAX, imm32",
  "instr_parsed": [
   "CMP",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm32 with EAX.",
  "page": 281
 },
 {
  "opcode": "REX.W + 3D id",
  "opcode_parsed": [
   "REX.W",
   "3D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "3D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "CMP RAX, imm32",
  "instr_parsed": [
   "CMP",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare imm32 sign-extended to 64-bits  with RAX.",
  "page": 281
 },
 {
  "opcode": "80 /7 ib",
  "opcode_parsed": [
   "80",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m8, imm8",
  "instr_parsed": [
   "CMP",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm8 with r/m8.",
  "page": 281
 },
 {
  "opcode": "REX + 80 /7 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m8 * , imm8",
  "instr_parsed": [
   "CMP",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare imm8 with r/m8.",
  "page": 281
 },
 {
  "opcode": "81 /7 iw",
  "opcode_parsed": [
   "81",
   "/7",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "CMP r/m16, imm16",
  "instr_parsed": [
   "CMP",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm16 with r/m16.",
  "page": 281
 },
 {
  "opcode": "81 /7 id",
  "opcode_parsed": [
   "81",
   "/7",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "CMP r/m32, imm32",
  "instr_parsed": [
   "CMP",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm32 with r/m32.",
  "page": 281
 },
 {
  "opcode": "REX.W + 81 /7 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/7",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "CMP r/m64, imm32",
  "instr_parsed": [
   "CMP",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare imm32 sign-extended to 64-bits with r/m64.",
  "page": 281
 },
 {
  "opcode": "83 /7 ib",
  "opcode_parsed": [
   "83",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m16, imm8",
  "instr_parsed": [
   "CMP",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm8 with r/m16.",
  "page": 281
 },
 {
  "opcode": "83 /7 ib",
  "opcode_parsed": [
   "83",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m32, imm8",
  "instr_parsed": [
   "CMP",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare imm8 with r/m32.",
  "page": 281
 },
 {
  "opcode": "REX.W + 83 /7 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m64, imm8",
  "instr_parsed": [
   "CMP",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare imm8 with r/m64.",
  "page": 281
 },
 {
  "opcode": "38 / r",
  "opcode_parsed": [
   "38",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m8, r8",
  "instr_parsed": [
   "CMP",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare r8 with r/m8.",
  "page": 281
 },
 {
  "opcode": "REX + 38 / r",
  "opcode_parsed": [
   "REX",
   "38",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m8 * , r8 *",
  "instr_parsed": [
   "CMP",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare r8 with r/m8.",
  "page": 281
 },
 {
  "opcode": "39 / r",
  "opcode_parsed": [
   "39",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "39"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m16, r16",
  "instr_parsed": [
   "CMP",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare r16 with r/m16.",
  "page": 281
 },
 {
  "opcode": "39 / r",
  "opcode_parsed": [
   "39",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "39"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m32, r32",
  "instr_parsed": [
   "CMP",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare r32 with r/m32.",
  "page": 281
 },
 {
  "opcode": "REX.W + 39 / r",
  "opcode_parsed": [
   "REX.W",
   "39",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "39"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r/m64,r64",
  "instr_parsed": [
   "CMP",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare r64 with r/m64.",
  "page": 281
 },
 {
  "opcode": "3A / r",
  "opcode_parsed": [
   "3A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "3A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r8, r/m8",
  "instr_parsed": [
   "CMP",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare r/m8 with r8.",
  "page": 281
 },
 {
  "opcode": "REX + 3A / r",
  "opcode_parsed": [
   "REX",
   "3A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "3A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r8 * , r/m8 *",
  "instr_parsed": [
   "CMP",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare r/m8 with  r8.",
  "page": 281
 },
 {
  "opcode": "3B / r",
  "opcode_parsed": [
   "3B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "3B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r16, r/m16",
  "instr_parsed": [
   "CMP",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare r/m16 with r16.",
  "page": 281
 },
 {
  "opcode": "3B / r",
  "opcode_parsed": [
   "3B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "3B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r32, r/m32",
  "instr_parsed": [
   "CMP",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare r/m32 with r32.",
  "page": 281
 },
 {
  "opcode": "REX.W + 3B / r",
  "opcode_parsed": [
   "REX.W",
   "3B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "3B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMP r64, r/m64",
  "instr_parsed": [
   "CMP",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare r/m64 with r64.",
  "page": 281
 },
 {
  "opcode": "A6",
  "opcode_parsed": [
   "A6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPS m8, m8",
  "instr_parsed": [
   "CMPS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly.",
  "page": 297
 },
 {
  "opcode": "A7",
  "opcode_parsed": [
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPS m16 , m16",
  "instr_parsed": [
   "CMPS",
   "m16",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly.",
  "page": 297
 },
 {
  "opcode": "A7",
  "opcode_parsed": [
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPS m32, m32",
  "instr_parsed": [
   "CMPS",
   "m32",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly.",
  "page": 297
 },
 {
  "opcode": "REX.W + A7",
  "opcode_parsed": [
   "REX.W",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPS m64, m64",
  "instr_parsed": [
   "CMPS",
   "m64",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly.",
  "page": 297
 },
 {
  "opcode": "A6",
  "opcode_parsed": [
   "A6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPSB",
  "instr_parsed": [
   "CMPSB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly.",
  "page": 297
 },
 {
  "opcode": "A7",
  "opcode_parsed": [
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPSW",
  "instr_parsed": [
   "CMPSW"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly.",
  "page": 297
 },
 {
  "opcode": "A7",
  "opcode_parsed": [
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPSD",
  "instr_parsed": [
   "CMPSD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly.",
  "page": 297
 },
 {
  "opcode": "REX.W + A7",
  "opcode_parsed": [
   "REX.W",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPSQ",
  "instr_parsed": [
   "CMPSQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly.",
  "page": 297
 },
 {
  "opcode": "0F B0/ r",
  "opcode_parsed": [
   "0F",
   "B0",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPXCHG r/m8, r8",
  "instr_parsed": [
   "CMPXCHG",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare AL with r/m8 . If equal, ZF is set and r8 is loaded into r/m8 . Else, clear ZF and load r/m8 into AL.",
  "page": 309
 },
 {
  "opcode": "REX + 0F B0/ r",
  "opcode_parsed": [
   "REX",
   "0F",
   "B0",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPXCHG r/m8**,r8",
  "instr_parsed": [
   "CMPXCHG",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare AL with r/m8 . If equal, ZF is set and r8 is loaded into r/m8 . Else, clear ZF and load r/m8 into AL.",
  "page": 309
 },
 {
  "opcode": "0F B1/ r",
  "opcode_parsed": [
   "0F",
   "B1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPXCHG r/m16, r16",
  "instr_parsed": [
   "CMPXCHG",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare AX with r/m16 . If equal, ZF is set and r16 is loaded into r/m16 . Else, clear ZF and load r/m16 into AX.",
  "page": 309
 },
 {
  "opcode": "0F B1/ r",
  "opcode_parsed": [
   "0F",
   "B1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPXCHG r/m32, r32",
  "instr_parsed": [
   "CMPXCHG",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare EAX with r/m32 . If equal, ZF is set and r32 is loaded into r/m32 . Else, clear ZF and load r/m32 into EAX.",
  "page": 309
 },
 {
  "opcode": "REX.W + 0F B1/ r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "B1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CMPXCHG r/m64, r64",
  "instr_parsed": [
   "CMPXCHG",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare RAX with r/m64 . If equal, ZF is set and r64 is loaded into r/m64 . Else, clear ZF and load r/m64 into RAX.",
  "page": 309
 },
 {
  "opcode": "0F A2",
  "opcode_parsed": [
   "0F",
   "A2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CPUID",
  "instr_parsed": [
   "CPUID"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well).",
  "page": 318
 },
 {
  "opcode": "F2 0F 38 F0 /r",
  "opcode_parsed": [
   "F2",
   "0F",
   "38",
   "F0",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CRC32 r32, r/m8",
  "instr_parsed": [
   "CRC32",
   "r32",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Accumulate CRC32 on r/m8 .",
  "page": 361
 },
 {
  "opcode": "F2 REX 0F 38 F0 /r",
  "opcode_parsed": [
   "F2",
   "REX",
   "0F",
   "38",
   "F0",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CRC32 r32, r/m8*",
  "instr_parsed": [
   "CRC32",
   "r32",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Accumulate CRC32 on r/m8.",
  "page": 361
 },
 {
  "opcode": "F2 0F 38 F1 /r",
  "opcode_parsed": [
   "F2",
   "0F",
   "38",
   "F1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CRC32 r32, r/m16",
  "instr_parsed": [
   "CRC32",
   "r32",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Accumulate CRC32 on r/m16 .",
  "page": 361
 },
 {
  "opcode": "F2 0F 38 F1 /r",
  "opcode_parsed": [
   "F2",
   "0F",
   "38",
   "F1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CRC32 r32, r/m32",
  "instr_parsed": [
   "CRC32",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Accumulate CRC32 on r/m32.",
  "page": 361
 },
 {
  "opcode": "F2 REX.W 0F 38 F0 /r",
  "opcode_parsed": [
   "F2",
   "REX.W",
   "0F",
   "38",
   "F0",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CRC32 r64, r/m8",
  "instr_parsed": [
   "CRC32",
   "r64",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Accumulate CRC32 on r/m8.",
  "page": 361
 },
 {
  "opcode": "F2 REX.W 0F 38 F1 /r",
  "opcode_parsed": [
   "F2",
   "REX.W",
   "0F",
   "38",
   "F1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CRC32 r64, r/m64",
  "instr_parsed": [
   "CRC32",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Accumulate CRC32 on r/m64.",
  "page": 361
 },
 {
  "opcode": "99",
  "opcode_parsed": [
   "99"
  ],
  "opcode_bytes": [
   {
    "components": [
     "99"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CWD",
  "instr_parsed": [
   "CWD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "DX:AX := sign-extend of AX.",
  "page": 414
 },
 {
  "opcode": "99",
  "opcode_parsed": [
   "99"
  ],
  "opcode_bytes": [
   {
    "components": [
     "99"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CDQ",
  "instr_parsed": [
   "CDQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "EDX:EAX := sign-extend of EAX.",
  "page": 414
 },
 {
  "opcode": "REX.W + 99",
  "opcode_parsed": [
   "REX.W",
   "99"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "99"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "CQO",
  "instr_parsed": [
   "CQO"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "RDX:RAX:= sign-extend of RAX.",
  "page": 414
 },
 {
  "opcode": "27",
  "opcode_parsed": [
   "27"
  ],
  "opcode_bytes": [
   {
    "components": [
     "27"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DAA",
  "instr_parsed": [
   "DAA"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decimal adjust AL after addition.",
  "page": 415
 },
 {
  "opcode": "2F",
  "opcode_parsed": [
   "2F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "2F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DAS",
  "instr_parsed": [
   "DAS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decimal adjust AL after subtraction.",
  "page": 417
 },
 {
  "opcode": "FE /1",
  "opcode_parsed": [
   "FE",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DEC r/m8",
  "instr_parsed": [
   "DEC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement r/m8 by 1.",
  "page": 419
 },
 {
  "opcode": "REX + FE /1",
  "opcode_parsed": [
   "REX",
   "FE",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DEC r/m8 *",
  "instr_parsed": [
   "DEC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Decrement r/m8 by 1.",
  "page": 419
 },
 {
  "opcode": "FF /1",
  "opcode_parsed": [
   "FF",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DEC r/m16",
  "instr_parsed": [
   "DEC",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement r/m16 by 1.",
  "page": 419
 },
 {
  "opcode": "FF /1",
  "opcode_parsed": [
   "FF",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DEC r/m32",
  "instr_parsed": [
   "DEC",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement r/m32 by 1.",
  "page": 419
 },
 {
  "opcode": "REX.W + FF /1",
  "opcode_parsed": [
   "REX.W",
   "FF",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DEC r/m64",
  "instr_parsed": [
   "DEC",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Decrement r/m64 by 1.",
  "page": 419
 },
 {
  "opcode": "48+rw",
  "opcode_parsed": [
   "48",
   "+rw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "48",
     "+rw"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DEC r16",
  "instr_parsed": [
   "DEC",
   "r16"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement r16 by 1.",
  "page": 419
 },
 {
  "opcode": "48+rd",
  "opcode_parsed": [
   "48",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "48",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DEC r32",
  "instr_parsed": [
   "DEC",
   "r32"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement r32 by 1.",
  "page": 419
 },
 {
  "opcode": "F6 /6",
  "opcode_parsed": [
   "F6",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DIV r/m8",
  "instr_parsed": [
   "DIV",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide AX by r/m8 , with result stored in AL  := Quotient, AH  := Remainder.",
  "page": 421
 },
 {
  "opcode": "REX + F6 /6",
  "opcode_parsed": [
   "REX",
   "F6",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DIV r/m8 *",
  "instr_parsed": [
   "DIV",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide AX by r/m8 , with result stored in AL  := Quotient, AH  := Remainder.",
  "page": 421
 },
 {
  "opcode": "F7 /6",
  "opcode_parsed": [
   "F7",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DIV r/m16",
  "instr_parsed": [
   "DIV",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide DX:AX by r/m16 , with result stored in AX  := Quotient, DX  := Remainder.",
  "page": 421
 },
 {
  "opcode": "F7 /6",
  "opcode_parsed": [
   "F7",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DIV r/m32",
  "instr_parsed": [
   "DIV",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide EDX:EAX by r/m32 , with result stored in EAX  := Quotient, EDX  := Remainder.",
  "page": 421
 },
 {
  "opcode": "REX.W + F7 /6",
  "opcode_parsed": [
   "REX.W",
   "F7",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "DIV r/m64",
  "instr_parsed": [
   "DIV",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide RDX:RAX by r/m64 , with result stored in RAX  := Quotient, RDX  := Remainder.",
  "page": 421
 },
 {
  "opcode": "NP 0F 77",
  "opcode_parsed": [
   "NP",
   "0F",
   "77"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "77"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "EMMS",
  "instr_parsed": [
   "EMMS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set the x87 FPU tag word to empty.",
  "page": 439
 },
 {
  "opcode": "C8 iw 00",
  "opcode_parsed": [
   "C8",
   "iw",
   "00"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ENTER imm16 , 0",
  "instr_parsed": [
   "ENTER",
   "imm16",
   "0"
  ],
  "op_en": "II",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Create a stack frame for a procedure.",
  "page": 446
 },
 {
  "opcode": "C8 iw 01",
  "opcode_parsed": [
   "C8",
   "iw",
   "01"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ENTER imm16 ,1",
  "instr_parsed": [
   "ENTER",
   "imm16",
   "1"
  ],
  "op_en": "II",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Create a stack frame with a nested pointer for a procedure.",
  "page": 446
 },
 {
  "opcode": "C8 iw ib",
  "opcode_parsed": [
   "C8",
   "iw",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "ENTER imm16, imm8",
  "instr_parsed": [
   "ENTER",
   "imm16",
   "imm8"
  ],
  "op_en": "II",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Create a stack frame with nested pointers for a procedure.",
  "page": 446
 },
 {
  "opcode": "D9 F0",
  "opcode_parsed": [
   "D9",
   "F0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "F2XM1",
  "instr_parsed": [
   "F2XM1"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(0) with (2 ST(0)  – 1).",
  "page": 451
 },
 {
  "opcode": "D9 E1",
  "opcode_parsed": [
   "D9",
   "E1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FABS",
  "instr_parsed": [
   "FABS"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST with its absolute value.",
  "page": 453
 },
 {
  "opcode": "D8 /0",
  "opcode_parsed": [
   "D8",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FADD m32fp",
  "instr_parsed": [
   "FADD",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add m32fp to ST(0) and store result in ST(0).",
  "page": 454
 },
 {
  "opcode": "DC /0",
  "opcode_parsed": [
   "DC",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FADD m64fp",
  "instr_parsed": [
   "FADD",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add m64fp to ST(0) and store result in ST(0).",
  "page": 454
 },
 {
  "opcode": "D8 C0+i",
  "opcode_parsed": [
   "D8",
   "C0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FADD ST(0), ST(i)",
  "instr_parsed": [
   "FADD",
   "ST(0)",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add ST(0) to ST(i) and store result in ST(0).",
  "page": 454
 },
 {
  "opcode": "DC C0+i",
  "opcode_parsed": [
   "DC",
   "C0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FADD ST(i), ST(0)",
  "instr_parsed": [
   "FADD",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add ST(i) to ST(0) and store result in ST(i).",
  "page": 454
 },
 {
  "opcode": "DE C0+i",
  "opcode_parsed": [
   "DE",
   "C0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FADDP ST(i), ST(0)",
  "instr_parsed": [
   "FADDP",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add ST(0) to ST(i), store result in ST(i), and pop the register stack.",
  "page": 454
 },
 {
  "opcode": "DE C1",
  "opcode_parsed": [
   "DE",
   "C1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FADDP",
  "instr_parsed": [
   "FADDP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add ST(0) to ST(1), store result in ST(1), and pop the register stack.",
  "page": 454
 },
 {
  "opcode": "DA /0",
  "opcode_parsed": [
   "DA",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIADD m32int",
  "instr_parsed": [
   "FIADD",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add m32int to ST(0) and store result in ST(0).",
  "page": 454
 },
 {
  "opcode": "DE /0",
  "opcode_parsed": [
   "DE",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIADD m16int",
  "instr_parsed": [
   "FIADD",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Add m16int to ST(0) and store result in ST(0).",
  "page": 454
 },
 {
  "opcode": "D9 E0",
  "opcode_parsed": [
   "D9",
   "E0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCHS",
  "instr_parsed": [
   "FCHS"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Complements sign of ST(0).",
  "page": 461
 },
 {
  "opcode": "9B DB E2",
  "opcode_parsed": [
   "9B",
   "DB",
   "E2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCLEX *",
  "instr_parsed": [
   "FCLEX"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Clear floating-point exception flags after checking for pending unmasked floating-point exceptions.",
  "page": 463
 },
 {
  "opcode": "DB E2",
  "opcode_parsed": [
   "DB",
   "E2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "* FNCLEX",
  "instr_parsed": [
   "FNCLEX"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Clear floating-point exception flags without checking for pending unmasked floating-point exceptions.",
  "page": 463
 },
 {
  "opcode": "D8 /2",
  "opcode_parsed": [
   "D8",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOM m32fp",
  "instr_parsed": [
   "FCOM",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m32fp .",
  "page": 467
 },
 {
  "opcode": "DC /2",
  "opcode_parsed": [
   "DC",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOM m64fp",
  "instr_parsed": [
   "FCOM",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m64fp .",
  "page": 467
 },
 {
  "opcode": "D8 D0+i",
  "opcode_parsed": [
   "D8",
   "D0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOM ST(i)",
  "instr_parsed": [
   "FCOM",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i).",
  "page": 467
 },
 {
  "opcode": "D8 D1",
  "opcode_parsed": [
   "D8",
   "D1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOM",
  "instr_parsed": [
   "FCOM"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(1).",
  "page": 467
 },
 {
  "opcode": "D8 /3",
  "opcode_parsed": [
   "D8",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOMP m32fp",
  "instr_parsed": [
   "FCOMP",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m32fp and pop register stack.",
  "page": 467
 },
 {
  "opcode": "DC /3",
  "opcode_parsed": [
   "DC",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOMP m64fp",
  "instr_parsed": [
   "FCOMP",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m64fp and pop register stack.",
  "page": 467
 },
 {
  "opcode": "D8 D8+i",
  "opcode_parsed": [
   "D8",
   "D8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOMP ST(i)",
  "instr_parsed": [
   "FCOMP",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i) and pop register stack.",
  "page": 467
 },
 {
  "opcode": "D8 D9",
  "opcode_parsed": [
   "D8",
   "D9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOMP",
  "instr_parsed": [
   "FCOMP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(1) and pop register stack.",
  "page": 467
 },
 {
  "opcode": "DE D9",
  "opcode_parsed": [
   "DE",
   "D9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOMPP",
  "instr_parsed": [
   "FCOMPP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(1) and pop register stack twice.",
  "page": 467
 },
 {
  "opcode": "DB F0+i",
  "opcode_parsed": [
   "DB",
   "F0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOMI ST, ST(i)",
  "instr_parsed": [
   "FCOMI",
   "ST",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i) and set status flags accordingly.",
  "page": 470
 },
 {
  "opcode": "DF F0+i",
  "opcode_parsed": [
   "DF",
   "F0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOMIP ST, ST(i)",
  "instr_parsed": [
   "FCOMIP",
   "ST",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i), set status flags accordingly, and pop register stack.",
  "page": 470
 },
 {
  "opcode": "DB E8+i",
  "opcode_parsed": [
   "DB",
   "E8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FUCOMI ST, ST(i)",
  "instr_parsed": [
   "FUCOMI",
   "ST",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i), check for ordered values, and set status flags accordingly.",
  "page": 470
 },
 {
  "opcode": "DF E8+i",
  "opcode_parsed": [
   "DF",
   "E8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FUCOMIP ST, ST(i)",
  "instr_parsed": [
   "FUCOMIP",
   "ST",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i), check for ordered values, set status flags accordingly, and pop register stack.",
  "page": 470
 },
 {
  "opcode": "D9 FF",
  "opcode_parsed": [
   "D9",
   "FF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FCOS",
  "instr_parsed": [
   "FCOS"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(0) with its approximate cosine.",
  "page": 473
 },
 {
  "opcode": "D9 F6",
  "opcode_parsed": [
   "D9",
   "F6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDECSTP",
  "instr_parsed": [
   "FDECSTP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement TOP field in FPU status word.",
  "page": 475
 },
 {
  "opcode": "D8 /6",
  "opcode_parsed": [
   "D8",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIV m32fp",
  "instr_parsed": [
   "FDIV",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by m32fp and store result in ST(0).",
  "page": 476
 },
 {
  "opcode": "DC /6",
  "opcode_parsed": [
   "DC",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIV m64fp",
  "instr_parsed": [
   "FDIV",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by m64fp and store result in ST(0).",
  "page": 476
 },
 {
  "opcode": "D8 F0+i",
  "opcode_parsed": [
   "D8",
   "F0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIV ST(0), ST(i)",
  "instr_parsed": [
   "FDIV",
   "ST(0)",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by ST(i) and store result in ST(0).",
  "page": 476
 },
 {
  "opcode": "DC F8+i",
  "opcode_parsed": [
   "DC",
   "F8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIV ST(i), ST(0)",
  "instr_parsed": [
   "FDIV",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(i) by ST(0) and store result in ST(i).",
  "page": 476
 },
 {
  "opcode": "DE F8+i",
  "opcode_parsed": [
   "DE",
   "F8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVP ST(i), ST(0)",
  "instr_parsed": [
   "FDIVP",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(i) by ST(0), store result in ST(i), and pop the register stack.",
  "page": 476
 },
 {
  "opcode": "DE F9",
  "opcode_parsed": [
   "DE",
   "F9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVP",
  "instr_parsed": [
   "FDIVP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(1) by ST(0), store result in ST(1), and pop the register stack.",
  "page": 476
 },
 {
  "opcode": "DA /6",
  "opcode_parsed": [
   "DA",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIDIV m32int",
  "instr_parsed": [
   "FIDIV",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by m32int and store result in ST(0).",
  "page": 476
 },
 {
  "opcode": "DE /6",
  "opcode_parsed": [
   "DE",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIDIV m16int",
  "instr_parsed": [
   "FIDIV",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by m16int and store result in ST(0).",
  "page": 476
 },
 {
  "opcode": "D8 /7",
  "opcode_parsed": [
   "D8",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVR m32fp",
  "instr_parsed": [
   "FDIVR",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide m32fp by ST(0) and store result in ST(0).",
  "page": 479
 },
 {
  "opcode": "DC /7",
  "opcode_parsed": [
   "DC",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVR m64fp",
  "instr_parsed": [
   "FDIVR",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide m64fp by ST(0) and store result in ST(0).",
  "page": 479
 },
 {
  "opcode": "D8 F8+i",
  "opcode_parsed": [
   "D8",
   "F8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVR ST(0), ST(i)",
  "instr_parsed": [
   "FDIVR",
   "ST(0)",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(i) by ST(0) and store result in ST(0).",
  "page": 479
 },
 {
  "opcode": "DC F0+i",
  "opcode_parsed": [
   "DC",
   "F0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVR ST(i), ST(0)",
  "instr_parsed": [
   "FDIVR",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by ST(i) and store result in ST(i).",
  "page": 479
 },
 {
  "opcode": "DE F0+i",
  "opcode_parsed": [
   "DE",
   "F0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVRP ST(i), ST(0)",
  "instr_parsed": [
   "FDIVRP",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by ST(i), store result in ST(i), and pop the register stack.",
  "page": 479
 },
 {
  "opcode": "DE F1",
  "opcode_parsed": [
   "DE",
   "F1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FDIVRP",
  "instr_parsed": [
   "FDIVRP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide ST(0) by ST(1), store result in ST(1), and pop the register stack.",
  "page": 479
 },
 {
  "opcode": "DA /7",
  "opcode_parsed": [
   "DA",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIDIVR m32int",
  "instr_parsed": [
   "FIDIVR",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide m32int by ST(0) and store result in ST(0).",
  "page": 479
 },
 {
  "opcode": "DE /7",
  "opcode_parsed": [
   "DE",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIDIVR m16int",
  "instr_parsed": [
   "FIDIVR",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Divide m16int by ST(0) and store result in ST(0).",
  "page": 479
 },
 {
  "opcode": "DD C0+i",
  "opcode_parsed": [
   "DD",
   "C0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FFREE ST(i)",
  "instr_parsed": [
   "FFREE",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Sets tag for ST(i) to empty.",
  "page": 482
 },
 {
  "opcode": "DE /2",
  "opcode_parsed": [
   "DE",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FICOM m16int",
  "instr_parsed": [
   "FICOM",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m16int.",
  "page": 483
 },
 {
  "opcode": "DA /2",
  "opcode_parsed": [
   "DA",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FICOM m32int",
  "instr_parsed": [
   "FICOM",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m32int.",
  "page": 483
 },
 {
  "opcode": "DE /3",
  "opcode_parsed": [
   "DE",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FICOMP m16int",
  "instr_parsed": [
   "FICOMP",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m16int and pop stack register.",
  "page": 483
 },
 {
  "opcode": "DA /3",
  "opcode_parsed": [
   "DA",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FICOMP m32int",
  "instr_parsed": [
   "FICOMP",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with m32int and pop stack register.",
  "page": 483
 },
 {
  "opcode": "DF /0",
  "opcode_parsed": [
   "DF",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FILD m16int",
  "instr_parsed": [
   "FILD",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push m16int onto the FPU register stack.",
  "page": 485
 },
 {
  "opcode": "DB /0",
  "opcode_parsed": [
   "DB",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FILD m32int",
  "instr_parsed": [
   "FILD",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push m32int onto the FPU register stack.",
  "page": 485
 },
 {
  "opcode": "DF /5",
  "opcode_parsed": [
   "DF",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FILD m64int",
  "instr_parsed": [
   "FILD",
   "m64int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push m64int onto the FPU register stack.",
  "page": 485
 },
 {
  "opcode": "D9 F7",
  "opcode_parsed": [
   "D9",
   "F7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FINCSTP",
  "instr_parsed": [
   "FINCSTP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Increment the TOP field in the FPU status register.",
  "page": 487
 },
 {
  "opcode": "9B DB E3",
  "opcode_parsed": [
   "9B",
   "DB",
   "E3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FINIT *",
  "instr_parsed": [
   "FINIT"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Initialize FPU after checking for pending unmasked floating-point exceptions.",
  "page": 488
 },
 {
  "opcode": "DB E3",
  "opcode_parsed": [
   "DB",
   "E3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "* FNINIT",
  "instr_parsed": [
   "FNINIT"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Initialize FPU without checking for pending unmasked floating-point exceptions.",
  "page": 488
 },
 {
  "opcode": "DF /2",
  "opcode_parsed": [
   "DF",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIST m16int",
  "instr_parsed": [
   "FIST",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store ST(0) in m16int.",
  "page": 490
 },
 {
  "opcode": "DB /2",
  "opcode_parsed": [
   "DB",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIST m32int",
  "instr_parsed": [
   "FIST",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store ST(0) in m32int.",
  "page": 490
 },
 {
  "opcode": "DF /3",
  "opcode_parsed": [
   "DF",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FISTP m16int",
  "instr_parsed": [
   "FISTP",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store ST(0) in m16int and pop register stack.",
  "page": 490
 },
 {
  "opcode": "DB /3",
  "opcode_parsed": [
   "DB",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FISTP m32int",
  "instr_parsed": [
   "FISTP",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store ST(0) in m32int and pop register stack.",
  "page": 490
 },
 {
  "opcode": "DF /7",
  "opcode_parsed": [
   "DF",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FISTP m64int",
  "instr_parsed": [
   "FISTP",
   "m64int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store ST(0) in m64int and pop register stack.",
  "page": 490
 },
 {
  "opcode": "D9 /0",
  "opcode_parsed": [
   "D9",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLD m32fp",
  "instr_parsed": [
   "FLD",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push m32fp onto the FPU register stack.",
  "page": 495
 },
 {
  "opcode": "DD /0",
  "opcode_parsed": [
   "DD",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLD m64fp",
  "instr_parsed": [
   "FLD",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push m64fp onto the FPU register stack.",
  "page": 495
 },
 {
  "opcode": "DB /5",
  "opcode_parsed": [
   "DB",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLD m80fp",
  "instr_parsed": [
   "FLD",
   "m80fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push m80fp onto the FPU register stack.",
  "page": 495
 },
 {
  "opcode": "D9 C0+i",
  "opcode_parsed": [
   "D9",
   "C0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLD ST(i)",
  "instr_parsed": [
   "FLD",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push ST(i) onto the FPU register stack.",
  "page": 495
 },
 {
  "opcode": "D9 E8",
  "opcode_parsed": [
   "D9",
   "E8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLD1",
  "instr_parsed": [
   "FLD1"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push +1.0 onto the FPU register stack.",
  "page": 497
 },
 {
  "opcode": "D9 E9",
  "opcode_parsed": [
   "D9",
   "E9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLDL2T",
  "instr_parsed": [
   "FLDL2T"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push log 2 10 onto the FPU register stack.",
  "page": 497
 },
 {
  "opcode": "D9 EA",
  "opcode_parsed": [
   "D9",
   "EA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "EA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLDL2E",
  "instr_parsed": [
   "FLDL2E"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push log 2 e onto the FPU register stack.",
  "page": 497
 },
 {
  "opcode": "D9 EB",
  "opcode_parsed": [
   "D9",
   "EB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "EB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLDPI",
  "instr_parsed": [
   "FLDPI"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push π onto the FPU register stack.",
  "page": 497
 },
 {
  "opcode": "D9 EC",
  "opcode_parsed": [
   "D9",
   "EC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "EC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLDLG2",
  "instr_parsed": [
   "FLDLG2"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push log 10 2 onto the FPU register stack.",
  "page": 497
 },
 {
  "opcode": "D9 ED",
  "opcode_parsed": [
   "D9",
   "ED"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ED"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLDLN2",
  "instr_parsed": [
   "FLDLN2"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push log e 2 onto the FPU register stack.",
  "page": 497
 },
 {
  "opcode": "D9 EE",
  "opcode_parsed": [
   "D9",
   "EE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "EE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLDZ",
  "instr_parsed": [
   "FLDZ"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push +0.0 onto the FPU register stack.",
  "page": 497
 },
 {
  "opcode": "D9 /5",
  "opcode_parsed": [
   "D9",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FLDCW m2byte",
  "instr_parsed": [
   "FLDCW",
   "m2byte"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load FPU control word from m2byte.",
  "page": 499
 },
 {
  "opcode": "D8 /1",
  "opcode_parsed": [
   "D8",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FMUL m32fp",
  "instr_parsed": [
   "FMUL",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(0) by m32fp and store result in ST(0).",
  "page": 503
 },
 {
  "opcode": "DC /1",
  "opcode_parsed": [
   "DC",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FMUL m64fp",
  "instr_parsed": [
   "FMUL",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(0) by m64fp and store result in ST(0).",
  "page": 503
 },
 {
  "opcode": "D8 C8+i",
  "opcode_parsed": [
   "D8",
   "C8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FMUL ST(0), ST(i)",
  "instr_parsed": [
   "FMUL",
   "ST(0)",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(0) by ST(i)  and store result in ST(0).",
  "page": 503
 },
 {
  "opcode": "DC C8+i",
  "opcode_parsed": [
   "DC",
   "C8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FMUL ST(i), ST(0)",
  "instr_parsed": [
   "FMUL",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(i) by ST(0)  and store result in ST(i).",
  "page": 503
 },
 {
  "opcode": "DE C8+i",
  "opcode_parsed": [
   "DE",
   "C8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FMULP ST(i), ST(0)",
  "instr_parsed": [
   "FMULP",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(i) by ST(0), store result in ST(i), and pop the register stack.",
  "page": 503
 },
 {
  "opcode": "DE C9",
  "opcode_parsed": [
   "DE",
   "C9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FMULP",
  "instr_parsed": [
   "FMULP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(1) by ST(0), store result in ST(1), and pop the register stack.",
  "page": 503
 },
 {
  "opcode": "DA /1",
  "opcode_parsed": [
   "DA",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIMUL m32int",
  "instr_parsed": [
   "FIMUL",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(0) by m32int and store result in ST(0).",
  "page": 503
 },
 {
  "opcode": "DE /1",
  "opcode_parsed": [
   "DE",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FIMUL m16int",
  "instr_parsed": [
   "FIMUL",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply ST(0) by m16int and store result in ST(0).",
  "page": 503
 },
 {
  "opcode": "D9 D0",
  "opcode_parsed": [
   "D9",
   "D0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FNOP",
  "instr_parsed": [
   "FNOP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "No operation is performed.",
  "page": 506
 },
 {
  "opcode": "D9 F3",
  "opcode_parsed": [
   "D9",
   "F3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FPATAN",
  "instr_parsed": [
   "FPATAN"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(1) with arctan(ST(1) / ST(0)) and pop the register stack.",
  "page": 507
 },
 {
  "opcode": "D9 F8",
  "opcode_parsed": [
   "D9",
   "F8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FPREM",
  "instr_parsed": [
   "FPREM"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(0) with the remainder obtained from dividing ST(0) by ST(1).",
  "page": 509
 },
 {
  "opcode": "D9 F5",
  "opcode_parsed": [
   "D9",
   "F5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FPREM1",
  "instr_parsed": [
   "FPREM1"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(0) with the IEEE remainder obtained from dividing ST(0) by ST(1).",
  "page": 511
 },
 {
  "opcode": "D9 F2",
  "opcode_parsed": [
   "D9",
   "F2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FPTAN",
  "instr_parsed": [
   "FPTAN"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(0) with its approximate tangent and push 1 onto the FPU stack.",
  "page": 513
 },
 {
  "opcode": "D9 FC",
  "opcode_parsed": [
   "D9",
   "FC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FRNDINT",
  "instr_parsed": [
   "FRNDINT"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Round ST(0) to an integer.",
  "page": 515
 },
 {
  "opcode": "D9 FD",
  "opcode_parsed": [
   "D9",
   "FD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSCALE",
  "instr_parsed": [
   "FSCALE"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Scale ST(0) by ST(1).",
  "page": 521
 },
 {
  "opcode": "D9 FE",
  "opcode_parsed": [
   "D9",
   "FE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSIN",
  "instr_parsed": [
   "FSIN"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(0) with the approximate of its sine.",
  "page": 523
 },
 {
  "opcode": "D9 FB",
  "opcode_parsed": [
   "D9",
   "FB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSINCOS",
  "instr_parsed": [
   "FSINCOS"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compute the sine and cosine of ST(0); replace ST(0) with the approximate sine, and push the approximate cosine onto the register stack.",
  "page": 525
 },
 {
  "opcode": "D9 FA",
  "opcode_parsed": [
   "D9",
   "FA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSQRT",
  "instr_parsed": [
   "FSQRT"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Computes square root of ST(0) and stores the result in ST(0).",
  "page": 527
 },
 {
  "opcode": "D9 /2",
  "opcode_parsed": [
   "D9",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FST m32fp",
  "instr_parsed": [
   "FST",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Copy ST(0) to m32fp .",
  "page": 529
 },
 {
  "opcode": "DD /2",
  "opcode_parsed": [
   "DD",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FST m64fp",
  "instr_parsed": [
   "FST",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Copy ST(0) to m64fp.",
  "page": 529
 },
 {
  "opcode": "DD D0+i",
  "opcode_parsed": [
   "DD",
   "D0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FST ST(i)",
  "instr_parsed": [
   "FST",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Copy ST(0) to ST(i).",
  "page": 529
 },
 {
  "opcode": "D9 /3",
  "opcode_parsed": [
   "D9",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSTP m32fp",
  "instr_parsed": [
   "FSTP",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Copy ST(0) to m32fp and pop register stack.",
  "page": 529
 },
 {
  "opcode": "DD /3",
  "opcode_parsed": [
   "DD",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSTP m64fp",
  "instr_parsed": [
   "FSTP",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Copy ST(0) to m64fp and pop register stack.",
  "page": 529
 },
 {
  "opcode": "DB /7",
  "opcode_parsed": [
   "DB",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSTP m80fp",
  "instr_parsed": [
   "FSTP",
   "m80fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Copy ST(0) to m80fp and pop register stack.",
  "page": 529
 },
 {
  "opcode": "DD D8+i",
  "opcode_parsed": [
   "DD",
   "D8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSTP ST(i)",
  "instr_parsed": [
   "FSTP",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Copy ST(0) to ST(i) and pop register stack.",
  "page": 529
 },
 {
  "opcode": "9B D9 /7",
  "opcode_parsed": [
   "9B",
   "D9",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSTCW m2byte *",
  "instr_parsed": [
   "FSTCW",
   "m2byte"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store FPU control word to m2byte after checking for pending unmasked floating-point exceptions.",
  "page": 531
 },
 {
  "opcode": "D9 /7",
  "opcode_parsed": [
   "D9",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "* FNSTCW  m2byte",
  "instr_parsed": [
   "FNSTCW",
   "m2byte"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store FPU control word to m2byte without checking for pending unmasked floating-point exceptions.",
  "page": 531
 },
 {
  "opcode": "9B DD /7",
  "opcode_parsed": [
   "9B",
   "DD",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSTSW m2byte",
  "instr_parsed": [
   "FSTSW",
   "m2byte"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store FPU status word at m2byte after checking for pending unmasked floating-point exceptions.",
  "page": 535
 },
 {
  "opcode": "9B DF E0",
  "opcode_parsed": [
   "9B",
   "DF",
   "E0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSTSW AX *",
  "instr_parsed": [
   "FSTSW",
   "AX"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store FPU status word in AX register after checking for pending unmasked floating-point exceptions.",
  "page": 535
 },
 {
  "opcode": "DD /7",
  "opcode_parsed": [
   "DD",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "* FNSTSW  m2byte *",
  "instr_parsed": [
   "FNSTSW",
   "m2byte"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store FPU status word at m2byte without checking for pending unmasked floating-point exceptions.",
  "page": 535
 },
 {
  "opcode": "DF E0",
  "opcode_parsed": [
   "DF",
   "E0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "* FNSTSW AX",
  "instr_parsed": [
   "FNSTSW",
   "AX"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store FPU status word in AX register without checking for pending unmasked floating-point exceptions.",
  "page": 535
 },
 {
  "opcode": "D8 /4",
  "opcode_parsed": [
   "D8",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUB m32fp",
  "instr_parsed": [
   "FSUB",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract m32fp from ST(0) and store result in ST(0).",
  "page": 537
 },
 {
  "opcode": "DC /4",
  "opcode_parsed": [
   "DC",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUB m64fp",
  "instr_parsed": [
   "FSUB",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract m64fp from ST(0) and store result in ST(0).",
  "page": 537
 },
 {
  "opcode": "D8 E0+i",
  "opcode_parsed": [
   "D8",
   "E0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUB ST(0), ST(i)",
  "instr_parsed": [
   "FSUB",
   "ST(0)",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(i) from ST(0) and store result in ST(0).",
  "page": 537
 },
 {
  "opcode": "DC E8+i",
  "opcode_parsed": [
   "DC",
   "E8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUB ST(i), ST(0)",
  "instr_parsed": [
   "FSUB",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from ST(i) and store result in ST(i).",
  "page": 537
 },
 {
  "opcode": "DE E8+i",
  "opcode_parsed": [
   "DE",
   "E8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBP ST(i), ST(0)",
  "instr_parsed": [
   "FSUBP",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from ST(i), store result in ST(i), and pop register stack.",
  "page": 537
 },
 {
  "opcode": "DE E9",
  "opcode_parsed": [
   "DE",
   "E9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBP",
  "instr_parsed": [
   "FSUBP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from ST(1), store result in ST(1), and pop register stack.",
  "page": 537
 },
 {
  "opcode": "DA /4",
  "opcode_parsed": [
   "DA",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FISUB m32int",
  "instr_parsed": [
   "FISUB",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract m32int from ST(0) and store result in ST(0).",
  "page": 537
 },
 {
  "opcode": "DE /4",
  "opcode_parsed": [
   "DE",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FISUB m16int",
  "instr_parsed": [
   "FISUB",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract m16int from ST(0) and store result in ST(0).",
  "page": 537
 },
 {
  "opcode": "D8 /5",
  "opcode_parsed": [
   "D8",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBR m32fp",
  "instr_parsed": [
   "FSUBR",
   "m32fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from m32fp and store result in ST(0).",
  "page": 540
 },
 {
  "opcode": "DC /5",
  "opcode_parsed": [
   "DC",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBR m64fp",
  "instr_parsed": [
   "FSUBR",
   "m64fp"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from m64fp and store result in ST(0).",
  "page": 540
 },
 {
  "opcode": "D8 E8+i",
  "opcode_parsed": [
   "D8",
   "E8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBR ST(0), ST(i)",
  "instr_parsed": [
   "FSUBR",
   "ST(0)",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from ST(i) and store result in ST(0).",
  "page": 540
 },
 {
  "opcode": "DC E0+i",
  "opcode_parsed": [
   "DC",
   "E0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBR ST(i), ST(0)",
  "instr_parsed": [
   "FSUBR",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(i) from ST(0)  and store result in ST(i).",
  "page": 540
 },
 {
  "opcode": "DE E0+i",
  "opcode_parsed": [
   "DE",
   "E0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBRP ST(i), ST(0)",
  "instr_parsed": [
   "FSUBRP",
   "ST(i)",
   "ST(0)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(i) from ST(0), store result in ST(i), and pop register stack.",
  "page": 540
 },
 {
  "opcode": "DE E1",
  "opcode_parsed": [
   "DE",
   "E1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FSUBRP",
  "instr_parsed": [
   "FSUBRP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(1) from ST(0), store result in ST(1), and pop register stack.",
  "page": 540
 },
 {
  "opcode": "DA /5",
  "opcode_parsed": [
   "DA",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FISUBR m32int",
  "instr_parsed": [
   "FISUBR",
   "m32int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from m32int and store result in ST(0).",
  "page": 540
 },
 {
  "opcode": "DE /5",
  "opcode_parsed": [
   "DE",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FISUBR m16int",
  "instr_parsed": [
   "FISUBR",
   "m16int"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract ST(0) from m16int and store result in ST(0).",
  "page": 540
 },
 {
  "opcode": "D9 E4",
  "opcode_parsed": [
   "D9",
   "E4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FTST",
  "instr_parsed": [
   "FTST"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with 0.0.",
  "page": 543
 },
 {
  "opcode": "DD E0+i",
  "opcode_parsed": [
   "DD",
   "E0",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E0",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FUCOM ST(i)",
  "instr_parsed": [
   "FUCOM",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i).",
  "page": 545
 },
 {
  "opcode": "DD E1",
  "opcode_parsed": [
   "DD",
   "E1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FUCOM",
  "instr_parsed": [
   "FUCOM"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(1).",
  "page": 545
 },
 {
  "opcode": "DD E8+i",
  "opcode_parsed": [
   "DD",
   "E8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FUCOMP ST(i)",
  "instr_parsed": [
   "FUCOMP",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(i) and pop register stack.",
  "page": 545
 },
 {
  "opcode": "DD E9",
  "opcode_parsed": [
   "DD",
   "E9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FUCOMP",
  "instr_parsed": [
   "FUCOMP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(1) and pop register stack.",
  "page": 545
 },
 {
  "opcode": "DA E9",
  "opcode_parsed": [
   "DA",
   "E9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "DA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FUCOMPP",
  "instr_parsed": [
   "FUCOMPP"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare ST(0) with ST(1) and pop register stack twice.",
  "page": 545
 },
 {
  "opcode": "D9 E5",
  "opcode_parsed": [
   "D9",
   "E5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FXAM",
  "instr_parsed": [
   "FXAM"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Classify value or number in ST(0).",
  "page": 548
 },
 {
  "opcode": "D9 C8+i",
  "opcode_parsed": [
   "D9",
   "C8",
   "+i"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C8",
     "+i"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FXCH ST(i)",
  "instr_parsed": [
   "FXCH",
   "ST(i)"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange the contents of ST(0) and ST(i).",
  "page": 550
 },
 {
  "opcode": "D9 C9",
  "opcode_parsed": [
   "D9",
   "C9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FXCH",
  "instr_parsed": [
   "FXCH"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange the contents of ST(0) and ST(1).",
  "page": 550
 },
 {
  "opcode": "D9 F1",
  "opcode_parsed": [
   "D9",
   "F1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FYL2X",
  "instr_parsed": [
   "FYL2X"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(1) with (ST(1) ∗ log ST(0)) and pop the 2 register stack.",
  "page": 565
 },
 {
  "opcode": "D9 F9",
  "opcode_parsed": [
   "D9",
   "F9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FYL2XP1",
  "instr_parsed": [
   "FYL2XP1"
  ],
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Replace ST(1) with ST(1) ∗ log (ST(0) + 1.0) and pop the 2 register stack.",
  "page": 567
 },
 {
  "opcode": "66 0F3A CF /r /ib",
  "opcode_parsed": [
   "66",
   "0F",
   "3A",
   "CF",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "3A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8",
  "instr_parsed": [
   "GF2P8AFFINEINVQB",
   "xmm1",
   "xmm2/m128",
   "imm8"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "GFNI",
  "description": "Computes inverse affine transformation in the finite field GF(2^8).",
  "page": 569
 },
 {
  "opcode": "VEX.128.66.0F3A.W1 CF /r /ib",
  "opcode_parsed": [
   "VEX.128.66.0F3A.W1",
   "CF",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F3A.W1"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEINVQB",
   "xmm1",
   "xmm2",
   "xmm3/m128",
   "imm8"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Computes inverse affine transformation in the finite field GF(2^8).",
  "page": 569
 },
 {
  "opcode": "VEX.256.66.0F3A.W1 CF /r /ib",
  "opcode_parsed": [
   "VEX.256.66.0F3A.W1",
   "CF",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.66.0F3A.W1"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEINVQB",
   "ymm1",
   "ymm2",
   "ymm3/m256",
   "imm8"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Computes inverse affine transformation in the finite field GF(2^8).",
  "page": 569
 },
 {
  "opcode": "EVEX.128.66.0F3A.W1 CF /r /ib",
  "opcode_parsed": [
   "EVEX.128.66.0F3A.W1",
   "CF",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F3A.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEINVQB xmm1{k1}{z}, xmm2, xmm3/m128/m64bcst, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEINVQB",
   "xmm1{k1}{z}",
   "xmm2",
   "xmm3/m128/m64bcst",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Computes inverse affine transformation in the finite field GF(2^8).",
  "page": 569
 },
 {
  "opcode": "EVEX.256.66.0F3A.W1 CF /r /ib",
  "opcode_parsed": [
   "EVEX.256.66.0F3A.W1",
   "CF",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.256.66.0F3A.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEINVQB ymm1{k1}{z}, ymm2, ymm3/m256/m64bcst, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEINVQB",
   "ymm1{k1}{z}",
   "ymm2",
   "ymm3/m256/m64bcst",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Computes inverse affine transformation in the finite field GF(2^8).",
  "page": 569
 },
 {
  "opcode": "EVEX.512.66.0F3A.W1 CF /r /ib",
  "opcode_parsed": [
   "EVEX.512.66.0F3A.W1",
   "CF",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.512.66.0F3A.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEINVQB zmm1{k1}{z}, zmm2, zmm3/m512/m64bcst, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEINVQB",
   "zmm1{k1}{z}",
   "zmm2",
   "zmm3/m512/m64bcst",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Computes inverse affine transformation in the finite field GF(2^8).",
  "page": 569
 },
 {
  "opcode": "66 0F3A CE /r /ib",
  "opcode_parsed": [
   "66",
   "0F",
   "3A",
   "CE",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "3A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "CE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "GF2P8AFFINEQB xmm1, xmm2/m128, imm8",
  "instr_parsed": [
   "GF2P8AFFINEQB",
   "xmm1",
   "xmm2/m128",
   "imm8"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "GFNI",
  "description": "Computes affine transformation in the finite field GF(2^8).",
  "page": 572
 },
 {
  "opcode": "VEX.128.66.0F3A.W1 CE /r /ib",
  "opcode_parsed": [
   "VEX.128.66.0F3A.W1",
   "CE",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F3A.W1"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "CE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEQB",
   "xmm1",
   "xmm2",
   "xmm3/m128",
   "imm8"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Computes affine transformation in the finite field GF(2^8).",
  "page": 572
 },
 {
  "opcode": "VEX.256.66.0F3A.W1 CE /r /ib",
  "opcode_parsed": [
   "VEX.256.66.0F3A.W1",
   "CE",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.66.0F3A.W1"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "CE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEQB",
   "ymm1",
   "ymm2",
   "ymm3/m256",
   "imm8"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Computes affine transformation in the finite field GF(2^8).",
  "page": 572
 },
 {
  "opcode": "EVEX.128.66.0F3A.W1 CE /r /ib",
  "opcode_parsed": [
   "EVEX.128.66.0F3A.W1",
   "CE",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F3A.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEQB xmm1{k1}{z}, xmm2, xmm3/m128/m64bcst, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEQB",
   "xmm1{k1}{z}",
   "xmm2",
   "xmm3/m128/m64bcst",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Computes affine transformation in the finite field GF(2^8).",
  "page": 572
 },
 {
  "opcode": "EVEX.256.66.0F3A.W1 CE /r /ib",
  "opcode_parsed": [
   "EVEX.256.66.0F3A.W1",
   "CE",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.256.66.0F3A.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEQB ymm1{k1}{z}, ymm2, ymm3/m256/m64bcst, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEQB",
   "ymm1{k1}{z}",
   "ymm2",
   "ymm3/m256/m64bcst",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Computes affine transformation in the finite field GF(2^8).",
  "page": 572
 },
 {
  "opcode": "EVEX.512.66.0F3A.W1 CE /r /ib",
  "opcode_parsed": [
   "EVEX.512.66.0F3A.W1",
   "CE",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.512.66.0F3A.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8AFFINEQB zmm1{k1}{z}, zmm2, zmm3/m512/m64bcst, imm8",
  "instr_parsed": [
   "VGF2P8AFFINEQB",
   "zmm1{k1}{z}",
   "zmm2",
   "zmm3/m512/m64bcst",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Computes affine transformation in the finite field GF(2^8).",
  "page": 572
 },
 {
  "opcode": "66 0F38 CF /r",
  "opcode_parsed": [
   "66",
   "0F",
   "38",
   "CF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "GF2P8MULB xmm1, xmm2/m128",
  "instr_parsed": [
   "GF2P8MULB",
   "xmm1",
   "xmm2/m128"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "GFNI",
  "description": "Multiplies elements in the finite field GF(2^8).",
  "page": 574
 },
 {
  "opcode": "VEX.128.66.0F38.W0 CF /r",
  "opcode_parsed": [
   "VEX.128.66.0F38.W0",
   "CF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F38.W0"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8MULB xmm1, xmm2, xmm3/m128",
  "instr_parsed": [
   "VGF2P8MULB",
   "xmm1",
   "xmm2",
   "xmm3/m128"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Multiplies elements in the finite field GF(2^8).",
  "page": 574
 },
 {
  "opcode": "VEX.256.66.0F38.W0 CF /r",
  "opcode_parsed": [
   "VEX.256.66.0F38.W0",
   "CF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.66.0F38.W0"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8MULB ymm1, ymm2, ymm3/m256",
  "instr_parsed": [
   "VGF2P8MULB",
   "ymm1",
   "ymm2",
   "ymm3/m256"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Multiplies elements in the finite field GF(2^8).",
  "page": 574
 },
 {
  "opcode": "EVEX.128.66.0F38.W0 CF /r",
  "opcode_parsed": [
   "EVEX.128.66.0F38.W0",
   "CF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8MULB xmm1{k1}{z}, xmm2, xmm3/m128",
  "instr_parsed": [
   "VGF2P8MULB",
   "xmm1{k1}{z}",
   "xmm2",
   "xmm3/m128"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Multiplies elements in the finite field GF(2^8).",
  "page": 574
 },
 {
  "opcode": "EVEX.256.66.0F38.W0 CF /r",
  "opcode_parsed": [
   "EVEX.256.66.0F38.W0",
   "CF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.256.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8MULB ymm1{k1}{z}, ymm2, ymm3/m256",
  "instr_parsed": [
   "VGF2P8MULB",
   "ymm1{k1}{z}",
   "ymm2",
   "ymm3/m256"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Multiplies elements in the finite field GF(2^8).",
  "page": 574
 },
 {
  "opcode": "EVEX.512.66.0F38.W0 CF /r",
  "opcode_parsed": [
   "EVEX.512.66.0F38.W0",
   "CF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.512.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VGF2P8MULB zmm1{k1}{z}, zmm2, zmm3/m512",
  "instr_parsed": [
   "VGF2P8MULB",
   "zmm1{k1}{z}",
   "zmm2",
   "zmm3/m512"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Multiplies elements in the finite field GF(2^8).",
  "page": 574
 },
 {
  "opcode": "F4",
  "opcode_parsed": [
   "F4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "HLT",
  "instr_parsed": [
   "HLT"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Halt",
  "page": 582
 },
 {
  "opcode": "F6 /7",
  "opcode_parsed": [
   "F6",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IDIV r/m8",
  "instr_parsed": [
   "IDIV",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide AX by r/m 8, with result stored in: AL  := Quotient, AH  := Remainder.",
  "page": 591
 },
 {
  "opcode": "REX + F6 /7",
  "opcode_parsed": [
   "REX",
   "F6",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IDIV r/m8*",
  "instr_parsed": [
   "IDIV",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide AX by r/m 8, with result stored in AL  := Quotient, AH  := Remainder.",
  "page": 591
 },
 {
  "opcode": "F7 /7",
  "opcode_parsed": [
   "F7",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IDIV r/m16",
  "instr_parsed": [
   "IDIV",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide DX:AX by r/m16 , with result stored in AX  := Quotient, DX  := Remainder.",
  "page": 591
 },
 {
  "opcode": "F7 /7",
  "opcode_parsed": [
   "F7",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IDIV r/m32",
  "instr_parsed": [
   "IDIV",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide EDX:EAX by r/m32 , with result stored in EAX  := Quotient, EDX  := Remainder.",
  "page": 591
 },
 {
  "opcode": "REX.W + F7 /7",
  "opcode_parsed": [
   "REX.W",
   "F7",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IDIV r/m64",
  "instr_parsed": [
   "IDIV",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide RDX:RAX by r/m64 , with result stored in RAX  := Quotient, RDX  := Remainder.",
  "page": 591
 },
 {
  "opcode": "F6 /5",
  "opcode_parsed": [
   "F6",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r/m8*",
  "instr_parsed": [
   "IMUL",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AX:=  AL ∗  r/m byte.",
  "page": 594
 },
 {
  "opcode": "F7 /5",
  "opcode_parsed": [
   "F7",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r/m16",
  "instr_parsed": [
   "IMUL",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "DX:AX := AX ∗  r/m word.",
  "page": 594
 },
 {
  "opcode": "F7 /5",
  "opcode_parsed": [
   "F7",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r/m32",
  "instr_parsed": [
   "IMUL",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "EDX:EAX := EAX ∗  r/m 32.",
  "page": 594
 },
 {
  "opcode": "REX.W + F7 /5",
  "opcode_parsed": [
   "REX.W",
   "F7",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r/m64",
  "instr_parsed": [
   "IMUL",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "RDX:RAX := RAX ∗  r/m 64.",
  "page": 594
 },
 {
  "opcode": "0F AF / r",
  "opcode_parsed": [
   "0F",
   "AF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r16, r/m16",
  "instr_parsed": [
   "IMUL",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "word register := word register ∗  r/m 16.",
  "page": 594
 },
 {
  "opcode": "0F AF / r",
  "opcode_parsed": [
   "0F",
   "AF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r32, r/m32",
  "instr_parsed": [
   "IMUL",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "doubleword register := doubleword register ∗  r/m32.",
  "page": 594
 },
 {
  "opcode": "REX.W + 0F AF / r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "AF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r64, r/m64",
  "instr_parsed": [
   "IMUL",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Quadword register := Quadword register ∗  r/m64 .",
  "page": 594
 },
 {
  "opcode": "6B / r ib",
  "opcode_parsed": [
   "6B",
   "/r",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r16, r/m16, imm8",
  "instr_parsed": [
   "IMUL",
   "r16",
   "r/m16",
   "imm8"
  ],
  "op_en": "RMI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "word register := r/m16  ∗ sign-extended immediate byte.",
  "page": 594
 },
 {
  "opcode": "6B / r ib",
  "opcode_parsed": [
   "6B",
   "/r",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r32, r/m32, imm8",
  "instr_parsed": [
   "IMUL",
   "r32",
   "r/m32",
   "imm8"
  ],
  "op_en": "RMI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "doubleword register := r/m32  ∗ signextended immediate byte.",
  "page": 594
 },
 {
  "opcode": "REX.W + 6B / r ib",
  "opcode_parsed": [
   "REX.W",
   "6B",
   "/r",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IMUL r64, r/m64, imm8",
  "instr_parsed": [
   "IMUL",
   "r64",
   "r/m64",
   "imm8"
  ],
  "op_en": "RMI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Quadword register := r/m64  ∗ sign-extended immediate byte.",
  "page": 594
 },
 {
  "opcode": "69 / r iw",
  "opcode_parsed": [
   "69",
   "/r",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "69"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "IMUL r16, r/m16, imm16",
  "instr_parsed": [
   "IMUL",
   "r16",
   "r/m16",
   "imm16"
  ],
  "op_en": "RMI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "word register := r/m16  ∗ immediate word.",
  "page": 594
 },
 {
  "opcode": "69 / r id",
  "opcode_parsed": [
   "69",
   "/r",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "69"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "IMUL r32, r/m32, imm32",
  "instr_parsed": [
   "IMUL",
   "r32",
   "r/m32",
   "imm32"
  ],
  "op_en": "RMI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "doubleword register := r/m32  ∗ immediate doubleword.",
  "page": 594
 },
 {
  "opcode": "REX.W + 69 / r id",
  "opcode_parsed": [
   "REX.W",
   "69",
   "/r",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "69"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "IMUL r64, r/m64, imm32",
  "instr_parsed": [
   "IMUL",
   "r64",
   "r/m64",
   "imm32"
  ],
  "op_en": "RMI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Quadword register := r/m64  ∗ immediate doubleword.",
  "page": 594
 },
 {
  "opcode": "E4 ib",
  "opcode_parsed": [
   "E4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IN AL, i mm8",
  "instr_parsed": [
   "IN",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input byte from imm8 I/O port address into AL.",
  "page": 598
 },
 {
  "opcode": "E5 ib",
  "opcode_parsed": [
   "E5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IN AX, i mm8",
  "instr_parsed": [
   "IN",
   "AX",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input word from imm8 I/O port address into AX.",
  "page": 598
 },
 {
  "opcode": "E5 ib",
  "opcode_parsed": [
   "E5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IN EAX, i mm8",
  "instr_parsed": [
   "IN",
   "EAX",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input dword from imm8 I/O port address into EAX.",
  "page": 598
 },
 {
  "opcode": "EC",
  "opcode_parsed": [
   "EC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IN AL,DX",
  "instr_parsed": [
   "IN",
   "AL",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input byte from I/O port in DX into AL.",
  "page": 598
 },
 {
  "opcode": "ED",
  "opcode_parsed": [
   "ED"
  ],
  "opcode_bytes": [
   {
    "components": [
     "ED"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IN AX,DX",
  "instr_parsed": [
   "IN",
   "AX",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input word from I/O port in DX into AX.",
  "page": 598
 },
 {
  "opcode": "ED",
  "opcode_parsed": [
   "ED"
  ],
  "opcode_bytes": [
   {
    "components": [
     "ED"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IN EAX,DX",
  "instr_parsed": [
   "IN",
   "EAX",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input doubleword from I/O port in DX into EAX.",
  "page": 598
 },
 {
  "opcode": "FE /0",
  "opcode_parsed": [
   "FE",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INC r/m8",
  "instr_parsed": [
   "INC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Increment r/m byte by 1.",
  "page": 600
 },
 {
  "opcode": "REX + FE /0",
  "opcode_parsed": [
   "REX",
   "FE",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INC r/m8 *",
  "instr_parsed": [
   "INC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Increment r/m byte by 1.",
  "page": 600
 },
 {
  "opcode": "FF /0",
  "opcode_parsed": [
   "FF",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INC r/m16",
  "instr_parsed": [
   "INC",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Increment r/m word by 1.",
  "page": 600
 },
 {
  "opcode": "FF /0",
  "opcode_parsed": [
   "FF",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INC r/m32",
  "instr_parsed": [
   "INC",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Increment r/m doubleword by 1.",
  "page": 600
 },
 {
  "opcode": "REX.W + FF /0",
  "opcode_parsed": [
   "REX.W",
   "FF",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INC r/m64",
  "instr_parsed": [
   "INC",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Increment r/m quadword by 1.",
  "page": 600
 },
 {
  "opcode": "40+ rw **",
  "opcode_parsed": [
   "40",
   "+rw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "40",
     "+rw"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INC r16",
  "instr_parsed": [
   "INC",
   "r16"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Increment word register by 1.",
  "page": 600
 },
 {
  "opcode": "40+ rd",
  "opcode_parsed": [
   "40",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "40",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INC r32",
  "instr_parsed": [
   "INC",
   "r32"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Increment doubleword register by 1.",
  "page": 600
 },
 {
  "opcode": "6C",
  "opcode_parsed": [
   "6C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INS m8 , DX",
  "instr_parsed": [
   "INS",
   "m8",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*",
  "page": 604
 },
 {
  "opcode": "6D",
  "opcode_parsed": [
   "6D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INS m16 , DX",
  "instr_parsed": [
   "INS",
   "m16",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI. 1",
  "page": 604
 },
 {
  "opcode": "6D",
  "opcode_parsed": [
   "6D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INS m32 , DX",
  "instr_parsed": [
   "INS",
   "m32",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI. 1",
  "page": 604
 },
 {
  "opcode": "6C",
  "opcode_parsed": [
   "6C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INSB",
  "instr_parsed": [
   "INSB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI. 1",
  "page": 604
 },
 {
  "opcode": "6D",
  "opcode_parsed": [
   "6D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INSW",
  "instr_parsed": [
   "INSW"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI. 1",
  "page": 604
 },
 {
  "opcode": "6D",
  "opcode_parsed": [
   "6D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INSD",
  "instr_parsed": [
   "INSD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI. 1",
  "page": 604
 },
 {
  "opcode": "CC",
  "opcode_parsed": [
   "CC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "CC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INT3",
  "instr_parsed": [
   "INT3"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Generate breakpoint trap.",
  "page": 610
 },
 {
  "opcode": "CD ib",
  "opcode_parsed": [
   "CD",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "CD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INT imm8",
  "instr_parsed": [
   "INT",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Generate software interrupt with vector specified by immediate byte.",
  "page": 610
 },
 {
  "opcode": "CE",
  "opcode_parsed": [
   "CE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "CE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INTO",
  "instr_parsed": [
   "INTO"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Generate overflow trap if overflow flag is 1.",
  "page": 610
 },
 {
  "opcode": "F1",
  "opcode_parsed": [
   "F1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INT1",
  "instr_parsed": [
   "INT1"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Generate debug trap.",
  "page": 610
 },
 {
  "opcode": "0F 08",
  "opcode_parsed": [
   "0F",
   "08"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "08"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INVD",
  "instr_parsed": [
   "INVD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Flush internal caches; initiate flushing of external caches.",
  "page": 625
 },
 {
  "opcode": "0F 01/7",
  "opcode_parsed": [
   "0F",
   "01",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "INVLPG m",
  "instr_parsed": [
   "INVLPG",
   "m"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Invalidate TLB entries for page containing m.",
  "page": 627
 },
 {
  "opcode": "CF",
  "opcode_parsed": [
   "CF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IRET",
  "instr_parsed": [
   "IRET"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Interrupt return (16-bit operand size).",
  "page": 632
 },
 {
  "opcode": "CF",
  "opcode_parsed": [
   "CF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IRETD",
  "instr_parsed": [
   "IRETD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Interrupt return (32-bit operand size).",
  "page": 632
 },
 {
  "opcode": "REX.W + CF",
  "opcode_parsed": [
   "REX.W",
   "CF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "CF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "IRETQ",
  "instr_parsed": [
   "IRETQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Interrupt return (64-bit operand size).",
  "page": 632
 },
 {
  "opcode": "77 cb",
  "opcode_parsed": [
   "77",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "77"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JA rel8",
  "instr_parsed": [
   "JA",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if above (CF=0 and ZF=0).",
  "page": 641
 },
 {
  "opcode": "73 cb",
  "opcode_parsed": [
   "73",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "73"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JAE rel8",
  "instr_parsed": [
   "JAE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if above or equal (CF=0).",
  "page": 641
 },
 {
  "opcode": "72 cb",
  "opcode_parsed": [
   "72",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "72"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JB rel8",
  "instr_parsed": [
   "JB",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if below (CF=1).",
  "page": 641
 },
 {
  "opcode": "76 cb",
  "opcode_parsed": [
   "76",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "76"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JBE rel8",
  "instr_parsed": [
   "JBE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if below or equal (CF=1 or ZF=1).",
  "page": 641
 },
 {
  "opcode": "72 cb",
  "opcode_parsed": [
   "72",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "72"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JC rel8",
  "instr_parsed": [
   "JC",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if carry (CF=1).",
  "page": 641
 },
 {
  "opcode": "E3 cb",
  "opcode_parsed": [
   "E3",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JCXZ rel8",
  "instr_parsed": [
   "JCXZ",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump  short  if CX register is 0.",
  "page": 641
 },
 {
  "opcode": "E3 cb",
  "opcode_parsed": [
   "E3",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JECXZ rel8",
  "instr_parsed": [
   "JECXZ",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if ECX register is 0.",
  "page": 641
 },
 {
  "opcode": "E3 cb",
  "opcode_parsed": [
   "E3",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JRCXZ rel8",
  "instr_parsed": [
   "JRCXZ",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Jump short if RCX register is 0.",
  "page": 641
 },
 {
  "opcode": "74 cb",
  "opcode_parsed": [
   "74",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "74"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JE rel8",
  "instr_parsed": [
   "JE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if equal (ZF=1).",
  "page": 641
 },
 {
  "opcode": "7F cb",
  "opcode_parsed": [
   "7F",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JG rel8",
  "instr_parsed": [
   "JG",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if greater (ZF=0 and SF=OF).",
  "page": 641
 },
 {
  "opcode": "7D cb",
  "opcode_parsed": [
   "7D",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JGE rel8",
  "instr_parsed": [
   "JGE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if greater or equal (SF=OF).",
  "page": 641
 },
 {
  "opcode": "7C cb",
  "opcode_parsed": [
   "7C",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JL rel8",
  "instr_parsed": [
   "JL",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if less (SF ≠ OF).",
  "page": 641
 },
 {
  "opcode": "7E cb",
  "opcode_parsed": [
   "7E",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JLE rel8",
  "instr_parsed": [
   "JLE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if less or equal (ZF=1 or SF ≠ OF).",
  "page": 641
 },
 {
  "opcode": "76 cb",
  "opcode_parsed": [
   "76",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "76"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNA rel8",
  "instr_parsed": [
   "JNA",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not above (CF=1 or ZF=1).",
  "page": 641
 },
 {
  "opcode": "72 cb",
  "opcode_parsed": [
   "72",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "72"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNAE rel8",
  "instr_parsed": [
   "JNAE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not above or equal (CF=1).",
  "page": 641
 },
 {
  "opcode": "73 cb",
  "opcode_parsed": [
   "73",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "73"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNB rel8",
  "instr_parsed": [
   "JNB",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not below (CF=0).",
  "page": 641
 },
 {
  "opcode": "77 cb",
  "opcode_parsed": [
   "77",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "77"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNBE rel8",
  "instr_parsed": [
   "JNBE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not below or equal (CF=0 and ZF=0).",
  "page": 641
 },
 {
  "opcode": "73 cb",
  "opcode_parsed": [
   "73",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "73"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNC rel8",
  "instr_parsed": [
   "JNC",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not carry (CF=0).",
  "page": 641
 },
 {
  "opcode": "75 cb",
  "opcode_parsed": [
   "75",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "75"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNE rel8",
  "instr_parsed": [
   "JNE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not equal (ZF=0).",
  "page": 641
 },
 {
  "opcode": "7E cb",
  "opcode_parsed": [
   "7E",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNG rel8",
  "instr_parsed": [
   "JNG",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not greater (ZF=1 or SF ≠ OF).",
  "page": 641
 },
 {
  "opcode": "7C cb",
  "opcode_parsed": [
   "7C",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNGE rel8",
  "instr_parsed": [
   "JNGE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not greater or equal (SF ≠ OF).",
  "page": 641
 },
 {
  "opcode": "7D cb",
  "opcode_parsed": [
   "7D",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNL rel8",
  "instr_parsed": [
   "JNL",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not less (SF=OF).",
  "page": 641
 },
 {
  "opcode": "7F cb",
  "opcode_parsed": [
   "7F",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNLE rel8",
  "instr_parsed": [
   "JNLE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not less or equal (ZF=0 and SF=OF).",
  "page": 641
 },
 {
  "opcode": "71 cb",
  "opcode_parsed": [
   "71",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "71"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNO rel8",
  "instr_parsed": [
   "JNO",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not overflow (OF=0).",
  "page": 641
 },
 {
  "opcode": "7B cb",
  "opcode_parsed": [
   "7B",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNP rel8",
  "instr_parsed": [
   "JNP",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not parity (PF=0).",
  "page": 641
 },
 {
  "opcode": "79 cb",
  "opcode_parsed": [
   "79",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "79"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNS rel8",
  "instr_parsed": [
   "JNS",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not sign (SF=0).",
  "page": 641
 },
 {
  "opcode": "75 cb",
  "opcode_parsed": [
   "75",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "75"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JNZ rel8",
  "instr_parsed": [
   "JNZ",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if not zero (ZF=0).",
  "page": 641
 },
 {
  "opcode": "70 cb",
  "opcode_parsed": [
   "70",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "70"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JO rel8",
  "instr_parsed": [
   "JO",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if overflow (OF=1).",
  "page": 641
 },
 {
  "opcode": "7A cb",
  "opcode_parsed": [
   "7A",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JP rel8",
  "instr_parsed": [
   "JP",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if parity (PF=1).",
  "page": 641
 },
 {
  "opcode": "7A cb",
  "opcode_parsed": [
   "7A",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JPE rel8",
  "instr_parsed": [
   "JPE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if parity even (PF=1).",
  "page": 641
 },
 {
  "opcode": "7B cb",
  "opcode_parsed": [
   "7B",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "7B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JPO rel8",
  "instr_parsed": [
   "JPO",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if parity odd (PF=0).",
  "page": 641
 },
 {
  "opcode": "78 cb",
  "opcode_parsed": [
   "78",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "78"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JS rel8",
  "instr_parsed": [
   "JS",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if sign (SF=1).",
  "page": 641
 },
 {
  "opcode": "74 cb",
  "opcode_parsed": [
   "74",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "74"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JZ rel8",
  "instr_parsed": [
   "JZ",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short if zero (ZF = 1).",
  "page": 641
 },
 {
  "opcode": "0F 87 cw",
  "opcode_parsed": [
   "0F",
   "87",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JA rel16",
  "instr_parsed": [
   "JA",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode.",
  "page": 641
 },
 {
  "opcode": "0F 87 cd",
  "opcode_parsed": [
   "0F",
   "87",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JA rel32",
  "instr_parsed": [
   "JA",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if above (CF=0 and ZF=0).",
  "page": 641
 },
 {
  "opcode": "0F 83 cw",
  "opcode_parsed": [
   "0F",
   "83",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JAE rel16",
  "instr_parsed": [
   "JAE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if above or equal (CF=0). Not supported in 64-bit mode.",
  "page": 641
 },
 {
  "opcode": "0F 83 cd",
  "opcode_parsed": [
   "0F",
   "83",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JAE rel32",
  "instr_parsed": [
   "JAE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if above or equal (CF=0).",
  "page": 642
 },
 {
  "opcode": "0F 82 cw",
  "opcode_parsed": [
   "0F",
   "82",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "82"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JB rel16",
  "instr_parsed": [
   "JB",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if below (CF=1). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 82 cd",
  "opcode_parsed": [
   "0F",
   "82",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "82"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JB rel32",
  "instr_parsed": [
   "JB",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if below (CF=1).",
  "page": 642
 },
 {
  "opcode": "0F 86 cw",
  "opcode_parsed": [
   "0F",
   "86",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JBE rel16",
  "instr_parsed": [
   "JBE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if below or equal (CF=1 or ZF=1). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 86 cd",
  "opcode_parsed": [
   "0F",
   "86",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JBE rel32",
  "instr_parsed": [
   "JBE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if below or equal (CF=1 or ZF=1).",
  "page": 642
 },
 {
  "opcode": "0F 82 cw",
  "opcode_parsed": [
   "0F",
   "82",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "82"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JC rel16",
  "instr_parsed": [
   "JC",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if carry (CF=1). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 82 cd",
  "opcode_parsed": [
   "0F",
   "82",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "82"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JC rel32",
  "instr_parsed": [
   "JC",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if carry (CF=1).",
  "page": 642
 },
 {
  "opcode": "0F 84 cw",
  "opcode_parsed": [
   "0F",
   "84",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JE rel16",
  "instr_parsed": [
   "JE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if equal (ZF=1). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 84 cd",
  "opcode_parsed": [
   "0F",
   "84",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JE rel32",
  "instr_parsed": [
   "JE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if equal (ZF=1).",
  "page": 642
 },
 {
  "opcode": "0F 84 cw",
  "opcode_parsed": [
   "0F",
   "84",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JZ rel16",
  "instr_parsed": [
   "JZ",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if 0 (ZF=1). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 84 cd",
  "opcode_parsed": [
   "0F",
   "84",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JZ rel32",
  "instr_parsed": [
   "JZ",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if 0 (ZF=1).",
  "page": 642
 },
 {
  "opcode": "0F 8F cw",
  "opcode_parsed": [
   "0F",
   "8F",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JG rel16",
  "instr_parsed": [
   "JG",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if greater (ZF=0 and SF=OF). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 8F cd",
  "opcode_parsed": [
   "0F",
   "8F",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JG rel32",
  "instr_parsed": [
   "JG",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if greater (ZF=0 and SF=OF).",
  "page": 642
 },
 {
  "opcode": "0F 8D cw",
  "opcode_parsed": [
   "0F",
   "8D",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JGE rel16",
  "instr_parsed": [
   "JGE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if greater or equal (SF=OF). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 8D cd",
  "opcode_parsed": [
   "0F",
   "8D",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JGE rel32",
  "instr_parsed": [
   "JGE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if greater or equal (SF=OF).",
  "page": 642
 },
 {
  "opcode": "0F 8C cw",
  "opcode_parsed": [
   "0F",
   "8C",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JL rel16",
  "instr_parsed": [
   "JL",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if less (SF ≠ OF). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 8C cd",
  "opcode_parsed": [
   "0F",
   "8C",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JL rel32",
  "instr_parsed": [
   "JL",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if less (SF ≠ OF).",
  "page": 642
 },
 {
  "opcode": "0F 8E cw",
  "opcode_parsed": [
   "0F",
   "8E",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JLE rel16",
  "instr_parsed": [
   "JLE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if less or equal (ZF=1 or SF ≠ OF). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 8E cd",
  "opcode_parsed": [
   "0F",
   "8E",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JLE rel32",
  "instr_parsed": [
   "JLE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if less or equal (ZF=1 or SF ≠ OF).",
  "page": 642
 },
 {
  "opcode": "0F 86 cw",
  "opcode_parsed": [
   "0F",
   "86",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNA rel16",
  "instr_parsed": [
   "JNA",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not above (CF=1 or ZF=1). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 86 cd",
  "opcode_parsed": [
   "0F",
   "86",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNA rel32",
  "instr_parsed": [
   "JNA",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not above (CF=1 or ZF=1).",
  "page": 642
 },
 {
  "opcode": "0F 82 cw",
  "opcode_parsed": [
   "0F",
   "82",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "82"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNAE rel16",
  "instr_parsed": [
   "JNAE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not above or equal (CF=1). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 82 cd",
  "opcode_parsed": [
   "0F",
   "82",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "82"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNAE rel32",
  "instr_parsed": [
   "JNAE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not above or equal (CF=1).",
  "page": 642
 },
 {
  "opcode": "0F 83 cw",
  "opcode_parsed": [
   "0F",
   "83",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNB rel16",
  "instr_parsed": [
   "JNB",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not below (CF=0). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 83 cd",
  "opcode_parsed": [
   "0F",
   "83",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNB rel32",
  "instr_parsed": [
   "JNB",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not below (CF=0).",
  "page": 642
 },
 {
  "opcode": "0F 87 cw",
  "opcode_parsed": [
   "0F",
   "87",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNBE rel16",
  "instr_parsed": [
   "JNBE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not below or equal (CF=0 and ZF=0). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 87 cd",
  "opcode_parsed": [
   "0F",
   "87",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNBE rel32",
  "instr_parsed": [
   "JNBE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not below or equal (CF=0 and ZF=0).",
  "page": 642
 },
 {
  "opcode": "0F 83 cw",
  "opcode_parsed": [
   "0F",
   "83",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNC rel16",
  "instr_parsed": [
   "JNC",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not carry (CF=0). Not supported in 64-bit mode.",
  "page": 642
 },
 {
  "opcode": "0F 83 cd",
  "opcode_parsed": [
   "0F",
   "83",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNC rel32",
  "instr_parsed": [
   "JNC",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not carry (CF=0).",
  "page": 642
 },
 {
  "opcode": "0F 85 cw",
  "opcode_parsed": [
   "0F",
   "85",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "85"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNE rel16",
  "instr_parsed": [
   "JNE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not equal (ZF=0). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 85 cd",
  "opcode_parsed": [
   "0F",
   "85",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "85"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNE rel32",
  "instr_parsed": [
   "JNE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not equal (ZF=0).",
  "page": 643
 },
 {
  "opcode": "0F 8E cw",
  "opcode_parsed": [
   "0F",
   "8E",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNG rel16",
  "instr_parsed": [
   "JNG",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not greater (ZF=1 or SF ≠ OF). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8E cd",
  "opcode_parsed": [
   "0F",
   "8E",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNG rel32",
  "instr_parsed": [
   "JNG",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not greater (ZF=1 or SF ≠ OF).",
  "page": 643
 },
 {
  "opcode": "0F 8C cw",
  "opcode_parsed": [
   "0F",
   "8C",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNGE rel16",
  "instr_parsed": [
   "JNGE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not greater or equal (SF ≠ OF). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8C cd",
  "opcode_parsed": [
   "0F",
   "8C",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNGE rel32",
  "instr_parsed": [
   "JNGE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not greater or equal (SF ≠ OF).",
  "page": 643
 },
 {
  "opcode": "0F 8D cw",
  "opcode_parsed": [
   "0F",
   "8D",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNL rel16",
  "instr_parsed": [
   "JNL",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not less (SF=OF). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8D cd",
  "opcode_parsed": [
   "0F",
   "8D",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNL rel32",
  "instr_parsed": [
   "JNL",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not less (SF=OF).",
  "page": 643
 },
 {
  "opcode": "0F 8F cw",
  "opcode_parsed": [
   "0F",
   "8F",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNLE rel16",
  "instr_parsed": [
   "JNLE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not less or equal (ZF=0 and SF=OF). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8F cd",
  "opcode_parsed": [
   "0F",
   "8F",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNLE rel32",
  "instr_parsed": [
   "JNLE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not less or equal (ZF=0 and SF=OF).",
  "page": 643
 },
 {
  "opcode": "0F 81 cw",
  "opcode_parsed": [
   "0F",
   "81",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNO rel16",
  "instr_parsed": [
   "JNO",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not overflow (OF=0). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 81 cd",
  "opcode_parsed": [
   "0F",
   "81",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNO rel32",
  "instr_parsed": [
   "JNO",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not overflow (OF=0).",
  "page": 643
 },
 {
  "opcode": "0F 8B cw",
  "opcode_parsed": [
   "0F",
   "8B",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNP rel16",
  "instr_parsed": [
   "JNP",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not parity (PF=0). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8B cd",
  "opcode_parsed": [
   "0F",
   "8B",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNP rel32",
  "instr_parsed": [
   "JNP",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not parity (PF=0).",
  "page": 643
 },
 {
  "opcode": "0F 89 cw",
  "opcode_parsed": [
   "0F",
   "89",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "89"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNS rel16",
  "instr_parsed": [
   "JNS",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not sign (SF=0). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 89 cd",
  "opcode_parsed": [
   "0F",
   "89",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "89"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNS rel32",
  "instr_parsed": [
   "JNS",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not sign (SF=0).",
  "page": 643
 },
 {
  "opcode": "0F 85 cw",
  "opcode_parsed": [
   "0F",
   "85",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "85"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JNZ rel16",
  "instr_parsed": [
   "JNZ",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not zero (ZF=0). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 85 cd",
  "opcode_parsed": [
   "0F",
   "85",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "85"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JNZ rel32",
  "instr_parsed": [
   "JNZ",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if not zero (ZF=0).",
  "page": 643
 },
 {
  "opcode": "0F 80 cw",
  "opcode_parsed": [
   "0F",
   "80",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JO rel16",
  "instr_parsed": [
   "JO",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if overflow (OF=1). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 80 cd",
  "opcode_parsed": [
   "0F",
   "80",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JO rel32",
  "instr_parsed": [
   "JO",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if overflow (OF=1).",
  "page": 643
 },
 {
  "opcode": "0F 8A cw",
  "opcode_parsed": [
   "0F",
   "8A",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JP rel16",
  "instr_parsed": [
   "JP",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if parity (PF=1). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8A cd",
  "opcode_parsed": [
   "0F",
   "8A",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JP rel32",
  "instr_parsed": [
   "JP",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if parity (PF=1).",
  "page": 643
 },
 {
  "opcode": "0F 8A cw",
  "opcode_parsed": [
   "0F",
   "8A",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JPE rel16",
  "instr_parsed": [
   "JPE",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if parity even (PF=1). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8A cd",
  "opcode_parsed": [
   "0F",
   "8A",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JPE rel32",
  "instr_parsed": [
   "JPE",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if parity even (PF=1).",
  "page": 643
 },
 {
  "opcode": "0F 8B cw",
  "opcode_parsed": [
   "0F",
   "8B",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JPO rel16",
  "instr_parsed": [
   "JPO",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if parity odd (PF=0). Not supported in 64-bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 8B cd",
  "opcode_parsed": [
   "0F",
   "8B",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JPO rel32",
  "instr_parsed": [
   "JPO",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if parity odd (PF=0).",
  "page": 643
 },
 {
  "opcode": "0F 88 cw",
  "opcode_parsed": [
   "0F",
   "88",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "88"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JS rel16",
  "instr_parsed": [
   "JS",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if sign (SF=1). Not supported in 64bit mode.",
  "page": 643
 },
 {
  "opcode": "0F 88 cd",
  "opcode_parsed": [
   "0F",
   "88",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "88"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JS rel32",
  "instr_parsed": [
   "JS",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if sign (SF=1).",
  "page": 644
 },
 {
  "opcode": "0F 84 cw",
  "opcode_parsed": [
   "0F",
   "84",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JZ rel16",
  "instr_parsed": [
   "JZ",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if 0 (ZF=1). Not supported in 64-bit mode.",
  "page": 644
 },
 {
  "opcode": "0F 84 cd",
  "opcode_parsed": [
   "0F",
   "84",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JZ rel32",
  "instr_parsed": [
   "JZ",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near if 0 (ZF=1).",
  "page": 644
 },
 {
  "opcode": "EB cb",
  "opcode_parsed": [
   "EB",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JMP rel8",
  "instr_parsed": [
   "JMP",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits",
  "page": 646
 },
 {
  "opcode": "E9 cw",
  "opcode_parsed": [
   "E9",
   "cw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "JMP rel16",
  "instr_parsed": [
   "JMP",
   "rel16"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near, relative, displacement relative to next instruction. Not supported in 64-bit mode.",
  "page": 646
 },
 {
  "opcode": "E9 cd",
  "opcode_parsed": [
   "E9",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JMP rel32",
  "instr_parsed": [
   "JMP",
   "rel32"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near, relative, RIP = RIP + 32-bit displacement sign extended to 64-bits",
  "page": 646
 },
 {
  "opcode": "FF /4",
  "opcode_parsed": [
   "FF",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JMP r/m16",
  "instr_parsed": [
   "JMP",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near, absolute indirect, address = zeroextended r/m16. Not supported in 64-bit mode.",
  "page": 646
 },
 {
  "opcode": "FF /4",
  "opcode_parsed": [
   "FF",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JMP r/m32",
  "instr_parsed": [
   "JMP",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode.",
  "page": 646
 },
 {
  "opcode": "FF /4",
  "opcode_parsed": [
   "FF",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JMP r/m64",
  "instr_parsed": [
   "JMP",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Jump near, absolute indirect, RIP = 64-Bit offset from register or memory",
  "page": 646
 },
 {
  "opcode": "EA cd",
  "opcode_parsed": [
   "EA",
   "cd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cd"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "JMP ptr16:16",
  "instr_parsed": [
   "JMP",
   "ptr16:16"
  ],
  "op_en": "S",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump far, absolute, address given in operand",
  "page": 646
 },
 {
  "opcode": "EA cp",
  "opcode_parsed": [
   "EA",
   "cp"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cp"
    ],
    "byte_type": "imm",
    "byte_size_min": 6,
    "byte_size_max": 6
   }
  ],
  "instr": "JMP ptr16:32",
  "instr_parsed": [
   "JMP",
   "ptr16:32"
  ],
  "op_en": "S",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump far, absolute, address given in operand",
  "page": 646
 },
 {
  "opcode": "FF /5",
  "opcode_parsed": [
   "FF",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JMP m16:16",
  "instr_parsed": [
   "JMP",
   "m16:16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump far, absolute indirect, address given in m16:16",
  "page": 646
 },
 {
  "opcode": "FF  /5",
  "opcode_parsed": [
   "FF",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JMP m16:32",
  "instr_parsed": [
   "JMP",
   "m16:32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Jump far, absolute indirect, address given in m16:32.",
  "page": 646
 },
 {
  "opcode": "REX.W FF  /5",
  "opcode_parsed": [
   "REX.W",
   "FF",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "JMP m16:64",
  "instr_parsed": [
   "JMP",
   "m16:64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Jump far, absolute indirect, address given in m16:64 .",
  "page": 646
 },
 {
  "opcode": "C5 / r",
  "opcode_parsed": [
   "C5",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LDS r16,m16:16",
  "instr_parsed": [
   "LDS",
   "r16",
   "m16:16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load DS: r16 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "C5 / r",
  "opcode_parsed": [
   "C5",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LDS r32,m16:32",
  "instr_parsed": [
   "LDS",
   "r32",
   "m16:32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load DS: r32 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "0F B2 / r",
  "opcode_parsed": [
   "0F",
   "B2",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LSS r16,m16:16",
  "instr_parsed": [
   "LSS",
   "r16",
   "m16:16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load SS: r16 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "0F B2 / r",
  "opcode_parsed": [
   "0F",
   "B2",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LSS r32,m16:32",
  "instr_parsed": [
   "LSS",
   "r32",
   "m16:32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load SS: r32 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "REX + 0F B2 / r",
  "opcode_parsed": [
   "REX",
   "0F",
   "B2",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LSS r64,m16:64",
  "instr_parsed": [
   "LSS",
   "r64",
   "m16:64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load SS: r64 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "C4 / r",
  "opcode_parsed": [
   "C4",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LES r16,m16:16",
  "instr_parsed": [
   "LES",
   "r16",
   "m16:16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load ES: r16 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "C4 / r",
  "opcode_parsed": [
   "C4",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LES r32,m16:32",
  "instr_parsed": [
   "LES",
   "r32",
   "m16:32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load ES: r32 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "0F B4 / r",
  "opcode_parsed": [
   "0F",
   "B4",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LFS r16,m16:16",
  "instr_parsed": [
   "LFS",
   "r16",
   "m16:16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load FS: r16 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "0F B4 / r",
  "opcode_parsed": [
   "0F",
   "B4",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LFS r32,m16:32",
  "instr_parsed": [
   "LFS",
   "r32",
   "m16:32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load FS: r32 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "REX + 0F B4 / r",
  "opcode_parsed": [
   "REX",
   "0F",
   "B4",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LFS r64,m16:64",
  "instr_parsed": [
   "LFS",
   "r64",
   "m16:64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load FS: r64 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "0F B5 / r",
  "opcode_parsed": [
   "0F",
   "B5",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LGS r16,m16:16",
  "instr_parsed": [
   "LGS",
   "r16",
   "m16:16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load GS: r16 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "0F B5 / r",
  "opcode_parsed": [
   "0F",
   "B5",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LGS r32,m16:32",
  "instr_parsed": [
   "LGS",
   "r32",
   "m16:32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load GS: r32 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "REX + 0F B5 / r",
  "opcode_parsed": [
   "REX",
   "0F",
   "B5",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LGS r64,m16:64",
  "instr_parsed": [
   "LGS",
   "r64",
   "m16:64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load GS: r64 with far pointer from memory.",
  "page": 680
 },
 {
  "opcode": "8D / r",
  "opcode_parsed": [
   "8D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LEA r16,m",
  "instr_parsed": [
   "LEA",
   "r16",
   "m"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store effective address for m in register r16.",
  "page": 684
 },
 {
  "opcode": "8D / r",
  "opcode_parsed": [
   "8D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LEA r32,m",
  "instr_parsed": [
   "LEA",
   "r32",
   "m"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store effective address for m in register r32.",
  "page": 684
 },
 {
  "opcode": "REX.W + 8D / r",
  "opcode_parsed": [
   "REX.W",
   "8D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LEA r64,m",
  "instr_parsed": [
   "LEA",
   "r64",
   "m"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store effective address for m in register r64.",
  "page": 684
 },
 {
  "opcode": "C9",
  "opcode_parsed": [
   "C9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LEAVE",
  "instr_parsed": [
   "LEAVE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set SP to BP, then pop BP.",
  "page": 686
 },
 {
  "opcode": "C9",
  "opcode_parsed": [
   "C9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LEAVE",
  "instr_parsed": [
   "LEAVE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set ESP to EBP, then pop EBP.",
  "page": 686
 },
 {
  "opcode": "C9",
  "opcode_parsed": [
   "C9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LEAVE",
  "instr_parsed": [
   "LEAVE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set RSP to RBP, then pop RBP.",
  "page": 686
 },
 {
  "opcode": "NP 0F AE E8",
  "opcode_parsed": [
   "NP",
   "0F",
   "AE",
   "E8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LFENCE",
  "instr_parsed": [
   "LFENCE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Serializes load operations.",
  "page": 688
 },
 {
  "opcode": "0F 01 /2",
  "opcode_parsed": [
   "0F",
   "01",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LGDT m16&32",
  "instr_parsed": [
   "LGDT",
   "m16&32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load m into GDTR.",
  "page": 689
 },
 {
  "opcode": "0F 01 /3",
  "opcode_parsed": [
   "0F",
   "01",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LIDT m16&32",
  "instr_parsed": [
   "LIDT",
   "m16&32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load m into IDTR.",
  "page": 689
 },
 {
  "opcode": "0F 01 /2",
  "opcode_parsed": [
   "0F",
   "01",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LGDT m16&64",
  "instr_parsed": [
   "LGDT",
   "m16&64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load m into GDTR.",
  "page": 689
 },
 {
  "opcode": "0F 01 /3",
  "opcode_parsed": [
   "0F",
   "01",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LIDT m16&64",
  "instr_parsed": [
   "LIDT",
   "m16&64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load m into IDTR.",
  "page": 689
 },
 {
  "opcode": "0F 00 /2",
  "opcode_parsed": [
   "0F",
   "00",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LLDT r/m 16",
  "instr_parsed": [
   "LLDT",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load segment selector r/m 16 into LDTR.",
  "page": 692
 },
 {
  "opcode": "0F 01 /6",
  "opcode_parsed": [
   "0F",
   "01",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LMSW r/m 16",
  "instr_parsed": [
   "LMSW",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Loads r/m 16 in machine status word of CR0.",
  "page": 694
 },
 {
  "opcode": "F0",
  "opcode_parsed": [
   "F0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LOCK",
  "instr_parsed": [
   "LOCK"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Asserts LOCK# signal for duration of the accompanying instruction.",
  "page": 699
 },
 {
  "opcode": "AC",
  "opcode_parsed": [
   "AC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODS m8",
  "instr_parsed": [
   "LODS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.",
  "page": 701
 },
 {
  "opcode": "AD",
  "opcode_parsed": [
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODS m16",
  "instr_parsed": [
   "LODS",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.",
  "page": 701
 },
 {
  "opcode": "AD",
  "opcode_parsed": [
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODS m32",
  "instr_parsed": [
   "LODS",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.",
  "page": 701
 },
 {
  "opcode": "REX.W + AD",
  "opcode_parsed": [
   "REX.W",
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODS m64",
  "instr_parsed": [
   "LODS",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load qword at address (R)SI into RAX.",
  "page": 701
 },
 {
  "opcode": "AC",
  "opcode_parsed": [
   "AC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODSB",
  "instr_parsed": [
   "LODSB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.",
  "page": 701
 },
 {
  "opcode": "AD",
  "opcode_parsed": [
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODSW",
  "instr_parsed": [
   "LODSW"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.",
  "page": 701
 },
 {
  "opcode": "AD",
  "opcode_parsed": [
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODSD",
  "instr_parsed": [
   "LODSD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.",
  "page": 701
 },
 {
  "opcode": "REX.W + AD",
  "opcode_parsed": [
   "REX.W",
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LODSQ",
  "instr_parsed": [
   "LODSQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load qword at address (R)SI into RAX.",
  "page": 701
 },
 {
  "opcode": "E2 cb",
  "opcode_parsed": [
   "E2",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LOOP rel8",
  "instr_parsed": [
   "LOOP",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement count; jump short if count ≠ 0.",
  "page": 704
 },
 {
  "opcode": "E1 cb",
  "opcode_parsed": [
   "E1",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LOOPE rel8",
  "instr_parsed": [
   "LOOPE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement count; jump short if count ≠ 0 and ZF = 1.",
  "page": 704
 },
 {
  "opcode": "E0 cb",
  "opcode_parsed": [
   "E0",
   "cb"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "cb"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LOOPNE rel8",
  "instr_parsed": [
   "LOOPNE",
   "rel8"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Decrement count; jump short if count ≠ 0 and ZF = 0.",
  "page": 704
 },
 {
  "opcode": "0F 00 /3",
  "opcode_parsed": [
   "0F",
   "00",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "LTR r/m 16",
  "instr_parsed": [
   "LTR",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load r/m 16 into task register.",
  "page": 709
 },
 {
  "opcode": "NP 0F AE F0",
  "opcode_parsed": [
   "NP",
   "0F",
   "AE",
   "F0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MFENCE",
  "instr_parsed": [
   "MFENCE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Serializes load and store operations.",
  "page": 734
 },
 {
  "opcode": "0F 01 C8",
  "opcode_parsed": [
   "0F",
   "01",
   "C8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MONITOR",
  "instr_parsed": [
   "MONITOR"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Sets up a linear address range to be monitored by hardware and activates the monitor. The address range should be a writeback memory caching type. The address is DS:RAX/EAX/AX.",
  "page": 745
 },
 {
  "opcode": "88 / r",
  "opcode_parsed": [
   "88",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "88"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m8,r8",
  "instr_parsed": [
   "MOV",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r8 to r/m8.",
  "page": 747
 },
 {
  "opcode": "REX + 88 / r",
  "opcode_parsed": [
   "REX",
   "88",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "88"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m8 ***, r8 ***",
  "instr_parsed": [
   "MOV",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move r8 to r/m8.",
  "page": 747
 },
 {
  "opcode": "89 / r",
  "opcode_parsed": [
   "89",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "89"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m16,r16",
  "instr_parsed": [
   "MOV",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r16 to r/m16.",
  "page": 747
 },
 {
  "opcode": "89 / r",
  "opcode_parsed": [
   "89",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "89"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m32,r32",
  "instr_parsed": [
   "MOV",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r32 to r/m32.",
  "page": 747
 },
 {
  "opcode": "REX.W + 89 / r",
  "opcode_parsed": [
   "REX.W",
   "89",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "89"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m64,r64",
  "instr_parsed": [
   "MOV",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move r64 to r/m64.",
  "page": 747
 },
 {
  "opcode": "8A / r",
  "opcode_parsed": [
   "8A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r8,r/m8",
  "instr_parsed": [
   "MOV",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r/m8 to r8.",
  "page": 747
 },
 {
  "opcode": "REX + 8A / r",
  "opcode_parsed": [
   "REX",
   "8A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r8***,r/m8***",
  "instr_parsed": [
   "MOV",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move r/m8 to r8.",
  "page": 747
 },
 {
  "opcode": "8B / r",
  "opcode_parsed": [
   "8B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r16,r/m16",
  "instr_parsed": [
   "MOV",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r/m16 to r16.",
  "page": 747
 },
 {
  "opcode": "8B / r",
  "opcode_parsed": [
   "8B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r32,r/m32",
  "instr_parsed": [
   "MOV",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r/m32 to r32.",
  "page": 747
 },
 {
  "opcode": "REX.W + 8B / r",
  "opcode_parsed": [
   "REX.W",
   "8B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r64,r/m64",
  "instr_parsed": [
   "MOV",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move r/m64 to r64.",
  "page": 747
 },
 {
  "opcode": "8C / r",
  "opcode_parsed": [
   "8C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m16,Sreg **",
  "instr_parsed": [
   "MOV",
   "r/m16",
   "Sreg"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move segment register to r/m16.",
  "page": 747
 },
 {
  "opcode": "8C / r",
  "opcode_parsed": [
   "8C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r16/r32/m16, Sreg",
  "instr_parsed": [
   "MOV",
   "r16/r32/m16",
   "Sreg"
  ],
  "op_en": "** MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move zero extended 16-bit segment register to r16/r32/m16.",
  "page": 747
 },
 {
  "opcode": "REX.W + 8C / r",
  "opcode_parsed": [
   "REX.W",
   "8C",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r64/m16, Sreg **",
  "instr_parsed": [
   "MOV",
   "r64/m16",
   "Sreg"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move zero extended 16-bit segment register to r64/m16.",
  "page": 747
 },
 {
  "opcode": "8E / r",
  "opcode_parsed": [
   "8E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV Sreg,r/m16 **",
  "instr_parsed": [
   "MOV",
   "Sreg",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r/m16 to segment register.",
  "page": 747
 },
 {
  "opcode": "REX.W + 8E / r",
  "opcode_parsed": [
   "REX.W",
   "8E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "8E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV Sreg,r/m64 **",
  "instr_parsed": [
   "MOV",
   "Sreg",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move lower 16 bits of r/m64 to segment register.",
  "page": 747
 },
 {
  "opcode": "A0",
  "opcode_parsed": [
   "A0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV AL, moffs8 *",
  "instr_parsed": [
   "MOV",
   "AL",
   "moffs8"
  ],
  "op_en": "FD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move byte at ( seg:offset ) to AL.",
  "page": 747
 },
 {
  "opcode": "REX.W + A0",
  "opcode_parsed": [
   "REX.W",
   "A0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV AL, moffs8 *",
  "instr_parsed": [
   "MOV",
   "AL",
   "moffs8"
  ],
  "op_en": "FD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move  byte  at  ( offset ) to AL.",
  "page": 747
 },
 {
  "opcode": "A1",
  "opcode_parsed": [
   "A1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV AX, moffs16 *",
  "instr_parsed": [
   "MOV",
   "AX",
   "moffs16"
  ],
  "op_en": "FD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move word at ( seg:offset ) to AX.",
  "page": 747
 },
 {
  "opcode": "A1",
  "opcode_parsed": [
   "A1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV EAX, moffs32 *",
  "instr_parsed": [
   "MOV",
   "EAX",
   "moffs32"
  ],
  "op_en": "FD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move doubleword at ( seg:offset ) to EAX.",
  "page": 747
 },
 {
  "opcode": "REX.W + A1",
  "opcode_parsed": [
   "REX.W",
   "A1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV RAX, moffs64 *",
  "instr_parsed": [
   "MOV",
   "RAX",
   "moffs64"
  ],
  "op_en": "FD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move quadword at ( offset ) to RAX.",
  "page": 747
 },
 {
  "opcode": "A2",
  "opcode_parsed": [
   "A2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV moffs8 ,AL",
  "instr_parsed": [
   "MOV",
   "moffs8",
   "AL"
  ],
  "op_en": "TD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move AL to ( seg:offset ).",
  "page": 747
 },
 {
  "opcode": "REX.W + A2",
  "opcode_parsed": [
   "REX.W",
   "A2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV moffs8 *** ,AL",
  "instr_parsed": [
   "MOV",
   "moffs8",
   "AL"
  ],
  "op_en": "TD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move AL to ( offset ).",
  "page": 747
 },
 {
  "opcode": "A3",
  "opcode_parsed": [
   "A3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV moffs16 *,AX",
  "instr_parsed": [
   "MOV",
   "moffs16",
   "AX"
  ],
  "op_en": "TD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move AX to ( seg:offset ).",
  "page": 747
 },
 {
  "opcode": "A3",
  "opcode_parsed": [
   "A3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV moffs32 *,EAX",
  "instr_parsed": [
   "MOV",
   "moffs32",
   "EAX"
  ],
  "op_en": "TD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move EAX to ( seg:offset ).",
  "page": 747
 },
 {
  "opcode": "REX.W + A3",
  "opcode_parsed": [
   "REX.W",
   "A3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV moffs64 *,RAX",
  "instr_parsed": [
   "MOV",
   "moffs64",
   "RAX"
  ],
  "op_en": "TD",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move RAX to ( offset ).",
  "page": 747
 },
 {
  "opcode": "B0+ rb ib",
  "opcode_parsed": [
   "B0",
   "+rb",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "B0",
     "+rb"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r8, imm8",
  "instr_parsed": [
   "MOV",
   "r8",
   "imm8"
  ],
  "op_en": "OI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move imm8 to r8.",
  "page": 747
 },
 {
  "opcode": "REX + B0+ rb ib",
  "opcode_parsed": [
   "REX",
   "B0",
   "+rb",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B0",
     "+rb"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r8 *** , imm8",
  "instr_parsed": [
   "MOV",
   "r8",
   "imm8"
  ],
  "op_en": "OI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move imm8 to r8.",
  "page": 747
 },
 {
  "opcode": "B8+ rw iw",
  "opcode_parsed": [
   "B8",
   "+rw",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "B8",
     "+rw"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "MOV r16, imm16",
  "instr_parsed": [
   "MOV",
   "r16",
   "imm16"
  ],
  "op_en": "OI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move imm16 to r16.",
  "page": 747
 },
 {
  "opcode": "B8+ rd id",
  "opcode_parsed": [
   "B8",
   "+rd",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "B8",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "MOV r32, imm32",
  "instr_parsed": [
   "MOV",
   "r32",
   "imm32"
  ],
  "op_en": "OI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move imm32 to r32.",
  "page": 747
 },
 {
  "opcode": "REX.W + B8+ rd io",
  "opcode_parsed": [
   "REX.W",
   "B8",
   "+rd",
   "io"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B8",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "io"
    ],
    "byte_type": "imm",
    "byte_size_min": 8,
    "byte_size_max": 8
   }
  ],
  "instr": "MOV r64, imm64",
  "instr_parsed": [
   "MOV",
   "r64",
   "imm64"
  ],
  "op_en": "OI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move imm64 to r64.",
  "page": 747
 },
 {
  "opcode": "C6 / 0 ib",
  "opcode_parsed": [
   "C6",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m8, imm8",
  "instr_parsed": [
   "MOV",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move imm8 to r/m8.",
  "page": 747
 },
 {
  "opcode": "REX + C6 / 0 ib",
  "opcode_parsed": [
   "REX",
   "C6",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r/m8***, imm8",
  "instr_parsed": [
   "MOV",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move imm8 to r/m8.",
  "page": 747
 },
 {
  "opcode": "C7 / 0 iw",
  "opcode_parsed": [
   "C7",
   "/0",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "MOV r/m16, imm16",
  "instr_parsed": [
   "MOV",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move imm16 to r/m16.",
  "page": 747
 },
 {
  "opcode": "C7 / 0 id",
  "opcode_parsed": [
   "C7",
   "/0",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "MOV r/m32, imm32",
  "instr_parsed": [
   "MOV",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move imm32 to r/m32.",
  "page": 747
 },
 {
  "opcode": "REX.W + C7 / 0 id",
  "opcode_parsed": [
   "REX.W",
   "C7",
   "/0",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "MOV r/m64, imm32",
  "instr_parsed": [
   "MOV",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move imm32 sign extended to 64-bits to r/m64.",
  "page": 747
 },
 {
  "opcode": "0F 20/ r",
  "opcode_parsed": [
   "0F",
   "20",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "20"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r32, CR0–CR7",
  "instr_parsed": [
   "MOV",
   "r32",
   "CR0–CR7"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move control register to r32 .",
  "page": 752
 },
 {
  "opcode": "0F 20/ r",
  "opcode_parsed": [
   "0F",
   "20",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "20"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r64, CR0–CR7",
  "instr_parsed": [
   "MOV",
   "r64",
   "CR0–CR7"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move extended control register to r64 . 1",
  "page": 752
 },
 {
  "opcode": "REX.R + 0F 20 /0",
  "opcode_parsed": [
   "REX.R",
   "0F",
   "20",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.R"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "20"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r64, CR8",
  "instr_parsed": [
   "MOV",
   "r64",
   "CR8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move extended CR8 to r64 . 1",
  "page": 752
 },
 {
  "opcode": "0F 22 / r",
  "opcode_parsed": [
   "0F",
   "22",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "22"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV CR0–CR7, r32",
  "instr_parsed": [
   "MOV",
   "CR0–CR7",
   "r32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r32 to control register.",
  "page": 752
 },
 {
  "opcode": "0F 22 / r",
  "opcode_parsed": [
   "0F",
   "22",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "22"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV CR0–CR7, r64",
  "instr_parsed": [
   "MOV",
   "CR0–CR7",
   "r64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move r64 to extended control register. 1",
  "page": 752
 },
 {
  "opcode": "REX.R + 0F 22 /0",
  "opcode_parsed": [
   "REX.R",
   "0F",
   "22",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.R"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "22"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV CR8, r64",
  "instr_parsed": [
   "MOV",
   "CR8",
   "r64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move r64 to extended CR8. 1",
  "page": 752
 },
 {
  "opcode": "0F 21/ r",
  "opcode_parsed": [
   "0F",
   "21",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "21"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r32, DR0–DR7",
  "instr_parsed": [
   "MOV",
   "r32",
   "DR0–DR7"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move debug register to r32 .",
  "page": 755
 },
 {
  "opcode": "0F 21/ r",
  "opcode_parsed": [
   "0F",
   "21",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "21"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV r64, DR0–DR7",
  "instr_parsed": [
   "MOV",
   "r64",
   "DR0–DR7"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move extended debug register to r64 .",
  "page": 755
 },
 {
  "opcode": "0F 23 / r",
  "opcode_parsed": [
   "0F",
   "23",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "23"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV DR0–DR7, r32",
  "instr_parsed": [
   "MOV",
   "DR0–DR7",
   "r32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move r32 to debug register.",
  "page": 755
 },
 {
  "opcode": "0F 23 / r",
  "opcode_parsed": [
   "0F",
   "23",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "23"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOV DR0–DR7, r64",
  "instr_parsed": [
   "MOV",
   "DR0–DR7",
   "r64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move r64 to extended debug register.",
  "page": 755
 },
 {
  "opcode": "66 0F 16 /r",
  "opcode_parsed": [
   "66",
   "0F",
   "16",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "16"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVHPD xmm1, m64",
  "instr_parsed": [
   "MOVHPD",
   "xmm1",
   "m64"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Move double-precision floating-point value from m64 to high quadword of xmm1.",
  "page": 795
 },
 {
  "opcode": "VEX.128.66.0F.WIG 16 /r",
  "opcode_parsed": [
   "VEX.128.66.0F.WIG",
   "16",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "16"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPD xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVHPD",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Merge double-precision floating-point value from m64 and the low quadword of xmm1.",
  "page": 795
 },
 {
  "opcode": "EVEX.128.66.0F.W1 16 /r",
  "opcode_parsed": [
   "EVEX.128.66.0F.W1",
   "16",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "16"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPD xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVHPD",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Merge double-precision floating-point value from m64 and the low quadword of xmm1.",
  "page": 795
 },
 {
  "opcode": "66 0F 17 /r",
  "opcode_parsed": [
   "66",
   "0F",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVHPD m64, xmm1",
  "instr_parsed": [
   "MOVHPD",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Move double-precision floating-point value from high quadword of xmm1 to m64.",
  "page": 795
 },
 {
  "opcode": "VEX.128.66.0F.WIG 17 /r",
  "opcode_parsed": [
   "VEX.128.66.0F.WIG",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPD m64, xmm1",
  "instr_parsed": [
   "VMOVHPD",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Move double-precision floating-point value from high quadword of xmm1 to m64.",
  "page": 795
 },
 {
  "opcode": "EVEX.128.66.0F.W1 17 /r",
  "opcode_parsed": [
   "EVEX.128.66.0F.W1",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPD m64, xmm1",
  "instr_parsed": [
   "VMOVHPD",
   "m64",
   "xmm1"
  ],
  "op_en": "E",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Move double-precision floating-point value from high quadword of xmm1 to m64.",
  "page": 795
 },
 {
  "opcode": "NP 0F 16 /r",
  "opcode_parsed": [
   "NP",
   "0F",
   "16",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "16"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVHPS xmm1, m64",
  "instr_parsed": [
   "MOVHPS",
   "xmm1",
   "m64"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE",
  "description": "Move two packed single-precision floating-point values from m64 to high quadword of xmm1.",
  "page": 797
 },
 {
  "opcode": "VEX.128.0F.WIG 16 /r",
  "opcode_parsed": [
   "VEX.128.0F.WIG",
   "16",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "16"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPS xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVHPS",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Merge two packed single-precision floating-point values from m64 and the low quadword of xmm1.",
  "page": 797
 },
 {
  "opcode": "EVEX.128.0F.W0 16 /r",
  "opcode_parsed": [
   "EVEX.128.0F.W0",
   "16",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.0F.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "16"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPS xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVHPS",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Merge two packed single-precision floating-point values from m64 and the low quadword of xmm1.",
  "page": 797
 },
 {
  "opcode": "NP 0F 17 /r",
  "opcode_parsed": [
   "NP",
   "0F",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVHPS m64, xmm1",
  "instr_parsed": [
   "MOVHPS",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE",
  "description": "Move two packed single-precision floating-point values from high quadword of xmm1 to m64.",
  "page": 797
 },
 {
  "opcode": "VEX.128.0F.WIG 17 /r",
  "opcode_parsed": [
   "VEX.128.0F.WIG",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPS m64, xmm1",
  "instr_parsed": [
   "VMOVHPS",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Move two packed single-precision floating-point values from high quadword of xmm1 to m64.",
  "page": 797
 },
 {
  "opcode": "EVEX.128.0F.W0 17 /r",
  "opcode_parsed": [
   "EVEX.128.0F.W0",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.0F.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVHPS m64, xmm1",
  "instr_parsed": [
   "VMOVHPS",
   "m64",
   "xmm1"
  ],
  "op_en": "E",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Move two packed single-precision floating-point values from high quadword of xmm1 to m64.",
  "page": 797
 },
 {
  "opcode": "66 0F 12 /r",
  "opcode_parsed": [
   "66",
   "0F",
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVLPD xmm1, m64",
  "instr_parsed": [
   "MOVLPD",
   "xmm1",
   "m64"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Move double-precision floating-point value from m64 to low quadword of xmm1.",
  "page": 801
 },
 {
  "opcode": "VEX.128.66.0F.WIG 12 /r",
  "opcode_parsed": [
   "VEX.128.66.0F.WIG",
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPD xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVLPD",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Merge double-precision floating-point value from m64 and the high quadword of xmm1.",
  "page": 801
 },
 {
  "opcode": "EVEX.128.66.0F.W1 12 /r",
  "opcode_parsed": [
   "EVEX.128.66.0F.W1",
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPD xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVLPD",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Merge double-precision floating-point value from m64 and the high quadword of xmm1.",
  "page": 801
 },
 {
  "opcode": "66 0F 13/r",
  "opcode_parsed": [
   "66",
   "0F",
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVLPD m64, xmm1",
  "instr_parsed": [
   "MOVLPD",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Move double-precision floating-point value from low quadword of xmm1 to m64.",
  "page": 801
 },
 {
  "opcode": "VEX.128.66.0F.WIG 13/r",
  "opcode_parsed": [
   "VEX.128.66.0F.WIG",
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPD m64, xmm1",
  "instr_parsed": [
   "VMOVLPD",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Move  double-precision  floating-point value from low quadword of xmm1 to m64.",
  "page": 801
 },
 {
  "opcode": "EVEX.128.66.0F.W1 13/r",
  "opcode_parsed": [
   "EVEX.128.66.0F.W1",
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPD m64, xmm1",
  "instr_parsed": [
   "VMOVLPD",
   "m64",
   "xmm1"
  ],
  "op_en": "E",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Move  double-precision  floating-point value from low quadword of xmm1 to m64.",
  "page": 801
 },
 {
  "opcode": "NP 0F 12 /r",
  "opcode_parsed": [
   "NP",
   "0F",
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVLPS xmm1, m64",
  "instr_parsed": [
   "MOVLPS",
   "xmm1",
   "m64"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE",
  "description": "Move two packed single-precision floating-point values from m64 to low quadword of xmm1.",
  "page": 803
 },
 {
  "opcode": "VEX.128.0F.WIG 12 /r",
  "opcode_parsed": [
   "VEX.128.0F.WIG",
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPS xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVLPS",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Merge two packed single-precision floating-point values from m64 and the high quadword of xmm1.",
  "page": 803
 },
 {
  "opcode": "EVEX.128.0F.W0 12 /r",
  "opcode_parsed": [
   "EVEX.128.0F.W0",
   "12",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.0F.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "12"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPS xmm2, xmm1, m64",
  "instr_parsed": [
   "VMOVLPS",
   "xmm2",
   "xmm1",
   "m64"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Merge two packed single-precision floating-point values from m64 and the high quadword of xmm1.",
  "page": 803
 },
 {
  "opcode": "0F 13/r",
  "opcode_parsed": [
   "0F",
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVLPS m64, xmm1",
  "instr_parsed": [
   "MOVLPS",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE",
  "description": "Move two packed single-precision floating-point values from low quadword of xmm1 to m64.",
  "page": 803
 },
 {
  "opcode": "VEX.128.0F.WIG 13/r",
  "opcode_parsed": [
   "VEX.128.0F.WIG",
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPS m64, xmm1",
  "instr_parsed": [
   "VMOVLPS",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Move two packed single-precision floating-point values from low quadword of xmm1 to m64.",
  "page": 803
 },
 {
  "opcode": "EVEX.128.0F.W0 13/r",
  "opcode_parsed": [
   "EVEX.128.0F.W0",
   "13",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.0F.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "13"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVLPS m64, xmm1",
  "instr_parsed": [
   "VMOVLPS",
   "m64",
   "xmm1"
  ],
  "op_en": "E",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Move two packed single-precision floating-point values from low quadword of xmm1 to m64.",
  "page": 803
 },
 {
  "opcode": "A4",
  "opcode_parsed": [
   "A4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVS m8 , m8",
  "instr_parsed": [
   "MOVS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "A5",
  "opcode_parsed": [
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVS m16 , m16",
  "instr_parsed": [
   "MOVS",
   "m16",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "A5",
  "opcode_parsed": [
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVS m32 , m32",
  "instr_parsed": [
   "MOVS",
   "m32",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "REX.W + A5",
  "opcode_parsed": [
   "REX.W",
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVS m64 , m64",
  "instr_parsed": [
   "MOVS",
   "m64",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move qword from address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "A4",
  "opcode_parsed": [
   "A4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSB",
  "instr_parsed": [
   "MOVSB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "A5",
  "opcode_parsed": [
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSW",
  "instr_parsed": [
   "MOVSW"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "A5",
  "opcode_parsed": [
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSD",
  "instr_parsed": [
   "MOVSD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "REX.W + A5",
  "opcode_parsed": [
   "REX.W",
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSQ",
  "instr_parsed": [
   "MOVSQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move qword from address (R|E)SI to (R|E)DI.",
  "page": 825
 },
 {
  "opcode": "F2 0F 10 /r",
  "opcode_parsed": [
   "F2",
   "0F",
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSD xmm1, xmm2",
  "instr_parsed": [
   "MOVSD",
   "xmm1",
   "xmm2"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Move scalar double-precision floating-point value from xmm2 to xmm1 register.",
  "page": 829
 },
 {
  "opcode": "F2 0F 10 /r",
  "opcode_parsed": [
   "F2",
   "0F",
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSD xmm1, m64",
  "instr_parsed": [
   "MOVSD",
   "xmm1",
   "m64"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Load scalar double-precision floating-point value from m64 to xmm1 register.",
  "page": 829
 },
 {
  "opcode": "F2 0F 11 /r",
  "opcode_parsed": [
   "F2",
   "0F",
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSD xmm1/m64, xmm2",
  "instr_parsed": [
   "MOVSD",
   "xmm1/m64",
   "xmm2"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE2",
  "description": "Move scalar double-precision floating-point value from xmm2 register to xmm1/m64.",
  "page": 829
 },
 {
  "opcode": "VEX.LIG.F2.0F.WIG 10 /r",
  "opcode_parsed": [
   "VEX.LIG.F2.0F.WIG",
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.LIG.F2.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD xmm1, xmm2, xmm3",
  "instr_parsed": [
   "VMOVSD",
   "xmm1",
   "xmm2",
   "xmm3"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Merge scalar double-precision floating-point value from xmm2 and xmm3 to xmm1 register.",
  "page": 829
 },
 {
  "opcode": "VEX.LIG.F2.0F.WIG 10 /r",
  "opcode_parsed": [
   "VEX.LIG.F2.0F.WIG",
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.LIG.F2.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD xmm1, m64",
  "instr_parsed": [
   "VMOVSD",
   "xmm1",
   "m64"
  ],
  "op_en": "D",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Load scalar double-precision floating-point value from m64 to xmm1 register.",
  "page": 829
 },
 {
  "opcode": "VEX.LIG.F2.0F.WIG 11 /r",
  "opcode_parsed": [
   "VEX.LIG.F2.0F.WIG",
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.LIG.F2.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD xmm1, xmm2, xmm3",
  "instr_parsed": [
   "VMOVSD",
   "xmm1",
   "xmm2",
   "xmm3"
  ],
  "op_en": "E",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Merge scalar double-precision floating-point value from xmm2 and xmm3 registers to xmm1.",
  "page": 829
 },
 {
  "opcode": "VEX.LIG.F2.0F.WIG 11 /r",
  "opcode_parsed": [
   "VEX.LIG.F2.0F.WIG",
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.LIG.F2.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD m64, xmm1",
  "instr_parsed": [
   "VMOVSD",
   "m64",
   "xmm1"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Store scalar double-precision floating-point value from xmm1 register to m64.",
  "page": 829
 },
 {
  "opcode": "EVEX.LLIG.F2.0F.W1 10 /r",
  "opcode_parsed": [
   "EVEX.LLIG.F2.0F.W1",
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.LLIG.F2.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD xmm1 {k1}{z}, xmm2, xmm3",
  "instr_parsed": [
   "VMOVSD",
   "xmm1 {k1}{z}",
   "xmm2",
   "xmm3"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Merge scalar double-precision floating-point value from xmm2 and xmm3 registers to xmm1 under writemask k1.",
  "page": 829
 },
 {
  "opcode": "EVEX.LLIG.F2.0F.W1 10 /r",
  "opcode_parsed": [
   "EVEX.LLIG.F2.0F.W1",
   "10",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.LLIG.F2.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "10"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD xmm1 {k1}{z}, m64",
  "instr_parsed": [
   "VMOVSD",
   "xmm1 {k1}{z}",
   "m64"
  ],
  "op_en": "F",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Load scalar double-precision floating-point value from m64 to xmm1 register under writemask k1.",
  "page": 829
 },
 {
  "opcode": "EVEX.LLIG.F2.0F.W1 11 /r",
  "opcode_parsed": [
   "EVEX.LLIG.F2.0F.W1",
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.LLIG.F2.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD xmm1 {k1}{z}, xmm2, xmm3",
  "instr_parsed": [
   "VMOVSD",
   "xmm1 {k1}{z}",
   "xmm2",
   "xmm3"
  ],
  "op_en": "E",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Merge scalar double-precision floating-point value from xmm2 and xmm3 registers to xmm1 under writemask k1.",
  "page": 829
 },
 {
  "opcode": "EVEX.LLIG.F2.0F.W1 11 /r",
  "opcode_parsed": [
   "EVEX.LLIG.F2.0F.W1",
   "11",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.LLIG.F2.0F.W1"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "11"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VMOVSD m64 {k1}, xmm1",
  "instr_parsed": [
   "VMOVSD",
   "m64 {k1}",
   "xmm1"
  ],
  "op_en": "G",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512F",
  "description": "Store scalar double-precision floating-point value from xmm1 register to m64 under writemask k1.",
  "page": 829
 },
 {
  "opcode": "0F BE / r",
  "opcode_parsed": [
   "0F",
   "BE",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSX r16, r/m8",
  "instr_parsed": [
   "MOVSX",
   "r16",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move byte to word with sign-extension.",
  "page": 842
 },
 {
  "opcode": "0F BE / r",
  "opcode_parsed": [
   "0F",
   "BE",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSX r32, r/m8",
  "instr_parsed": [
   "MOVSX",
   "r32",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move byte to doubleword with signextension.",
  "page": 842
 },
 {
  "opcode": "REX.W + 0F BE / r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BE",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSX r64, r/m8",
  "instr_parsed": [
   "MOVSX",
   "r64",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move byte to quadword with sign-extension.",
  "page": 842
 },
 {
  "opcode": "0F BF / r",
  "opcode_parsed": [
   "0F",
   "BF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSX r32, r/m16",
  "instr_parsed": [
   "MOVSX",
   "r32",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move word to doubleword, with signextension.",
  "page": 842
 },
 {
  "opcode": "REX.W + 0F BF / r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "BF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "BF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSX r64, r/m16",
  "instr_parsed": [
   "MOVSX",
   "r64",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move word to quadword with sign-extension.",
  "page": 842
 },
 {
  "opcode": "63 / r*",
  "opcode_parsed": [
   "63",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "63"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSXD r16, r/m16",
  "instr_parsed": [
   "MOVSXD",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move word to word with sign-extension.",
  "page": 842
 },
 {
  "opcode": "63 / r*",
  "opcode_parsed": [
   "63",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "63"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSXD r32, r/m32",
  "instr_parsed": [
   "MOVSXD",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move doubleword to doubleword with signextension.",
  "page": 842
 },
 {
  "opcode": "REX.W + 63 / r",
  "opcode_parsed": [
   "REX.W",
   "63",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "63"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVSXD r64, r/m32",
  "instr_parsed": [
   "MOVSXD",
   "r64",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move doubleword to quadword with signextension.",
  "page": 842
 },
 {
  "opcode": "0F B6 / r",
  "opcode_parsed": [
   "0F",
   "B6",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVZX r16, r/m8",
  "instr_parsed": [
   "MOVZX",
   "r16",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move byte to word with zero-extension.",
  "page": 852
 },
 {
  "opcode": "0F B6 / r",
  "opcode_parsed": [
   "0F",
   "B6",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVZX r32, r/m8",
  "instr_parsed": [
   "MOVZX",
   "r32",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move byte to doubleword, zero-extension.",
  "page": 852
 },
 {
  "opcode": "REX.W + 0F B6 / r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "B6",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVZX r64, r/m8*",
  "instr_parsed": [
   "MOVZX",
   "r64",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move byte to quadword, zero-extension.",
  "page": 852
 },
 {
  "opcode": "0F B7 / r",
  "opcode_parsed": [
   "0F",
   "B7",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVZX r32, r/m16",
  "instr_parsed": [
   "MOVZX",
   "r32",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move word to doubleword, zero-extension.",
  "page": 852
 },
 {
  "opcode": "REX.W + 0F B7 / r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "B7",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MOVZX r64, r/m16",
  "instr_parsed": [
   "MOVZX",
   "r64",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move word to quadword, zero-extension.",
  "page": 852
 },
 {
  "opcode": "F6 /4",
  "opcode_parsed": [
   "F6",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MUL r/m8",
  "instr_parsed": [
   "MUL",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned multiply (AX := AL ∗  r/m8 ).",
  "page": 862
 },
 {
  "opcode": "REX + F6 /4",
  "opcode_parsed": [
   "REX",
   "F6",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MUL r/m8 *",
  "instr_parsed": [
   "MUL",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned multiply (AX := AL ∗  r/m8 ).",
  "page": 862
 },
 {
  "opcode": "F7 /4",
  "opcode_parsed": [
   "F7",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MUL r/m16",
  "instr_parsed": [
   "MUL",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned multiply (DX:AX := AX ∗  r/m16 ).",
  "page": 862
 },
 {
  "opcode": "F7 /4",
  "opcode_parsed": [
   "F7",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MUL r/m32",
  "instr_parsed": [
   "MUL",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned multiply (EDX:EAX := EAX ∗  r/m32 ).",
  "page": 862
 },
 {
  "opcode": "REX.W + F7 /4",
  "opcode_parsed": [
   "REX.W",
   "F7",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MUL r/m64",
  "instr_parsed": [
   "MUL",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned multiply (RDX:RAX := RAX ∗  r/m64).",
  "page": 862
 },
 {
  "opcode": "0F 01 C9",
  "opcode_parsed": [
   "0F",
   "01",
   "C9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "MWAIT",
  "instr_parsed": [
   "MWAIT"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "A hint that allows the processor to stop instruction execution and enter an implementation-dependent optimized state until occurrence of a class of events.",
  "page": 876
 },
 {
  "opcode": "F6 /3",
  "opcode_parsed": [
   "F6",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NEG r/m8",
  "instr_parsed": [
   "NEG",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Two's complement negate r/m8.",
  "page": 879
 },
 {
  "opcode": "REX + F6 /3",
  "opcode_parsed": [
   "REX",
   "F6",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NEG r/m8*",
  "instr_parsed": [
   "NEG",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Two's complement negate r/m8.",
  "page": 879
 },
 {
  "opcode": "F7 /3",
  "opcode_parsed": [
   "F7",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NEG r/m16",
  "instr_parsed": [
   "NEG",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Two's complement negate r/m16.",
  "page": 879
 },
 {
  "opcode": "F7 /3",
  "opcode_parsed": [
   "F7",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NEG r/m32",
  "instr_parsed": [
   "NEG",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Two's complement negate r/m32.",
  "page": 879
 },
 {
  "opcode": "REX.W + F7 /3",
  "opcode_parsed": [
   "REX.W",
   "F7",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NEG r/m64",
  "instr_parsed": [
   "NEG",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Two's complement negate r/m64.",
  "page": 879
 },
 {
  "opcode": "NP 90",
  "opcode_parsed": [
   "NP",
   "90"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "90"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOP",
  "instr_parsed": [
   "NOP"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "One byte no-operation instruction.",
  "page": 881
 },
 {
  "opcode": "NP 0F 1F /0",
  "opcode_parsed": [
   "NP",
   "0F",
   "1F",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "1F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOP r/m16",
  "instr_parsed": [
   "NOP",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multi-byte no-operation instruction.",
  "page": 881
 },
 {
  "opcode": "NP 0F 1F /0",
  "opcode_parsed": [
   "NP",
   "0F",
   "1F",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "1F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOP r/m32",
  "instr_parsed": [
   "NOP",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multi-byte no-operation instruction.",
  "page": 881
 },
 {
  "opcode": "F6 /2",
  "opcode_parsed": [
   "F6",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOT r/m8",
  "instr_parsed": [
   "NOT",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Reverse  each  bit  of r/m8.",
  "page": 882
 },
 {
  "opcode": "REX + F6 /2",
  "opcode_parsed": [
   "REX",
   "F6",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOT r/m8*",
  "instr_parsed": [
   "NOT",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Reverse  each  bit  of r/m8.",
  "page": 882
 },
 {
  "opcode": "F7 /2",
  "opcode_parsed": [
   "F7",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOT r/m16",
  "instr_parsed": [
   "NOT",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Reverse  each  bit  of r/m16.",
  "page": 882
 },
 {
  "opcode": "F7 /2",
  "opcode_parsed": [
   "F7",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOT r/m32",
  "instr_parsed": [
   "NOT",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Reverse  each  bit  of r/m32.",
  "page": 882
 },
 {
  "opcode": "REX.W + F7 /2",
  "opcode_parsed": [
   "REX.W",
   "F7",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "NOT r/m64",
  "instr_parsed": [
   "NOT",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Reverse  each  bit  of r/m64.",
  "page": 882
 },
 {
  "opcode": "0C ib",
  "opcode_parsed": [
   "0C",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR AL, i mm8",
  "instr_parsed": [
   "OR",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AL  OR imm8.",
  "page": 884
 },
 {
  "opcode": "0D iw",
  "opcode_parsed": [
   "0D",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "OR AX, i mm16",
  "instr_parsed": [
   "OR",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AX  OR imm16.",
  "page": 884
 },
 {
  "opcode": "0D id",
  "opcode_parsed": [
   "0D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "OR EAX, i mm32",
  "instr_parsed": [
   "OR",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "EAX  OR imm32.",
  "page": 884
 },
 {
  "opcode": "REX.W + 0D id",
  "opcode_parsed": [
   "REX.W",
   "0D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "OR RAX, i mm32",
  "instr_parsed": [
   "OR",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "RAX  OR imm32 (sign-extended).",
  "page": 884
 },
 {
  "opcode": "80 /1 ib",
  "opcode_parsed": [
   "80",
   "/1",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m8, imm8",
  "instr_parsed": [
   "OR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m8 OR imm8.",
  "page": 884
 },
 {
  "opcode": "REX + 80 /1 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/1",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m8*, imm8",
  "instr_parsed": [
   "OR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m8 OR imm8.",
  "page": 884
 },
 {
  "opcode": "81 /1 iw",
  "opcode_parsed": [
   "81",
   "/1",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "OR r/m16, imm16",
  "instr_parsed": [
   "OR",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": " r/m16 OR imm16.",
  "page": 884
 },
 {
  "opcode": "81 /1 id",
  "opcode_parsed": [
   "81",
   "/1",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "OR r/m32, imm32",
  "instr_parsed": [
   "OR",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": " r/m32 OR imm32.",
  "page": 884
 },
 {
  "opcode": "REX.W + 81 /1 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/1",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "OR r/m64, imm32",
  "instr_parsed": [
   "OR",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": " r/m64 OR imm32 (sign-extended).",
  "page": 884
 },
 {
  "opcode": "83 /1 ib",
  "opcode_parsed": [
   "83",
   "/1",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m16, imm8",
  "instr_parsed": [
   "OR",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 OR imm8 (sign-extended).",
  "page": 884
 },
 {
  "opcode": "83 /1 ib",
  "opcode_parsed": [
   "83",
   "/1",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m32, imm8",
  "instr_parsed": [
   "OR",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 OR imm8 (sign-extended).",
  "page": 884
 },
 {
  "opcode": "REX.W + 83 /1 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/1",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m64, imm8",
  "instr_parsed": [
   "OR",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 OR imm8 (sign-extended).",
  "page": 884
 },
 {
  "opcode": "08 / r",
  "opcode_parsed": [
   "08",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "08"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m8, r8",
  "instr_parsed": [
   "OR",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m8 OR r8.",
  "page": 884
 },
 {
  "opcode": "REX + 08 / r",
  "opcode_parsed": [
   "REX",
   "08",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "08"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m8*, r8*",
  "instr_parsed": [
   "OR",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m8 OR r8.",
  "page": 884
 },
 {
  "opcode": "09 / r",
  "opcode_parsed": [
   "09",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "09"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m16, r16",
  "instr_parsed": [
   "OR",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 OR r16.",
  "page": 884
 },
 {
  "opcode": "09 / r",
  "opcode_parsed": [
   "09",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "09"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m32, r32",
  "instr_parsed": [
   "OR",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 OR r32.",
  "page": 884
 },
 {
  "opcode": "REX.W + 09 / r",
  "opcode_parsed": [
   "REX.W",
   "09",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "09"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r/m64, r64",
  "instr_parsed": [
   "OR",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 OR r64.",
  "page": 884
 },
 {
  "opcode": "0A / r",
  "opcode_parsed": [
   "0A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r8, r/m8",
  "instr_parsed": [
   "OR",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r8 OR r/m8.",
  "page": 884
 },
 {
  "opcode": "REX + 0A / r",
  "opcode_parsed": [
   "REX",
   "0A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r8*, r/m8*",
  "instr_parsed": [
   "OR",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r8 OR r/m8.",
  "page": 884
 },
 {
  "opcode": "0B / r",
  "opcode_parsed": [
   "0B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r16, r/m16",
  "instr_parsed": [
   "OR",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r16 OR r/m16.",
  "page": 884
 },
 {
  "opcode": "0B / r",
  "opcode_parsed": [
   "0B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r32, r/m32",
  "instr_parsed": [
   "OR",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r32 OR r/m32.",
  "page": 884
 },
 {
  "opcode": "REX.W + 0B / r",
  "opcode_parsed": [
   "REX.W",
   "0B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OR r64, r/m64",
  "instr_parsed": [
   "OR",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r64 OR r/m64.",
  "page": 884
 },
 {
  "opcode": "E6 ib",
  "opcode_parsed": [
   "E6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUT imm8 , AL",
  "instr_parsed": [
   "OUT",
   "imm8",
   "AL"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output byte in AL to I/O port address imm8 .",
  "page": 892
 },
 {
  "opcode": "E7 ib",
  "opcode_parsed": [
   "E7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUT imm8 , AX",
  "instr_parsed": [
   "OUT",
   "imm8",
   "AX"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output word in AX to I/O port address imm8. ",
  "page": 892
 },
 {
  "opcode": "E7 ib",
  "opcode_parsed": [
   "E7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "E7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUT imm8 , EAX",
  "instr_parsed": [
   "OUT",
   "imm8",
   "EAX"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output doubleword in EAX to I/O port address imm8 .",
  "page": 892
 },
 {
  "opcode": "EE",
  "opcode_parsed": [
   "EE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUT DX, AL",
  "instr_parsed": [
   "OUT",
   "DX",
   "AL"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output byte in AL to I/O port address in DX.",
  "page": 892
 },
 {
  "opcode": "EF",
  "opcode_parsed": [
   "EF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUT DX, AX",
  "instr_parsed": [
   "OUT",
   "DX",
   "AX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output word in AX to I/O port address in DX.",
  "page": 892
 },
 {
  "opcode": "EF",
  "opcode_parsed": [
   "EF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUT DX, EAX",
  "instr_parsed": [
   "OUT",
   "DX",
   "EAX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output doubleword in EAX to I/O port address in DX.",
  "page": 892
 },
 {
  "opcode": "6E",
  "opcode_parsed": [
   "6E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUTS DX, m8",
  "instr_parsed": [
   "OUTS",
   "DX",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output byte from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.",
  "page": 894
 },
 {
  "opcode": "6F",
  "opcode_parsed": [
   "6F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUTS DX, m16",
  "instr_parsed": [
   "OUTS",
   "DX",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output word from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.",
  "page": 894
 },
 {
  "opcode": "6F",
  "opcode_parsed": [
   "6F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUTS DX, m32",
  "instr_parsed": [
   "OUTS",
   "DX",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output doubleword from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.",
  "page": 894
 },
 {
  "opcode": "6E",
  "opcode_parsed": [
   "6E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUTSB",
  "instr_parsed": [
   "OUTSB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output byte from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.",
  "page": 894
 },
 {
  "opcode": "6F",
  "opcode_parsed": [
   "6F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUTSW",
  "instr_parsed": [
   "OUTSW"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output word from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.",
  "page": 894
 },
 {
  "opcode": "6F",
  "opcode_parsed": [
   "6F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "OUTSD",
  "instr_parsed": [
   "OUTSD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output doubleword from memory location specified in DS:(E)SI or RSI to I/O port specified in DX**.",
  "page": 894
 },
 {
  "opcode": "F3 90",
  "opcode_parsed": [
   "F3",
   "90"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "90"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PAUSE",
  "instr_parsed": [
   "PAUSE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Gives hint to processor that improves performance of spin-wait loops.",
  "page": 947
 },
 {
  "opcode": "66 0F 3A 44 /r ib",
  "opcode_parsed": [
   "66",
   "0F",
   "3A",
   "44",
   "/r",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "3A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PCLMULQDQ xmm1, xmm2/m128, imm8",
  "instr_parsed": [
   "PCLMULQDQ",
   "xmm1",
   "xmm2/m128",
   "imm8"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "PCLMULQDQ",
  "description": "Carry-less multiplication of one quadword of xmm1 by one quadword of xmm2/m128 , stores the 128-bit result in xmm1 . The immediate is used to determine which quadwords of xmm1 and xmm2/m128 should be used.",
  "page": 959
 },
 {
  "opcode": "VEX.128.66.0F3A.WIG 44 /r ib",
  "opcode_parsed": [
   "VEX.128.66.0F3A.WIG",
   "44",
   "/r",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F3A.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8",
  "instr_parsed": [
   "VPCLMULQDQ",
   "xmm1",
   "xmm2",
   "xmm3/m128",
   "imm8"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "PCLMULQDQ",
  "description": "Carry-less multiplication of one quadword of xmm2 by one quadword of xmm3/m128 , stores the 128-bit result in xmm1 . The immediate is used to determine which quadwords of xmm2 and xmm3/m128 should be used.",
  "page": 959
 },
 {
  "opcode": "VEX.256.66.0F3A.WIG 44 /r /ib",
  "opcode_parsed": [
   "VEX.256.66.0F3A.WIG",
   "44",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.66.0F3A.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8",
  "instr_parsed": [
   "VPCLMULQDQ",
   "ymm1",
   "ymm2",
   "ymm3/m256",
   "imm8"
  ],
  "op_en": "B",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "VPCLMULQDQ Carry-less multiplication of one quadword of",
  "description": "ymm2 by one quadword of ymm3/m256, stores the 128-bit result in ymm1. The immediate is used to determine which quadwords of ymm2 and ymm3/m256 should be used.",
  "page": 959
 },
 {
  "opcode": "EVEX.128.66.0F3A.WIG 44 /r /ib",
  "opcode_parsed": [
   "EVEX.128.66.0F3A.WIG",
   "44",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F3A.WIG"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8",
  "instr_parsed": [
   "VPCLMULQDQ",
   "xmm1",
   "xmm2",
   "xmm3/m128",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "VPCLMULQDQ",
  "description": "Carry-less multiplication of one quadword of xmm2 by one quadword of xmm3/m128, stores the 128-bit result in xmm1. The immediate is used to determine which quadwords of xmm2 and xmm3/m128 should be used.",
  "page": 959
 },
 {
  "opcode": "EVEX.256.66.0F3A.WIG 44 /r /ib",
  "opcode_parsed": [
   "EVEX.256.66.0F3A.WIG",
   "44",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.256.66.0F3A.WIG"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8",
  "instr_parsed": [
   "VPCLMULQDQ",
   "ymm1",
   "ymm2",
   "ymm3/m256",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "VPCLMULQDQ",
  "description": "Carry-less multiplication of one quadword of ymm2 by one quadword of ymm3/m256, stores the 128-bit result in ymm1. The immediate is used to determine which quadwords of ymm2 and ymm3/m256 should be used.",
  "page": 959
 },
 {
  "opcode": "EVEX.512.66.0F3A.WIG 44 /r /ib",
  "opcode_parsed": [
   "EVEX.512.66.0F3A.WIG",
   "44",
   "/r",
   "/ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.512.66.0F3A.WIG"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "44"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8",
  "instr_parsed": [
   "VPCLMULQDQ",
   "zmm1",
   "zmm2",
   "zmm3/m512",
   "imm8"
  ],
  "op_en": "C",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "VPCLMULQDQ",
  "description": "Carry-less multiplication of one quadword of zmm2 by one quadword of zmm3/m512, stores the 128-bit result in zmm1. The immediate is used to determine which quadwords of zmm2 and zmm3/m512 should be used.",
  "page": 959
 },
 {
  "opcode": "NP 0F 01 C5",
  "opcode_parsed": [
   "NP",
   "0F",
   "01",
   "C5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PCONFIG",
  "instr_parsed": [
   "PCONFIG"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "PCONFIG",
  "description": "This instruction is used to execute functions for configuring platform features.",
  "page": 989
 },
 {
  "opcode": "66 0F 38 41 /r",
  "opcode_parsed": [
   "66",
   "0F",
   "38",
   "41",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "41"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PHMINPOSUW xmm1, xmm2/m128",
  "instr_parsed": [
   "PHMINPOSUW",
   "xmm1",
   "xmm2/m128"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE4_1",
  "description": "Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the secondlowest word of xmm1 .",
  "page": 1012
 },
 {
  "opcode": "VEX.128.66.0F38.WIG 41 /r",
  "opcode_parsed": [
   "VEX.128.66.0F38.WIG",
   "41",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F38.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "41"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPHMINPOSUW xmm1, xmm2/m128",
  "instr_parsed": [
   "VPHMINPOSUW",
   "xmm1",
   "xmm2/m128"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Find the minimum unsigned word in xmm2/m128 and place its value in the low word of xmm1 and its index in the secondlowest word of xmm1 .",
  "page": 1012
 },
 {
  "opcode": "8F /0",
  "opcode_parsed": [
   "8F",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP r/ m16",
  "instr_parsed": [
   "POP",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into m16 ; increment stack pointer.",
  "page": 1110
 },
 {
  "opcode": "8F /0",
  "opcode_parsed": [
   "8F",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP r/ m32",
  "instr_parsed": [
   "POP",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into m32 ; increment stack pointer.",
  "page": 1110
 },
 {
  "opcode": "8F /0",
  "opcode_parsed": [
   "8F",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "8F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP r/ m64",
  "instr_parsed": [
   "POP",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Pop top of stack into m64 ; increment stack pointer. Cannot encode 32-bit operand size.",
  "page": 1110
 },
 {
  "opcode": "58+ rw",
  "opcode_parsed": [
   "58",
   "+rw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "58",
     "+rw"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP r16",
  "instr_parsed": [
   "POP",
   "r16"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into r16 ; increment stack pointer.",
  "page": 1110
 },
 {
  "opcode": "58+ rd",
  "opcode_parsed": [
   "58",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "58",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP r32",
  "instr_parsed": [
   "POP",
   "r32"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into r32 ; increment stack pointer.",
  "page": 1110
 },
 {
  "opcode": "58+ rd",
  "opcode_parsed": [
   "58",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "58",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP r64",
  "instr_parsed": [
   "POP",
   "r64"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Pop top of stack into r64 ; increment stack pointer. Cannot encode 32-bit operand size.",
  "page": 1110
 },
 {
  "opcode": "1F",
  "opcode_parsed": [
   "1F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP DS",
  "instr_parsed": [
   "POP",
   "DS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into DS; increment stack pointer.",
  "page": 1110
 },
 {
  "opcode": "07",
  "opcode_parsed": [
   "07"
  ],
  "opcode_bytes": [
   {
    "components": [
     "07"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP ES",
  "instr_parsed": [
   "POP",
   "ES"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into ES; increment stack pointer.",
  "page": 1110
 },
 {
  "opcode": "17",
  "opcode_parsed": [
   "17"
  ],
  "opcode_bytes": [
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP SS",
  "instr_parsed": [
   "POP",
   "SS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into SS; increment stack pointer.",
  "page": 1110
 },
 {
  "opcode": "0F A1",
  "opcode_parsed": [
   "0F",
   "A1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP FS",
  "instr_parsed": [
   "POP",
   "FS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into FS; increment stack pointer by 16 bits.",
  "page": 1110
 },
 {
  "opcode": "0F A1",
  "opcode_parsed": [
   "0F",
   "A1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP FS",
  "instr_parsed": [
   "POP",
   "FS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into FS; increment stack pointer by 32 bits.",
  "page": 1110
 },
 {
  "opcode": "0F A1",
  "opcode_parsed": [
   "0F",
   "A1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP FS",
  "instr_parsed": [
   "POP",
   "FS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Pop top of stack into FS; increment stack pointer by 64 bits.",
  "page": 1110
 },
 {
  "opcode": "0F A9",
  "opcode_parsed": [
   "0F",
   "A9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP GS",
  "instr_parsed": [
   "POP",
   "GS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into GS; increment stack pointer by 16 bits.",
  "page": 1110
 },
 {
  "opcode": "0F A9",
  "opcode_parsed": [
   "0F",
   "A9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP GS",
  "instr_parsed": [
   "POP",
   "GS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into GS; increment stack pointer by 32 bits.",
  "page": 1110
 },
 {
  "opcode": "0F A9",
  "opcode_parsed": [
   "0F",
   "A9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POP GS",
  "instr_parsed": [
   "POP",
   "GS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Pop top of stack into GS; increment stack pointer by 64 bits.",
  "page": 1110
 },
 {
  "opcode": "61",
  "opcode_parsed": [
   "61"
  ],
  "opcode_bytes": [
   {
    "components": [
     "61"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPA",
  "instr_parsed": [
   "POPA"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop DI, SI, BP, BX, DX, CX, and AX.",
  "page": 1115
 },
 {
  "opcode": "61",
  "opcode_parsed": [
   "61"
  ],
  "opcode_bytes": [
   {
    "components": [
     "61"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPAD",
  "instr_parsed": [
   "POPAD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX.",
  "page": 1115
 },
 {
  "opcode": "F3 0F B8 /r",
  "opcode_parsed": [
   "F3",
   "0F",
   "B8",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPCNT r16, r/m16",
  "instr_parsed": [
   "POPCNT",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "POPCNT on r/m16",
  "page": 1117
 },
 {
  "opcode": "F3 0F B8 /r",
  "opcode_parsed": [
   "F3",
   "0F",
   "B8",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPCNT r32, r/m32",
  "instr_parsed": [
   "POPCNT",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "POPCNT on r/m32",
  "page": 1117
 },
 {
  "opcode": "F3 REX.W 0F B8 /r",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "0F",
   "B8",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPCNT r64, r/m64",
  "instr_parsed": [
   "POPCNT",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "POPCNT on r/m64",
  "page": 1117
 },
 {
  "opcode": "9D",
  "opcode_parsed": [
   "9D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPF",
  "instr_parsed": [
   "POPF"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into lower 16 bits of EFLAGS.",
  "page": 1119
 },
 {
  "opcode": "9D",
  "opcode_parsed": [
   "9D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPFD",
  "instr_parsed": [
   "POPFD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Pop top of stack into EFLAGS.",
  "page": 1119
 },
 {
  "opcode": "9D",
  "opcode_parsed": [
   "9D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "POPFQ",
  "instr_parsed": [
   "POPFQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Pop top of stack and zero-extend into RFLAGS.",
  "page": 1119
 },
 {
  "opcode": "0F 18 /1",
  "opcode_parsed": [
   "0F",
   "18",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "18"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PREFETCHT0 m8",
  "instr_parsed": [
   "PREFETCHT0",
   "m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move  data  from m8 closer to the processor using T0 hint.",
  "page": 1126
 },
 {
  "opcode": "0F 18 /2",
  "opcode_parsed": [
   "0F",
   "18",
   "/2"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "18"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/2"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PREFETCHT1 m8",
  "instr_parsed": [
   "PREFETCHT1",
   "m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move  data  from m8 closer to the processor using T1 hint.",
  "page": 1126
 },
 {
  "opcode": "0F 18 /3",
  "opcode_parsed": [
   "0F",
   "18",
   "/3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "18"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PREFETCHT2 m8",
  "instr_parsed": [
   "PREFETCHT2",
   "m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move  data  from m8 closer to the processor using T2 hint.",
  "page": 1126
 },
 {
  "opcode": "0F 18 /0",
  "opcode_parsed": [
   "0F",
   "18",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "18"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PREFETCHNTA m8",
  "instr_parsed": [
   "PREFETCHNTA",
   "m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move  data  from m8 closer to the processor using NTA hint.",
  "page": 1126
 },
 {
  "opcode": "0F 0D /1",
  "opcode_parsed": [
   "0F",
   "0D",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PREFETCHW m8",
  "instr_parsed": [
   "PREFETCHW",
   "m8"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "PREFETCHW",
  "description": "Move data from m8 closer to the processor in anticipation of a write.",
  "page": 1128
 },
 {
  "opcode": "66 0F 38 17 /r",
  "opcode_parsed": [
   "66",
   "0F",
   "38",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "66"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "38"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PTEST xmm1, xmm2/m128",
  "instr_parsed": [
   "PTEST",
   "xmm1",
   "xmm2/m128"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SSE4_1",
  "description": "Set ZF if xmm2/m128 AND xmm1 result is all 0s. Set CF if xmm2/m128 AND NOT xmm1  result is all 0s.",
  "page": 1209
 },
 {
  "opcode": "VEX.128.66.0F38.WIG 17 /r",
  "opcode_parsed": [
   "VEX.128.66.0F38.WIG",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F38.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPTEST xmm1, xmm2/m128",
  "instr_parsed": [
   "VPTEST",
   "xmm1",
   "xmm2/m128"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Set ZF and CF depending on bitwise AND and ANDN of sources.",
  "page": 1209
 },
 {
  "opcode": "VEX.256.66.0F38.WIG 17 /r",
  "opcode_parsed": [
   "VEX.256.66.0F38.WIG",
   "17",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.66.0F38.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "17"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPTEST ymm1, ymm2/m256",
  "instr_parsed": [
   "VPTEST",
   "ymm1",
   "ymm2/m256"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Set ZF and CF depending on bitwise AND and ANDN of sources.",
  "page": 1209
 },
 {
  "opcode": "FF /6",
  "opcode_parsed": [
   "FF",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH r/m16",
  "instr_parsed": [
   "PUSH",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push r/m16.",
  "page": 1233
 },
 {
  "opcode": "FF /6",
  "opcode_parsed": [
   "FF",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH r/m32",
  "instr_parsed": [
   "PUSH",
   "r/m32"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push r/m32.",
  "page": 1233
 },
 {
  "opcode": "FF /6",
  "opcode_parsed": [
   "FF",
   "/6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH r/m64",
  "instr_parsed": [
   "PUSH",
   "r/m64"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Push r/m64. ",
  "page": 1233
 },
 {
  "opcode": "50+ rw",
  "opcode_parsed": [
   "50",
   "+rw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "50",
     "+rw"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH r16",
  "instr_parsed": [
   "PUSH",
   "r16"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push r16.",
  "page": 1233
 },
 {
  "opcode": "50+ rd",
  "opcode_parsed": [
   "50",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "50",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH r32",
  "instr_parsed": [
   "PUSH",
   "r32"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push r32.",
  "page": 1233
 },
 {
  "opcode": "50+ rd",
  "opcode_parsed": [
   "50",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "50",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH r64",
  "instr_parsed": [
   "PUSH",
   "r64"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Push r64.",
  "page": 1233
 },
 {
  "opcode": "6A ib",
  "opcode_parsed": [
   "6A",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "6A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH imm8",
  "instr_parsed": [
   "PUSH",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push imm8.",
  "page": 1233
 },
 {
  "opcode": "68 iw",
  "opcode_parsed": [
   "68",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "68"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "PUSH imm16",
  "instr_parsed": [
   "PUSH",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push imm16.",
  "page": 1233
 },
 {
  "opcode": "68 id",
  "opcode_parsed": [
   "68",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "68"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "PUSH imm32",
  "instr_parsed": [
   "PUSH",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push imm32.",
  "page": 1233
 },
 {
  "opcode": "0E",
  "opcode_parsed": [
   "0E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH CS",
  "instr_parsed": [
   "PUSH",
   "CS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push CS.",
  "page": 1233
 },
 {
  "opcode": "16",
  "opcode_parsed": [
   "16"
  ],
  "opcode_bytes": [
   {
    "components": [
     "16"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH SS",
  "instr_parsed": [
   "PUSH",
   "SS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push SS.",
  "page": 1233
 },
 {
  "opcode": "1E",
  "opcode_parsed": [
   "1E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH DS",
  "instr_parsed": [
   "PUSH",
   "DS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push DS.",
  "page": 1233
 },
 {
  "opcode": "06",
  "opcode_parsed": [
   "06"
  ],
  "opcode_bytes": [
   {
    "components": [
     "06"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH ES",
  "instr_parsed": [
   "PUSH",
   "ES"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push ES.",
  "page": 1233
 },
 {
  "opcode": "0F A0",
  "opcode_parsed": [
   "0F",
   "A0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH FS",
  "instr_parsed": [
   "PUSH",
   "FS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push FS.",
  "page": 1233
 },
 {
  "opcode": "0F A8",
  "opcode_parsed": [
   "0F",
   "A8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSH GS",
  "instr_parsed": [
   "PUSH",
   "GS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push GS.",
  "page": 1233
 },
 {
  "opcode": "60",
  "opcode_parsed": [
   "60"
  ],
  "opcode_bytes": [
   {
    "components": [
     "60"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSHA",
  "instr_parsed": [
   "PUSHA"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push AX, CX, DX, BX, original SP, BP, SI, and DI.",
  "page": 1236
 },
 {
  "opcode": "60",
  "opcode_parsed": [
   "60"
  ],
  "opcode_bytes": [
   {
    "components": [
     "60"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSHAD",
  "instr_parsed": [
   "PUSHAD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI.",
  "page": 1236
 },
 {
  "opcode": "9C",
  "opcode_parsed": [
   "9C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSHF",
  "instr_parsed": [
   "PUSHF"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push lower 16 bits of EFLAGS.",
  "page": 1238
 },
 {
  "opcode": "9C",
  "opcode_parsed": [
   "9C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSHFD",
  "instr_parsed": [
   "PUSHFD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Push EFLAGS.",
  "page": 1238
 },
 {
  "opcode": "9C",
  "opcode_parsed": [
   "9C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "PUSHFQ",
  "instr_parsed": [
   "PUSHFQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Push RFLAGS.",
  "page": 1238
 },
 {
  "opcode": "0F 32",
  "opcode_parsed": [
   "0F",
   "32"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "32"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "RDMSR",
  "instr_parsed": [
   "RDMSR"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Read MSR specified by ECX into EDX:EAX.",
  "page": 1254
 },
 {
  "opcode": "0F 33",
  "opcode_parsed": [
   "0F",
   "33"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "33"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "RDPMC",
  "instr_parsed": [
   "RDPMC"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Read performance-monitoring counter specified by ECX into EDX:EAX.",
  "page": 1259
 },
 {
  "opcode": "0F 31",
  "opcode_parsed": [
   "0F",
   "31"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "31"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "RDTSC",
  "instr_parsed": [
   "RDTSC"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Read time-stamp counter into EDX:EAX.",
  "page": 1267
 },
 {
  "opcode": "0F 01 F9",
  "opcode_parsed": [
   "0F",
   "01",
   "F9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "RDTSCP",
  "instr_parsed": [
   "RDTSCP"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Read 64-bit time-stamp counter and IA32_TSC_AUX value into EDX:EAX and ECX.",
  "page": 1269
 },
 {
  "opcode": "F3 6C",
  "opcode_parsed": [
   "F3",
   "6C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP INS m8 , DX",
  "instr_parsed": [
   "REP",
   "INS",
   "m8",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input (E)CX bytes from port DX into ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 6C",
  "opcode_parsed": [
   "F3",
   "6C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP INS m8 , DX",
  "instr_parsed": [
   "REP",
   "INS",
   "m8",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Input RCX bytes from port DX into [RDI].",
  "page": 1271
 },
 {
  "opcode": "F3 6D",
  "opcode_parsed": [
   "F3",
   "6D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP INS m16 , DX",
  "instr_parsed": [
   "REP",
   "INS",
   "m16",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input (E)CX words from port DX into ES:[(E)DI.]",
  "page": 1271
 },
 {
  "opcode": "F3 6D",
  "opcode_parsed": [
   "F3",
   "6D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP INS m32 , DX",
  "instr_parsed": [
   "REP",
   "INS",
   "m32",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Input (E)CX doublewords from port DX into ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 6D",
  "opcode_parsed": [
   "F3",
   "6D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP INS r/m32 , DX",
  "instr_parsed": [
   "REP",
   "INS",
   "r/m32",
   "DX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Input RCX default size from port DX into [RDI].",
  "page": 1271
 },
 {
  "opcode": "F3 A4",
  "opcode_parsed": [
   "F3",
   "A4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP MOVS m8, m8",
  "instr_parsed": [
   "REP",
   "MOVS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W A4",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "A4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A4"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP MOVS m8, m8",
  "instr_parsed": [
   "REP",
   "MOVS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move RCX bytes from [RSI] to [RDI].",
  "page": 1271
 },
 {
  "opcode": "F3 A5",
  "opcode_parsed": [
   "F3",
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP MOVS m16, m16",
  "instr_parsed": [
   "REP",
   "MOVS",
   "m16",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 A5",
  "opcode_parsed": [
   "F3",
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP MOVS m32, m32",
  "instr_parsed": [
   "REP",
   "MOVS",
   "m32",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W A5",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "A5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A5"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP MOVS m64, m64",
  "instr_parsed": [
   "REP",
   "MOVS",
   "m64",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Move RCX quadwords from [RSI] to [RDI].",
  "page": 1271
 },
 {
  "opcode": "F3 6E",
  "opcode_parsed": [
   "F3",
   "6E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP OUTS DX, r/m8",
  "instr_parsed": [
   "REP",
   "OUTS",
   "DX",
   "r/m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output (E)CX bytes from DS:[(E)SI] to port DX.",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W 6E",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "6E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP OUTS DX, r/m8*",
  "instr_parsed": [
   "REP",
   "OUTS",
   "DX",
   "r/m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Output RCX bytes from [RSI] to port DX.",
  "page": 1271
 },
 {
  "opcode": "F3 6F",
  "opcode_parsed": [
   "F3",
   "6F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP OUTS DX, r/m16",
  "instr_parsed": [
   "REP",
   "OUTS",
   "DX",
   "r/m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output (E)CX words from DS:[(E)SI] to port DX.",
  "page": 1271
 },
 {
  "opcode": "F3 6F",
  "opcode_parsed": [
   "F3",
   "6F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP OUTS DX, r/m32",
  "instr_parsed": [
   "REP",
   "OUTS",
   "DX",
   "r/m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Output (E)CX doublewords from DS:[(E)SI] to port DX.",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W 6F",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "6F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "6F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP OUTS DX, r/m32",
  "instr_parsed": [
   "REP",
   "OUTS",
   "DX",
   "r/m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Output RCX default size from [RSI] to port DX.",
  "page": 1271
 },
 {
  "opcode": "F3 AC",
  "opcode_parsed": [
   "F3",
   "AC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP LODS AL",
  "instr_parsed": [
   "REP",
   "LODS",
   "AL"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load (E)CX bytes from DS:[(E)SI] to AL.",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W AC",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "AC"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AC"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP LODS AL",
  "instr_parsed": [
   "REP",
   "LODS",
   "AL"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load RCX bytes from [RSI] to AL.",
  "page": 1271
 },
 {
  "opcode": "F3 AD",
  "opcode_parsed": [
   "F3",
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP LODS AX",
  "instr_parsed": [
   "REP",
   "LODS",
   "AX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load (E)CX words from DS:[(E)SI] to AX.",
  "page": 1271
 },
 {
  "opcode": "F3 AD",
  "opcode_parsed": [
   "F3",
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP LODS EAX",
  "instr_parsed": [
   "REP",
   "LODS",
   "EAX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Load (E)CX doublewords from DS:[(E)SI] to EAX.",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W AD",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "AD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP LODS RAX",
  "instr_parsed": [
   "REP",
   "LODS",
   "RAX"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Load RCX quadwords from [RSI] to RAX.",
  "page": 1271
 },
 {
  "opcode": "F3 AA",
  "opcode_parsed": [
   "F3",
   "AA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP STOS m8",
  "instr_parsed": [
   "REP",
   "STOS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Fill (E)CX bytes at ES:[(E)DI] with AL.",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W AA",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "AA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP STOS m8",
  "instr_parsed": [
   "REP",
   "STOS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Fill RCX bytes at [RDI] with AL.",
  "page": 1271
 },
 {
  "opcode": "F3 AB",
  "opcode_parsed": [
   "F3",
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP STOS m16",
  "instr_parsed": [
   "REP",
   "STOS",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Fill (E)CX words at ES:[(E)DI] with AX.",
  "page": 1271
 },
 {
  "opcode": "F3 AB",
  "opcode_parsed": [
   "F3",
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP STOS m32",
  "instr_parsed": [
   "REP",
   "STOS",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX.",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W AB",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REP STOS m64",
  "instr_parsed": [
   "REP",
   "STOS",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Fill RCX quadwords at [RDI] with RAX.",
  "page": 1271
 },
 {
  "opcode": "F3 A6",
  "opcode_parsed": [
   "F3",
   "A6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE CMPS m8, m8",
  "instr_parsed": [
   "REPE",
   "CMPS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W A6",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "A6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE CMPS m8, m8",
  "instr_parsed": [
   "REPE",
   "CMPS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find non-matching bytes in [RDI] and [RSI].",
  "page": 1271
 },
 {
  "opcode": "F3 A7",
  "opcode_parsed": [
   "F3",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE CMPS m16, m16",
  "instr_parsed": [
   "REPE",
   "CMPS",
   "m16",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1271
 },
 {
  "opcode": "F3 A7",
  "opcode_parsed": [
   "F3",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE CMPS m32, m32",
  "instr_parsed": [
   "REPE",
   "CMPS",
   "m32",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W A7",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE CMPS m64, m64",
  "instr_parsed": [
   "REPE",
   "CMPS",
   "m64",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find non-matching quadwords in [RDI] and [RSI].",
  "page": 1271
 },
 {
  "opcode": "F3 AE",
  "opcode_parsed": [
   "F3",
   "AE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE SCAS m8",
  "instr_parsed": [
   "REPE",
   "SCAS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find non-AL byte starting at ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W AE",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "AE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE SCAS m8",
  "instr_parsed": [
   "REPE",
   "SCAS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find non-AL byte starting at [RDI].",
  "page": 1271
 },
 {
  "opcode": "F3 AF",
  "opcode_parsed": [
   "F3",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE SCAS m16",
  "instr_parsed": [
   "REPE",
   "SCAS",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find non-AX word starting at ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 AF",
  "opcode_parsed": [
   "F3",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE SCAS m32",
  "instr_parsed": [
   "REPE",
   "SCAS",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find non-EAX doubleword starting at ES:[(E)DI].",
  "page": 1271
 },
 {
  "opcode": "F3 REX.W AF",
  "opcode_parsed": [
   "F3",
   "REX.W",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPE SCAS m64",
  "instr_parsed": [
   "REPE",
   "SCAS",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find non-RAX quadword starting at [RDI].",
  "page": 1272
 },
 {
  "opcode": "F2 A6",
  "opcode_parsed": [
   "F2",
   "A6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE CMPS m8, m8",
  "instr_parsed": [
   "REPNE",
   "CMPS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find matching bytes in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1272
 },
 {
  "opcode": "F2 REX.W A6",
  "opcode_parsed": [
   "F2",
   "REX.W",
   "A6"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE CMPS m8, m8",
  "instr_parsed": [
   "REPNE",
   "CMPS",
   "m8",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find matching bytes in [RDI] and [RSI].",
  "page": 1272
 },
 {
  "opcode": "F2 A7",
  "opcode_parsed": [
   "F2",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE CMPS m16, m16",
  "instr_parsed": [
   "REPNE",
   "CMPS",
   "m16",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find matching words in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1272
 },
 {
  "opcode": "F2 A7",
  "opcode_parsed": [
   "F2",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE CMPS m32, m32",
  "instr_parsed": [
   "REPNE",
   "CMPS",
   "m32",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find matching doublewords in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1272
 },
 {
  "opcode": "F2 REX.W A7",
  "opcode_parsed": [
   "F2",
   "REX.W",
   "A7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE CMPS m64, m64",
  "instr_parsed": [
   "REPNE",
   "CMPS",
   "m64",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find matching doublewords in [RDI] and [RSI].",
  "page": 1272
 },
 {
  "opcode": "F2 AE",
  "opcode_parsed": [
   "F2",
   "AE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE SCAS m8",
  "instr_parsed": [
   "REPNE",
   "SCAS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find AL, starting at ES:[(E)DI].",
  "page": 1272
 },
 {
  "opcode": "F2 REX.W AE",
  "opcode_parsed": [
   "F2",
   "REX.W",
   "AE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE SCAS m8",
  "instr_parsed": [
   "REPNE",
   "SCAS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find AL, starting at [RDI].",
  "page": 1272
 },
 {
  "opcode": "F2 AF",
  "opcode_parsed": [
   "F2",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE SCAS m16",
  "instr_parsed": [
   "REPNE",
   "SCAS",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find AX, starting at ES:[(E)DI].",
  "page": 1272
 },
 {
  "opcode": "F2 AF",
  "opcode_parsed": [
   "F2",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE SCAS m32",
  "instr_parsed": [
   "REPNE",
   "SCAS",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Find EAX, starting at ES:[(E)DI].",
  "page": 1272
 },
 {
  "opcode": "F2 REX.W AF",
  "opcode_parsed": [
   "F2",
   "REX.W",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "REPNE SCAS m64",
  "instr_parsed": [
   "REPNE",
   "SCAS",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Find RAX, starting at [RDI].",
  "page": 1272
 },
 {
  "opcode": "C3",
  "opcode_parsed": [
   "C3"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "RET",
  "instr_parsed": [
   "RET"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Near return to calling procedure.",
  "page": 1275
 },
 {
  "opcode": "CB",
  "opcode_parsed": [
   "CB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "CB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "RET",
  "instr_parsed": [
   "RET"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Far return to calling procedure.",
  "page": 1275
 },
 {
  "opcode": "C2 iw",
  "opcode_parsed": [
   "C2",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "RET imm16",
  "instr_parsed": [
   "RET",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Near return to calling procedure and pop imm16 bytes from stack.",
  "page": 1275
 },
 {
  "opcode": "CA iw",
  "opcode_parsed": [
   "CA",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "CA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "RET imm16",
  "instr_parsed": [
   "RET",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Far  return  to  calling procedure and pop imm16  bytes from stack.",
  "page": 1275
 },
 {
  "opcode": "0F AA",
  "opcode_parsed": [
   "0F",
   "AA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "RSM",
  "instr_parsed": [
   "RSM"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Resume operation of interrupted program.",
  "page": 1299
 },
 {
  "opcode": "9E",
  "opcode_parsed": [
   "9E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAHF",
  "instr_parsed": [
   "SAHF"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": false,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Loads SF, ZF, AF, PF, and CF from AH into EFLAGS register.",
  "page": 1308
 },
 {
  "opcode": "D0 /4",
  "opcode_parsed": [
   "D0",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m8 , 1",
  "instr_parsed": [
   "SAL",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m8 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "REX + D0 /4",
  "opcode_parsed": [
   "REX",
   "D0",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m8** , 1",
  "instr_parsed": [
   "SAL",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m8 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D2 /4",
  "opcode_parsed": [
   "D2",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m8 , CL",
  "instr_parsed": [
   "SAL",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m8 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "REX + D2 /4",
  "opcode_parsed": [
   "REX",
   "D2",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m8** , CL",
  "instr_parsed": [
   "SAL",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m8 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C0 /4 ib",
  "opcode_parsed": [
   "C0",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m8, imm8",
  "instr_parsed": [
   "SAL",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m8 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "REX + C0 /4 ib",
  "opcode_parsed": [
   "REX",
   "C0",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m8**, imm8",
  "instr_parsed": [
   "SAL",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m8 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "D1 /4",
  "opcode_parsed": [
   "D1",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m16 , 1",
  "instr_parsed": [
   "SAL",
   "r/m16",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m16 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D3 /4",
  "opcode_parsed": [
   "D3",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m16 , CL",
  "instr_parsed": [
   "SAL",
   "r/m16",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m16 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C1 /4 ib",
  "opcode_parsed": [
   "C1",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m16, imm8",
  "instr_parsed": [
   "SAL",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m16 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "D1 /4",
  "opcode_parsed": [
   "D1",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m32 , 1",
  "instr_parsed": [
   "SAL",
   "r/m32",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m32 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "REX.W + D1 /4",
  "opcode_parsed": [
   "REX.W",
   "D1",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m64 , 1",
  "instr_parsed": [
   "SAL",
   "r/m64",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m64 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D3 /4",
  "opcode_parsed": [
   "D3",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m32 , CL",
  "instr_parsed": [
   "SAL",
   "r/m32",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m32 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "REX.W + D3 /4",
  "opcode_parsed": [
   "REX.W",
   "D3",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m64 , CL",
  "instr_parsed": [
   "SAL",
   "r/m64",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m64 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C1 /4 ib",
  "opcode_parsed": [
   "C1",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m32, imm8",
  "instr_parsed": [
   "SAL",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m32 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "REX.W + C1 /4 ib",
  "opcode_parsed": [
   "REX.W",
   "C1",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAL r/m64, imm8",
  "instr_parsed": [
   "SAL",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m64 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "D0 /7",
  "opcode_parsed": [
   "D0",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m8 , 1",
  "instr_parsed": [
   "SAR",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide* r/m8 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "REX + D0 /7",
  "opcode_parsed": [
   "REX",
   "D0",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m8** , 1",
  "instr_parsed": [
   "SAR",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide* r/m8 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D2 /7",
  "opcode_parsed": [
   "D2",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m8 , CL",
  "instr_parsed": [
   "SAR",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide* r/m8 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "REX + D2 /7",
  "opcode_parsed": [
   "REX",
   "D2",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m8** , CL",
  "instr_parsed": [
   "SAR",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide* r/m8 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C0 /7 ib",
  "opcode_parsed": [
   "C0",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m8, imm8",
  "instr_parsed": [
   "SAR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide* r/m8 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "REX + C0 /7 ib",
  "opcode_parsed": [
   "REX",
   "C0",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m8**, imm8",
  "instr_parsed": [
   "SAR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide* r/m8 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "D1 /7",
  "opcode_parsed": [
   "D1",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m16 ,1",
  "instr_parsed": [
   "SAR",
   "r/m16",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide* r/m16 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D3 /7",
  "opcode_parsed": [
   "D3",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m16 , CL",
  "instr_parsed": [
   "SAR",
   "r/m16",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide* r/m16 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C1 /7 ib",
  "opcode_parsed": [
   "C1",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m16, imm8",
  "instr_parsed": [
   "SAR",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide*  r/m16 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "D1 /7",
  "opcode_parsed": [
   "D1",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m32 , 1",
  "instr_parsed": [
   "SAR",
   "r/m32",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide* r/m32 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "REX.W + D1 /7",
  "opcode_parsed": [
   "REX.W",
   "D1",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m64 , 1",
  "instr_parsed": [
   "SAR",
   "r/m64",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide* r/m64 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D3 /7",
  "opcode_parsed": [
   "D3",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m32 , CL",
  "instr_parsed": [
   "SAR",
   "r/m32",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide*  r/m32 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "REX.W + D3 /7",
  "opcode_parsed": [
   "REX.W",
   "D3",
   "/7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m64 , CL",
  "instr_parsed": [
   "SAR",
   "r/m64",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide*  r/m64 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C1 /7 ib",
  "opcode_parsed": [
   "C1",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m32, imm8",
  "instr_parsed": [
   "SAR",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Signed divide*  r/m32 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "REX.W + C1 /7 ib",
  "opcode_parsed": [
   "REX.W",
   "C1",
   "/7",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/7"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SAR r/m64, imm8",
  "instr_parsed": [
   "SAR",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Signed divide*  r/m64 by 2, imm8 times",
  "page": 1310
 },
 {
  "opcode": "D0 /4",
  "opcode_parsed": [
   "D0",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m8 , 1",
  "instr_parsed": [
   "SHL",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m8 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "REX + D0 /4",
  "opcode_parsed": [
   "REX",
   "D0",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m8** , 1",
  "instr_parsed": [
   "SHL",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m8 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D2 /4",
  "opcode_parsed": [
   "D2",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m8 , CL",
  "instr_parsed": [
   "SHL",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m8 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "REX + D2 /4",
  "opcode_parsed": [
   "REX",
   "D2",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m8** , CL",
  "instr_parsed": [
   "SHL",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m8 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C0 /4 ib",
  "opcode_parsed": [
   "C0",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m8, imm8",
  "instr_parsed": [
   "SHL",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m8 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "REX + C0 /4 ib",
  "opcode_parsed": [
   "REX",
   "C0",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m8**, imm8",
  "instr_parsed": [
   "SHL",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m8 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "D1 /4",
  "opcode_parsed": [
   "D1",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m16 ,1",
  "instr_parsed": [
   "SHL",
   "r/m16",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m16 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "D3 /4",
  "opcode_parsed": [
   "D3",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m16 , CL",
  "instr_parsed": [
   "SHL",
   "r/m16",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m16 by 2, CL times.",
  "page": 1310
 },
 {
  "opcode": "C1 /4 ib",
  "opcode_parsed": [
   "C1",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m16, imm8",
  "instr_parsed": [
   "SHL",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m16 by 2, imm8 times.",
  "page": 1310
 },
 {
  "opcode": "D1 /4",
  "opcode_parsed": [
   "D1",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m32 ,1",
  "instr_parsed": [
   "SHL",
   "r/m32",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m32 by 2, once.",
  "page": 1310
 },
 {
  "opcode": "REX.W + D1 /4",
  "opcode_parsed": [
   "REX.W",
   "D1",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m64 ,1",
  "instr_parsed": [
   "SHL",
   "r/m64",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m64 by 2, once.",
  "page": 1311
 },
 {
  "opcode": "D3 /4",
  "opcode_parsed": [
   "D3",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m32 , CL",
  "instr_parsed": [
   "SHL",
   "r/m32",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m32 by 2, CL times.",
  "page": 1311
 },
 {
  "opcode": "REX.W + D3 /4",
  "opcode_parsed": [
   "REX.W",
   "D3",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m64 , CL",
  "instr_parsed": [
   "SHL",
   "r/m64",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m64 by 2, CL times.",
  "page": 1311
 },
 {
  "opcode": "C1 /4 ib",
  "opcode_parsed": [
   "C1",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m32, imm8",
  "instr_parsed": [
   "SHL",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Multiply r/m32 by 2, imm8 times.",
  "page": 1311
 },
 {
  "opcode": "REX.W + C1 /4 ib",
  "opcode_parsed": [
   "REX.W",
   "C1",
   "/4",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHL r/m64, imm8",
  "instr_parsed": [
   "SHL",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Multiply r/m64 by 2, imm8 times.",
  "page": 1311
 },
 {
  "opcode": "D0 /5",
  "opcode_parsed": [
   "D0",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m8 ,1",
  "instr_parsed": [
   "SHR",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m8 by 2, once.",
  "page": 1311
 },
 {
  "opcode": "REX + D0 /5",
  "opcode_parsed": [
   "REX",
   "D0",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m8** , 1",
  "instr_parsed": [
   "SHR",
   "r/m8",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide r/m8 by 2, once.",
  "page": 1311
 },
 {
  "opcode": "D2 /5",
  "opcode_parsed": [
   "D2",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m8 , CL",
  "instr_parsed": [
   "SHR",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m8 by 2, CL times.",
  "page": 1311
 },
 {
  "opcode": "REX + D2 /5",
  "opcode_parsed": [
   "REX",
   "D2",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D2"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m8** , CL",
  "instr_parsed": [
   "SHR",
   "r/m8",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide r/m8 by 2, CL times.",
  "page": 1311
 },
 {
  "opcode": "C0 /5 ib",
  "opcode_parsed": [
   "C0",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m8, imm8",
  "instr_parsed": [
   "SHR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m8 by 2, imm8 times.",
  "page": 1311
 },
 {
  "opcode": "REX + C0 /5 ib",
  "opcode_parsed": [
   "REX",
   "C0",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m8**, imm8",
  "instr_parsed": [
   "SHR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide r/m8 by 2, imm8 times.",
  "page": 1311
 },
 {
  "opcode": "D1 /5",
  "opcode_parsed": [
   "D1",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m16 , 1",
  "instr_parsed": [
   "SHR",
   "r/m16",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m16 by 2, once.",
  "page": 1311
 },
 {
  "opcode": "D3 /5",
  "opcode_parsed": [
   "D3",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m16 , CL",
  "instr_parsed": [
   "SHR",
   "r/m16",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m16 by 2, CL times",
  "page": 1311
 },
 {
  "opcode": "C1 /5 ib",
  "opcode_parsed": [
   "C1",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m16, imm8",
  "instr_parsed": [
   "SHR",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m16 by 2, imm8 times.",
  "page": 1311
 },
 {
  "opcode": "D1 /5",
  "opcode_parsed": [
   "D1",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m32 , 1",
  "instr_parsed": [
   "SHR",
   "r/m32",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m32 by 2, once.",
  "page": 1311
 },
 {
  "opcode": "REX.W + D1 /5",
  "opcode_parsed": [
   "REX.W",
   "D1",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m64 , 1",
  "instr_parsed": [
   "SHR",
   "r/m64",
   "1"
  ],
  "op_en": "M1",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide r/m64 by 2, once.",
  "page": 1311
 },
 {
  "opcode": "D3 /5",
  "opcode_parsed": [
   "D3",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m32 , CL",
  "instr_parsed": [
   "SHR",
   "r/m32",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m32 by 2, CL times.",
  "page": 1311
 },
 {
  "opcode": "REX.W + D3 /5",
  "opcode_parsed": [
   "REX.W",
   "D3",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m64 , CL",
  "instr_parsed": [
   "SHR",
   "r/m64",
   "CL"
  ],
  "op_en": "MC",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide r/m64 by 2, CL times.",
  "page": 1311
 },
 {
  "opcode": "C1 /5 ib",
  "opcode_parsed": [
   "C1",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m32, imm8",
  "instr_parsed": [
   "SHR",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Unsigned divide r/m32 by 2, imm8 times.",
  "page": 1311
 },
 {
  "opcode": "REX.W + C1 /5 ib",
  "opcode_parsed": [
   "REX.W",
   "C1",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SHR r/m64, imm8",
  "instr_parsed": [
   "SHR",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Unsigned divide r/m64 by 2, imm8 times.",
  "page": 1311
 },
 {
  "opcode": "1C ib",
  "opcode_parsed": [
   "1C",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB AL, imm8",
  "instr_parsed": [
   "SBB",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow imm8 from AL.",
  "page": 1319
 },
 {
  "opcode": "1D iw",
  "opcode_parsed": [
   "1D",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "SBB AX, imm16",
  "instr_parsed": [
   "SBB",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow imm16 from AX.",
  "page": 1319
 },
 {
  "opcode": "1D id",
  "opcode_parsed": [
   "1D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SBB EAX, imm32",
  "instr_parsed": [
   "SBB",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow imm32 from EAX.",
  "page": 1319
 },
 {
  "opcode": "REX.W + 1D id",
  "opcode_parsed": [
   "REX.W",
   "1D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "1D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SBB RAX, imm32",
  "instr_parsed": [
   "SBB",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow sign-extended imm.32 to 64-bits from RAX.",
  "page": 1319
 },
 {
  "opcode": "80 /3 ib",
  "opcode_parsed": [
   "80",
   "/3",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m8, imm8",
  "instr_parsed": [
   "SBB",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow imm8 from r/m8.",
  "page": 1319
 },
 {
  "opcode": "REX + 80 /3 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/3",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m8*, imm8",
  "instr_parsed": [
   "SBB",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow imm8 from r/m8.",
  "page": 1319
 },
 {
  "opcode": "81 /3 iw",
  "opcode_parsed": [
   "81",
   "/3",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "SBB r/m16, imm16",
  "instr_parsed": [
   "SBB",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow imm16 from r/m16.",
  "page": 1319
 },
 {
  "opcode": "81 /3 id",
  "opcode_parsed": [
   "81",
   "/3",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SBB r/m32, imm32",
  "instr_parsed": [
   "SBB",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow imm32 from r/m32.",
  "page": 1319
 },
 {
  "opcode": "REX.W + 81 /3 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/3",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SBB r/m64, imm32",
  "instr_parsed": [
   "SBB",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow sign-extended imm32 to 64-bits from r/m64.",
  "page": 1319
 },
 {
  "opcode": "83 /3 ib",
  "opcode_parsed": [
   "83",
   "/3",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m16, imm8",
  "instr_parsed": [
   "SBB",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow sign-extended imm8  from r/m16.",
  "page": 1319
 },
 {
  "opcode": "83 /3 ib",
  "opcode_parsed": [
   "83",
   "/3",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m32, imm8",
  "instr_parsed": [
   "SBB",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow sign-extended imm8  from r/m32.",
  "page": 1319
 },
 {
  "opcode": "REX.W + 83 /3 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/3",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/3"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m64, imm8",
  "instr_parsed": [
   "SBB",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow sign-extended imm8  from r/m64.",
  "page": 1319
 },
 {
  "opcode": "18 / r",
  "opcode_parsed": [
   "18",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "18"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m8, r8",
  "instr_parsed": [
   "SBB",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow r8 from r/m8.",
  "page": 1319
 },
 {
  "opcode": "REX + 18 / r",
  "opcode_parsed": [
   "REX",
   "18",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "18"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m8*, r8",
  "instr_parsed": [
   "SBB",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow r8 from r/m8.",
  "page": 1319
 },
 {
  "opcode": "19 / r",
  "opcode_parsed": [
   "19",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "19"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m16, r16",
  "instr_parsed": [
   "SBB",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow r16 from r/m16.",
  "page": 1319
 },
 {
  "opcode": "19 / r",
  "opcode_parsed": [
   "19",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "19"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m32, r32",
  "instr_parsed": [
   "SBB",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow r32 from r/m32.",
  "page": 1319
 },
 {
  "opcode": "REX.W + 19 / r",
  "opcode_parsed": [
   "REX.W",
   "19",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "19"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r/m64, r64",
  "instr_parsed": [
   "SBB",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow r64 from r/m64.",
  "page": 1319
 },
 {
  "opcode": "1A / r",
  "opcode_parsed": [
   "1A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r8, r/m8",
  "instr_parsed": [
   "SBB",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow r/m8 from r8.",
  "page": 1319
 },
 {
  "opcode": "REX + 1A / r",
  "opcode_parsed": [
   "REX",
   "1A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "1A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r8*, r/m8*",
  "instr_parsed": [
   "SBB",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow r/m8 from r8.",
  "page": 1319
 },
 {
  "opcode": "1B / r",
  "opcode_parsed": [
   "1B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r16, r/m16",
  "instr_parsed": [
   "SBB",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow r/m16 from r16.",
  "page": 1319
 },
 {
  "opcode": "1B / r",
  "opcode_parsed": [
   "1B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "1B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r32, r/m32",
  "instr_parsed": [
   "SBB",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract with borrow r/m32 from r32.",
  "page": 1319
 },
 {
  "opcode": "REX.W + 1B / r",
  "opcode_parsed": [
   "REX.W",
   "1B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "1B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SBB r64, r/m64",
  "instr_parsed": [
   "SBB",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract with borrow r/m64 from r64.",
  "page": 1319
 },
 {
  "opcode": "AE",
  "opcode_parsed": [
   "AE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCAS m8",
  "instr_parsed": [
   "SCAS",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare AL with byte at ES:(E)DI or RDI, then set status flags.*",
  "page": 1322
 },
 {
  "opcode": "AF",
  "opcode_parsed": [
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCAS m16",
  "instr_parsed": [
   "SCAS",
   "m16"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare AX with word at ES:(E)DI or RDI, then set status flags.*",
  "page": 1322
 },
 {
  "opcode": "AF",
  "opcode_parsed": [
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCAS m32",
  "instr_parsed": [
   "SCAS",
   "m32"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare EAX with doubleword at ES(E)DI or RDI then set status flags.*",
  "page": 1322
 },
 {
  "opcode": "REX.W + AF",
  "opcode_parsed": [
   "REX.W",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCAS m64",
  "instr_parsed": [
   "SCAS",
   "m64"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare RAX with quadword at RDI or EDI then set status flags.",
  "page": 1322
 },
 {
  "opcode": "AE",
  "opcode_parsed": [
   "AE"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCASB",
  "instr_parsed": [
   "SCASB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare AL with byte at ES:(E)DI or RDI then set status flags.*",
  "page": 1322
 },
 {
  "opcode": "AF",
  "opcode_parsed": [
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCASW",
  "instr_parsed": [
   "SCASW"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare AX with word at ES:(E)DI or RDI then set status flags.*",
  "page": 1322
 },
 {
  "opcode": "AF",
  "opcode_parsed": [
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCASD",
  "instr_parsed": [
   "SCASD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Compare EAX with doubleword at ES:(E)DI or RDI then set status flags.*",
  "page": 1322
 },
 {
  "opcode": "REX.W + AF",
  "opcode_parsed": [
   "REX.W",
   "AF"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SCASQ",
  "instr_parsed": [
   "SCASQ"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Compare RAX with quadword at RDI or EDI then set status flags.",
  "page": 1322
 },
 {
  "opcode": "NP 0F 01 E8",
  "opcode_parsed": [
   "NP",
   "0F",
   "01",
   "E8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "E8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SERIALIZE",
  "instr_parsed": [
   "SERIALIZE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "SERIALIZE",
  "description": "Serialize instruction fetch and execution.",
  "page": 1326
 },
 {
  "opcode": "0F 97",
  "opcode_parsed": [
   "0F",
   "97"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "97"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETA r/m8",
  "instr_parsed": [
   "SETA",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if above (CF=0 and ZF=0).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 97",
  "opcode_parsed": [
   "REX",
   "0F",
   "97"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "97"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETA r/m8*",
  "instr_parsed": [
   "SETA",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if above (CF=0 and ZF=0).",
  "page": 1327
 },
 {
  "opcode": "0F 93",
  "opcode_parsed": [
   "0F",
   "93"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "93"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETAE r/m8",
  "instr_parsed": [
   "SETAE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if above or equal (CF=0).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 93",
  "opcode_parsed": [
   "REX",
   "0F",
   "93"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "93"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETAE r/m8*",
  "instr_parsed": [
   "SETAE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if above or equal (CF=0).",
  "page": 1327
 },
 {
  "opcode": "0F 92",
  "opcode_parsed": [
   "0F",
   "92"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "92"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETB r/m8",
  "instr_parsed": [
   "SETB",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if below (CF=1).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 92",
  "opcode_parsed": [
   "REX",
   "0F",
   "92"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "92"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETB r/m8*",
  "instr_parsed": [
   "SETB",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if below (CF=1).",
  "page": 1327
 },
 {
  "opcode": "0F 96",
  "opcode_parsed": [
   "0F",
   "96"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "96"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETBE r/m8",
  "instr_parsed": [
   "SETBE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if below or equal (CF=1 or ZF=1).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 96",
  "opcode_parsed": [
   "REX",
   "0F",
   "96"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "96"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETBE r/m8*",
  "instr_parsed": [
   "SETBE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if below or equal (CF=1 or ZF=1).",
  "page": 1327
 },
 {
  "opcode": "0F 92",
  "opcode_parsed": [
   "0F",
   "92"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "92"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETC r/m8",
  "instr_parsed": [
   "SETC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if carry (CF=1).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 92",
  "opcode_parsed": [
   "REX",
   "0F",
   "92"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "92"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETC r/m8*",
  "instr_parsed": [
   "SETC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if carry (CF=1).",
  "page": 1327
 },
 {
  "opcode": "0F 94",
  "opcode_parsed": [
   "0F",
   "94"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "94"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETE r/m8",
  "instr_parsed": [
   "SETE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if equal (ZF=1).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 94",
  "opcode_parsed": [
   "REX",
   "0F",
   "94"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "94"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETE r/m8*",
  "instr_parsed": [
   "SETE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if equal (ZF=1).",
  "page": 1327
 },
 {
  "opcode": "0F 9F",
  "opcode_parsed": [
   "0F",
   "9F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETG r/m8",
  "instr_parsed": [
   "SETG",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if greater (ZF=0 and SF=OF).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9F",
  "opcode_parsed": [
   "REX",
   "0F",
   "9F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETG r/m8*",
  "instr_parsed": [
   "SETG",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if greater (ZF=0 and SF=OF).",
  "page": 1327
 },
 {
  "opcode": "0F 9D",
  "opcode_parsed": [
   "0F",
   "9D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETGE r/m8",
  "instr_parsed": [
   "SETGE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if greater or equal (SF=OF).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9D",
  "opcode_parsed": [
   "REX",
   "0F",
   "9D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETGE r/m8*",
  "instr_parsed": [
   "SETGE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if greater or equal (SF=OF).",
  "page": 1327
 },
 {
  "opcode": "0F 9C",
  "opcode_parsed": [
   "0F",
   "9C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETL r/m8",
  "instr_parsed": [
   "SETL",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if less (SF ≠ OF).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9C",
  "opcode_parsed": [
   "REX",
   "0F",
   "9C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETL r/m8*",
  "instr_parsed": [
   "SETL",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if less (SF ≠ OF).",
  "page": 1327
 },
 {
  "opcode": "0F 9E",
  "opcode_parsed": [
   "0F",
   "9E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETLE r/m8",
  "instr_parsed": [
   "SETLE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if less or equal (ZF=1 or SF ≠ OF).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9E",
  "opcode_parsed": [
   "REX",
   "0F",
   "9E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETLE r/m8*",
  "instr_parsed": [
   "SETLE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if less or equal (ZF=1 or SF ≠ OF).",
  "page": 1327
 },
 {
  "opcode": "0F 96",
  "opcode_parsed": [
   "0F",
   "96"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "96"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNA r/m8",
  "instr_parsed": [
   "SETNA",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not above (CF=1 or ZF=1).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 96",
  "opcode_parsed": [
   "REX",
   "0F",
   "96"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "96"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNA r/m8*",
  "instr_parsed": [
   "SETNA",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not above (CF=1 or ZF=1).",
  "page": 1327
 },
 {
  "opcode": "0F 92",
  "opcode_parsed": [
   "0F",
   "92"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "92"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNAE r/m8",
  "instr_parsed": [
   "SETNAE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not above or equal (CF=1).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 92",
  "opcode_parsed": [
   "REX",
   "0F",
   "92"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "92"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNAE r/m8*",
  "instr_parsed": [
   "SETNAE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not above or equal (CF=1).",
  "page": 1327
 },
 {
  "opcode": "0F 93",
  "opcode_parsed": [
   "0F",
   "93"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "93"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNB r/m8",
  "instr_parsed": [
   "SETNB",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not below (CF=0).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 93",
  "opcode_parsed": [
   "REX",
   "0F",
   "93"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "93"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNB r/m8*",
  "instr_parsed": [
   "SETNB",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not below (CF=0).",
  "page": 1327
 },
 {
  "opcode": "0F 97",
  "opcode_parsed": [
   "0F",
   "97"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "97"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNBE r/m8",
  "instr_parsed": [
   "SETNBE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not below or equal (CF=0 and ZF=0).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 97",
  "opcode_parsed": [
   "REX",
   "0F",
   "97"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "97"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNBE r/m8*",
  "instr_parsed": [
   "SETNBE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not below or equal (CF=0 and ZF=0).",
  "page": 1327
 },
 {
  "opcode": "0F 93",
  "opcode_parsed": [
   "0F",
   "93"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "93"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNC r/m8",
  "instr_parsed": [
   "SETNC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not carry (CF=0).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 93",
  "opcode_parsed": [
   "REX",
   "0F",
   "93"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "93"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNC r/m8*",
  "instr_parsed": [
   "SETNC",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not carry (CF=0).",
  "page": 1327
 },
 {
  "opcode": "0F 95",
  "opcode_parsed": [
   "0F",
   "95"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "95"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNE r/m8",
  "instr_parsed": [
   "SETNE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not equal (ZF=0).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 95",
  "opcode_parsed": [
   "REX",
   "0F",
   "95"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "95"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNE r/m8*",
  "instr_parsed": [
   "SETNE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not equal (ZF=0).",
  "page": 1327
 },
 {
  "opcode": "0F 9E",
  "opcode_parsed": [
   "0F",
   "9E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNG r/m8",
  "instr_parsed": [
   "SETNG",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not greater (ZF=1 or SF ≠ OF)",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9E",
  "opcode_parsed": [
   "REX",
   "0F",
   "9E"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNG r/m8*",
  "instr_parsed": [
   "SETNG",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not greater (ZF=1 or SF ≠ OF).",
  "page": 1327
 },
 {
  "opcode": "0F 9C",
  "opcode_parsed": [
   "0F",
   "9C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNGE r/m8",
  "instr_parsed": [
   "SETNGE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not greater or equal (SF ≠ OF).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9C",
  "opcode_parsed": [
   "REX",
   "0F",
   "9C"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNGE r/m8*",
  "instr_parsed": [
   "SETNGE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not greater or equal (SF ≠ OF).",
  "page": 1327
 },
 {
  "opcode": "0F 9D",
  "opcode_parsed": [
   "0F",
   "9D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNL r/m8",
  "instr_parsed": [
   "SETNL",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not less (SF=OF).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9D",
  "opcode_parsed": [
   "REX",
   "0F",
   "9D"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNL r/m8*",
  "instr_parsed": [
   "SETNL",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not less (SF=OF).",
  "page": 1327
 },
 {
  "opcode": "0F 9F",
  "opcode_parsed": [
   "0F",
   "9F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNLE r/m8",
  "instr_parsed": [
   "SETNLE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not less or equal (ZF=0 and SF=OF).",
  "page": 1327
 },
 {
  "opcode": "REX + 0F 9F",
  "opcode_parsed": [
   "REX",
   "0F",
   "9F"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNLE r/m8*",
  "instr_parsed": [
   "SETNLE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not less or equal (ZF=0 and SF=OF).",
  "page": 1328
 },
 {
  "opcode": "0F 91",
  "opcode_parsed": [
   "0F",
   "91"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "91"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNO r/m8",
  "instr_parsed": [
   "SETNO",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not overflow (OF=0).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 91",
  "opcode_parsed": [
   "REX",
   "0F",
   "91"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "91"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNO r/m8*",
  "instr_parsed": [
   "SETNO",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not overflow (OF=0).",
  "page": 1328
 },
 {
  "opcode": "0F 9B",
  "opcode_parsed": [
   "0F",
   "9B"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNP r/m8",
  "instr_parsed": [
   "SETNP",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not parity (PF=0).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 9B",
  "opcode_parsed": [
   "REX",
   "0F",
   "9B"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNP r/m8*",
  "instr_parsed": [
   "SETNP",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set  byte  if not parity (PF=0).",
  "page": 1328
 },
 {
  "opcode": "0F 99",
  "opcode_parsed": [
   "0F",
   "99"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "99"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNS r/m8",
  "instr_parsed": [
   "SETNS",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not sign (SF=0).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 99",
  "opcode_parsed": [
   "REX",
   "0F",
   "99"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "99"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNS r/m8*",
  "instr_parsed": [
   "SETNS",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not sign (SF=0).",
  "page": 1328
 },
 {
  "opcode": "0F 95",
  "opcode_parsed": [
   "0F",
   "95"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "95"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNZ r/m8",
  "instr_parsed": [
   "SETNZ",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if not zero (ZF=0).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 95",
  "opcode_parsed": [
   "REX",
   "0F",
   "95"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "95"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETNZ r/m8*",
  "instr_parsed": [
   "SETNZ",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if not zero (ZF=0).",
  "page": 1328
 },
 {
  "opcode": "0F 90",
  "opcode_parsed": [
   "0F",
   "90"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "90"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETO r/m8",
  "instr_parsed": [
   "SETO",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if overflow (OF=1)",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 90",
  "opcode_parsed": [
   "REX",
   "0F",
   "90"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "90"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETO r/m8*",
  "instr_parsed": [
   "SETO",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if overflow (OF=1).",
  "page": 1328
 },
 {
  "opcode": "0F 9A",
  "opcode_parsed": [
   "0F",
   "9A"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETP r/m8",
  "instr_parsed": [
   "SETP",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if parity (PF=1).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 9A",
  "opcode_parsed": [
   "REX",
   "0F",
   "9A"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETP r/m8*",
  "instr_parsed": [
   "SETP",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if parity (PF=1).",
  "page": 1328
 },
 {
  "opcode": "0F 9A",
  "opcode_parsed": [
   "0F",
   "9A"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETPE r/m8",
  "instr_parsed": [
   "SETPE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if parity even (PF=1).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 9A",
  "opcode_parsed": [
   "REX",
   "0F",
   "9A"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETPE r/m8*",
  "instr_parsed": [
   "SETPE",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if parity even (PF=1).",
  "page": 1328
 },
 {
  "opcode": "0F 9B",
  "opcode_parsed": [
   "0F",
   "9B"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETPO r/m8",
  "instr_parsed": [
   "SETPO",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if parity odd (PF=0).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 9B",
  "opcode_parsed": [
   "REX",
   "0F",
   "9B"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETPO r/m8*",
  "instr_parsed": [
   "SETPO",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if parity odd (PF=0).",
  "page": 1328
 },
 {
  "opcode": "0F 98",
  "opcode_parsed": [
   "0F",
   "98"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "98"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETS r/m8",
  "instr_parsed": [
   "SETS",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if sign (SF=1).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 98",
  "opcode_parsed": [
   "REX",
   "0F",
   "98"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "98"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETS r/m8*",
  "instr_parsed": [
   "SETS",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if sign (SF=1).",
  "page": 1328
 },
 {
  "opcode": "0F 94",
  "opcode_parsed": [
   "0F",
   "94"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "94"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETZ r/m8",
  "instr_parsed": [
   "SETZ",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set byte if zero (ZF=1).",
  "page": 1328
 },
 {
  "opcode": "REX + 0F 94",
  "opcode_parsed": [
   "REX",
   "0F",
   "94"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "94"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SETZ r/m8*",
  "instr_parsed": [
   "SETZ",
   "r/m8"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set byte if zero (ZF=1).",
  "page": 1328
 },
 {
  "opcode": "NP 0F AE F8",
  "opcode_parsed": [
   "NP",
   "0F",
   "AE",
   "F8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AE"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SFENCE",
  "instr_parsed": [
   "SFENCE"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Serializes store operations.",
  "page": 1332
 },
 {
  "opcode": "0F 01 /0",
  "opcode_parsed": [
   "0F",
   "01",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SGDT m",
  "instr_parsed": [
   "SGDT",
   "m"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store  GDTR  to m.",
  "page": 1333
 },
 {
  "opcode": "0F 01 /1",
  "opcode_parsed": [
   "0F",
   "01",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SIDT m",
  "instr_parsed": [
   "SIDT",
   "m"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Store  IDTR  to m.",
  "page": 1359
 },
 {
  "opcode": "0F 00 /0",
  "opcode_parsed": [
   "0F",
   "00",
   "/0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SLDT r/m16",
  "instr_parsed": [
   "SLDT",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Stores segment selector from LDTR in r/m16 .",
  "page": 1361
 },
 {
  "opcode": "F9",
  "opcode_parsed": [
   "F9"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STC",
  "instr_parsed": [
   "STC"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set CF flag.",
  "page": 1376
 },
 {
  "opcode": "FD",
  "opcode_parsed": [
   "FD"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FD"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STD",
  "instr_parsed": [
   "STD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set DF flag.",
  "page": 1377
 },
 {
  "opcode": "FB",
  "opcode_parsed": [
   "FB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "FB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STI",
  "instr_parsed": [
   "STI"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction.",
  "page": 1378
 },
 {
  "opcode": "AA",
  "opcode_parsed": [
   "AA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOS m8",
  "instr_parsed": [
   "STOS",
   "m8"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "AB",
  "opcode_parsed": [
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOS m16",
  "instr_parsed": [
   "STOS",
   "m16"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "AB",
  "opcode_parsed": [
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOS m32",
  "instr_parsed": [
   "STOS",
   "m32"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "REX.W + AB",
  "opcode_parsed": [
   "REX.W",
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOS m64",
  "instr_parsed": [
   "STOS",
   "m64"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store RAX at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "AA",
  "opcode_parsed": [
   "AA"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AA"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOSB",
  "instr_parsed": [
   "STOSB"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "AB",
  "opcode_parsed": [
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOSW",
  "instr_parsed": [
   "STOSW"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "AB",
  "opcode_parsed": [
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOSD",
  "instr_parsed": [
   "STOSD"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "REX.W + AB",
  "opcode_parsed": [
   "REX.W",
   "AB"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "AB"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STOSQ",
  "instr_parsed": [
   "STOSQ"
  ],
  "op_en": "NA",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Store RAX at address RDI or EDI.",
  "page": 1381
 },
 {
  "opcode": "0F 00 /1",
  "opcode_parsed": [
   "0F",
   "00",
   "/1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/1"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "STR r/m16",
  "instr_parsed": [
   "STR",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Stores segment selector from TR in r/m16 .",
  "page": 1385
 },
 {
  "opcode": "2C ib",
  "opcode_parsed": [
   "2C",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "2C"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB AL, i mm8",
  "instr_parsed": [
   "SUB",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract imm8 from AL.",
  "page": 1387
 },
 {
  "opcode": "2D iw",
  "opcode_parsed": [
   "2D",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "2D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "SUB AX, i mm16",
  "instr_parsed": [
   "SUB",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract imm16 from AX.",
  "page": 1387
 },
 {
  "opcode": "2D id",
  "opcode_parsed": [
   "2D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "2D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SUB EAX, i mm32",
  "instr_parsed": [
   "SUB",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract imm32 from EAX.",
  "page": 1387
 },
 {
  "opcode": "REX.W + 2D id",
  "opcode_parsed": [
   "REX.W",
   "2D",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "2D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SUB RAX, i mm32",
  "instr_parsed": [
   "SUB",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract imm32 sign-extended to 64-bits from RAX.",
  "page": 1387
 },
 {
  "opcode": "80 /5 ib",
  "opcode_parsed": [
   "80",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m8, imm8",
  "instr_parsed": [
   "SUB",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract imm8 from r/m8.",
  "page": 1387
 },
 {
  "opcode": "REX + 80 /5 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m8*, imm8",
  "instr_parsed": [
   "SUB",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract imm8 from r/m8.",
  "page": 1387
 },
 {
  "opcode": "81 /5 iw",
  "opcode_parsed": [
   "81",
   "/5",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "SUB r/m16, imm16",
  "instr_parsed": [
   "SUB",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract imm16 from r/m16.",
  "page": 1387
 },
 {
  "opcode": "81 /5 id",
  "opcode_parsed": [
   "81",
   "/5",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SUB r/m32, imm32",
  "instr_parsed": [
   "SUB",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract imm32 from r/m32.",
  "page": 1387
 },
 {
  "opcode": "REX.W + 81 /5 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/5",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "SUB r/m64, imm32",
  "instr_parsed": [
   "SUB",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract imm32 sign-extended to 64-bits from r/m64.",
  "page": 1387
 },
 {
  "opcode": "83 /5 ib",
  "opcode_parsed": [
   "83",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m16, imm8",
  "instr_parsed": [
   "SUB",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract sign-extended imm8 from r/m16.",
  "page": 1387
 },
 {
  "opcode": "83 /5 ib",
  "opcode_parsed": [
   "83",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m32, imm8",
  "instr_parsed": [
   "SUB",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract sign-extended imm8 from r/m32.",
  "page": 1387
 },
 {
  "opcode": "REX.W + 83 /5 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/5",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m64, imm8",
  "instr_parsed": [
   "SUB",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract sign-extended imm8 from r/m64.",
  "page": 1387
 },
 {
  "opcode": "28 / r",
  "opcode_parsed": [
   "28",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "28"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m8, r8",
  "instr_parsed": [
   "SUB",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract r8 from r/m8.",
  "page": 1387
 },
 {
  "opcode": "REX + 28 / r",
  "opcode_parsed": [
   "REX",
   "28",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "28"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m8*, r8*",
  "instr_parsed": [
   "SUB",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract r8 from r/m8.",
  "page": 1387
 },
 {
  "opcode": "29 / r",
  "opcode_parsed": [
   "29",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "29"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m16, r16",
  "instr_parsed": [
   "SUB",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract r16 from r/m16.",
  "page": 1387
 },
 {
  "opcode": "29 / r",
  "opcode_parsed": [
   "29",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "29"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m32, r32",
  "instr_parsed": [
   "SUB",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract r32 from r/m32.",
  "page": 1387
 },
 {
  "opcode": "REX.W + 29 / r",
  "opcode_parsed": [
   "REX.W",
   "29",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "29"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r/m64, r64",
  "instr_parsed": [
   "SUB",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract r64 from r/m64.",
  "page": 1387
 },
 {
  "opcode": "2A / r",
  "opcode_parsed": [
   "2A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "2A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r8, r/m8",
  "instr_parsed": [
   "SUB",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract r/m8 from r8.",
  "page": 1387
 },
 {
  "opcode": "REX + 2A / r",
  "opcode_parsed": [
   "REX",
   "2A",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "2A"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r8*, r/m8*",
  "instr_parsed": [
   "SUB",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract r/m8 from r8.",
  "page": 1387
 },
 {
  "opcode": "2B / r",
  "opcode_parsed": [
   "2B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "2B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r16, r/m16",
  "instr_parsed": [
   "SUB",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract r/m16 from r16.",
  "page": 1387
 },
 {
  "opcode": "2B / r",
  "opcode_parsed": [
   "2B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "2B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r32, r/m32",
  "instr_parsed": [
   "SUB",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Subtract r/m32 from r32.",
  "page": 1387
 },
 {
  "opcode": "REX.W + 2B / r",
  "opcode_parsed": [
   "REX.W",
   "2B",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "2B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SUB r64, r/m64",
  "instr_parsed": [
   "SUB",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Subtract r/m64 from r64.",
  "page": 1387
 },
 {
  "opcode": "0F 01 F8",
  "opcode_parsed": [
   "0F",
   "01",
   "F8"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SWAPGS",
  "instr_parsed": [
   "SWAPGS"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchanges the current GS base register value with the value contained in MSR address C0000102H.",
  "page": 1399
 },
 {
  "opcode": "0F 05",
  "opcode_parsed": [
   "0F",
   "05"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "05"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SYSCALL",
  "instr_parsed": [
   "SYSCALL"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Fast call to privilege level 0 system procedures.",
  "page": 1401
 },
 {
  "opcode": "0F 34",
  "opcode_parsed": [
   "0F",
   "34"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "34"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SYSENTER",
  "instr_parsed": [
   "SYSENTER"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Fast call to privilege level 0 system procedures.",
  "page": 1404
 },
 {
  "opcode": "0F 35",
  "opcode_parsed": [
   "0F",
   "35"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "35"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SYSEXIT",
  "instr_parsed": [
   "SYSEXIT"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Fast return to privilege level 3 user code.",
  "page": 1407
 },
 {
  "opcode": "REX.W + 0F 35",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "35"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "35"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SYSEXIT",
  "instr_parsed": [
   "SYSEXIT"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Fast return to 64-bit mode privilege level 3 user code.",
  "page": 1407
 },
 {
  "opcode": "0F 07",
  "opcode_parsed": [
   "0F",
   "07"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "07"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SYSRET",
  "instr_parsed": [
   "SYSRET"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Return to compatibility mode from fast system call",
  "page": 1410
 },
 {
  "opcode": "REX.W + 0F 07",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "07"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "07"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "SYSRET",
  "instr_parsed": [
   "SYSRET"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Return to 64-bit mode from fast system call",
  "page": 1410
 },
 {
  "opcode": "A8 ib",
  "opcode_parsed": [
   "A8",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A8"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST AL, i mm8",
  "instr_parsed": [
   "TEST",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND imm8 with AL; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "A9 iw",
  "opcode_parsed": [
   "A9",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "TEST AX, i mm16",
  "instr_parsed": [
   "TEST",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND imm16 with AX; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "A9 id",
  "opcode_parsed": [
   "A9",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "A9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "TEST EAX, i mm32",
  "instr_parsed": [
   "TEST",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND imm32 with EAX; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "REX.W + A9 id",
  "opcode_parsed": [
   "REX.W",
   "A9",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "A9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "TEST RAX, i mm32",
  "instr_parsed": [
   "TEST",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "F6 /0 ib",
  "opcode_parsed": [
   "F6",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST r/m8, imm8",
  "instr_parsed": [
   "TEST",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND imm8 with r/m8 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "REX + F6 /0 ib",
  "opcode_parsed": [
   "REX",
   "F6",
   "/0",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F6"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST r/m8*, imm8",
  "instr_parsed": [
   "TEST",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "AND imm8 with r/m8 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "F7 /0 iw",
  "opcode_parsed": [
   "F7",
   "/0",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "TEST r/m16, imm16",
  "instr_parsed": [
   "TEST",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND imm16 with r/m16 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "F7 /0 id",
  "opcode_parsed": [
   "F7",
   "/0",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "TEST r/m32, imm32",
  "instr_parsed": [
   "TEST",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND imm32 with r/m32 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "REX.W + F7 /0 id",
  "opcode_parsed": [
   "REX.W",
   "F7",
   "/0",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "F7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/0"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "TEST r/m64, imm32",
  "instr_parsed": [
   "TEST",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "AND imm32 sign-extended to 64-bits with r/m64 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "84 / r",
  "opcode_parsed": [
   "84",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST r/m8, r8",
  "instr_parsed": [
   "TEST",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND r8 with r/m8 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "REX + 84 / r",
  "opcode_parsed": [
   "REX",
   "84",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "84"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST r/m8*, r8*",
  "instr_parsed": [
   "TEST",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "AND r8 with r/m8 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "85 / r",
  "opcode_parsed": [
   "85",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "85"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST r/m16, r16",
  "instr_parsed": [
   "TEST",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND r16 with r/m16 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "85 / r",
  "opcode_parsed": [
   "85",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "85"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST r/m32, r32",
  "instr_parsed": [
   "TEST",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AND r32 with r/m32 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "REX.W + 85 / r",
  "opcode_parsed": [
   "REX.W",
   "85",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "85"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "TEST r/m64, r64",
  "instr_parsed": [
   "TEST",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "AND r64 with r/m64 ; set SF, ZF, PF according to result.",
  "page": 1413
 },
 {
  "opcode": "0F FF /r",
  "opcode_parsed": [
   "0F",
   "FF",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "FF"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "UD0 1  r32, r/m32",
  "instr_parsed": [
   "UD0",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Raise invalid opcode exception.",
  "page": 1423
 },
 {
  "opcode": "0F B9 /r",
  "opcode_parsed": [
   "0F",
   "B9",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "B9"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "UD1 r32, r/m32",
  "instr_parsed": [
   "UD1",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Raise invalid opcode exception.",
  "page": 1423
 },
 {
  "opcode": "0F 0B",
  "opcode_parsed": [
   "0F",
   "0B"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "UD2",
  "instr_parsed": [
   "UD2"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Raise invalid opcode exception.",
  "page": 1423
 },
 {
  "opcode": "0F 00 /4",
  "opcode_parsed": [
   "0F",
   "00",
   "/4"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/4"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VERR r/m16",
  "instr_parsed": [
   "VERR",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set ZF=1 if segment specified with r/m16 can be read.",
  "page": 1541
 },
 {
  "opcode": "0F 00 /5",
  "opcode_parsed": [
   "0F",
   "00",
   "/5"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "00"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/5"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VERW r/m16",
  "instr_parsed": [
   "VERW",
   "r/m16"
  ],
  "op_en": "M",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set ZF=1 if segment specified with r/m16 can be written.",
  "page": 1541
 },
 {
  "opcode": "EVEX.128.66.0F38.W0 8D /r",
  "opcode_parsed": [
   "EVEX.128.66.0F38.W0",
   "8D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128",
  "instr_parsed": [
   "VPERMB",
   "xmm1 {k1}{z}",
   "xmm2",
   "xmm3/m128"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Permute bytes in xmm3/m128 using byte indexes in xmm2 and store the result in xmm1 using writemask k1.",
  "page": 1802
 },
 {
  "opcode": "EVEX.256.66.0F38.W0 8D /r",
  "opcode_parsed": [
   "EVEX.256.66.0F38.W0",
   "8D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.256.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256",
  "instr_parsed": [
   "VPERMB",
   "ymm1{k1}{z}",
   "ymm2",
   "ymm3/m256"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Permute bytes in ymm3/m256 using byte indexes in ymm2 and store the result in ymm1 using writemask k1.",
  "page": 1802
 },
 {
  "opcode": "EVEX.512.66.0F38.W0 8D /r",
  "opcode_parsed": [
   "EVEX.512.66.0F38.W0",
   "8D",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.512.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "8D"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512",
  "instr_parsed": [
   "VPERMB",
   "zmm1{k1}{z}",
   "zmm2",
   "zmm3/m512"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512_VBMI",
  "description": "Permute bytes in zmm3/m512 using byte indexes in zmm2 and store the result in zmm1 using writemask k1.",
  "page": 1802
 },
 {
  "opcode": "EVEX.128.66.0F38.W0 75 /r",
  "opcode_parsed": [
   "EVEX.128.66.0F38.W0",
   "75",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.128.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "75"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128",
  "instr_parsed": [
   "VPERMI2B",
   "xmm1 {k1}{z}",
   "xmm2",
   "xmm3/m128"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Permute bytes in xmm3/m128 and xmm2 using byte indexes in xmm1 and store the byte results in xmm1 using writemask k1.",
  "page": 1807
 },
 {
  "opcode": "EVEX.256.66.0F38.W0 75 /r",
  "opcode_parsed": [
   "EVEX.256.66.0F38.W0",
   "75",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.256.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "75"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256",
  "instr_parsed": [
   "VPERMI2B",
   "ymm1{k1}{z}",
   "ymm2",
   "ymm3/m256"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512VL",
  "description": "Permute bytes in ymm3/m256 and ymm2 using byte indexes in ymm1 and store the byte results in ymm1 using writemask k1.",
  "page": 1807
 },
 {
  "opcode": "EVEX.512.66.0F38.W0 75 /r",
  "opcode_parsed": [
   "EVEX.512.66.0F38.W0",
   "75",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "EVEX.512.66.0F38.W0"
    ],
    "byte_type": "evex-prefix",
    "byte_size_min": 4,
    "byte_size_max": 4
   },
   {
    "components": [
     "75"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512",
  "instr_parsed": [
   "VPERMI2B",
   "zmm1{k1}{z}",
   "zmm2",
   "zmm3/m512"
  ],
  "op_en": "A",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX512_VBMI",
  "description": "Permute bytes in zmm3/m512 and zmm2 using byte indexes in zmm1 and store the byte results in zmm1 using writemask k1.",
  "page": 1807
 },
 {
  "opcode": "VEX.128.66.0F38.W0 0E /r",
  "opcode_parsed": [
   "VEX.128.66.0F38.W0",
   "0E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F38.W0"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "0E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VTESTPS xmm1, xmm2/m128",
  "instr_parsed": [
   "VTESTPS",
   "xmm1",
   "xmm2/m128"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Set ZF and CF depending on sign bit AND and ANDN of packed single-precision floating-point sources.",
  "page": 2029
 },
 {
  "opcode": "VEX.256.66.0F38.W0 0E /r",
  "opcode_parsed": [
   "VEX.256.66.0F38.W0",
   "0E",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.66.0F38.W0"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "0E"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VTESTPS ymm1, ymm2/m256",
  "instr_parsed": [
   "VTESTPS",
   "ymm1",
   "ymm2/m256"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Set ZF and CF depending on sign bit AND and ANDN of packed single-precision floating-point sources.",
  "page": 2029
 },
 {
  "opcode": "VEX.128.66.0F38.W0 0F /r",
  "opcode_parsed": [
   "VEX.128.66.0F38.W0",
   "0F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.66.0F38.W0"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VTESTPD xmm1, xmm2/m128",
  "instr_parsed": [
   "VTESTPD",
   "xmm1",
   "xmm2/m128"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Set ZF and CF depending on sign bit AND and ANDN of packed double-precision floating-point sources.",
  "page": 2029
 },
 {
  "opcode": "VEX.256.66.0F38.W0 0F /r",
  "opcode_parsed": [
   "VEX.256.66.0F38.W0",
   "0F",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.66.0F38.W0"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VTESTPD ymm1, ymm2/m256",
  "instr_parsed": [
   "VTESTPD",
   "ymm1",
   "ymm2/m256"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Set ZF and CF depending on sign bit AND and ANDN of packed double-precision floating-point sources.",
  "page": 2029
 },
 {
  "opcode": "VEX.256.0F.WIG 77",
  "opcode_parsed": [
   "VEX.256.0F.WIG",
   "77"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.256.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "77"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VZEROALL",
  "instr_parsed": [
   "VZEROALL"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Zero some of the XMM, YMM and ZMM registers.",
  "page": 2032
 },
 {
  "opcode": "VEX.128.0F.WIG 77",
  "opcode_parsed": [
   "VEX.128.0F.WIG",
   "77"
  ],
  "opcode_bytes": [
   {
    "components": [
     "VEX.128.0F.WIG"
    ],
    "byte_type": "vex-prefix",
    "byte_size_min": 2,
    "byte_size_max": 3
   },
   {
    "components": [
     "77"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "VZEROUPPER",
  "instr_parsed": [
   "VZEROUPPER"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "AVX",
  "description": "Zero bits in positions 128 and higher of some YMM and ZMM registers.",
  "page": 2033
 },
 {
  "opcode": "9B",
  "opcode_parsed": [
   "9B"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "WAIT",
  "instr_parsed": [
   "WAIT"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Check pending unmasked floating-point exceptions.",
  "page": 2034
 },
 {
  "opcode": "9B",
  "opcode_parsed": [
   "9B"
  ],
  "opcode_bytes": [
   {
    "components": [
     "9B"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "FWAIT",
  "instr_parsed": [
   "FWAIT"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Check pending unmasked floating-point exceptions.",
  "page": 2034
 },
 {
  "opcode": "0F 09",
  "opcode_parsed": [
   "0F",
   "09"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "09"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "WBINVD",
  "instr_parsed": [
   "WBINVD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Write back and flush Internal caches; initiate writing-back and flushing of external caches.",
  "page": 2035
 },
 {
  "opcode": "F3 0F 09",
  "opcode_parsed": [
   "F3",
   "0F",
   "09"
  ],
  "opcode_bytes": [
   {
    "components": [
     "F3"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "09"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "WBNOINVD",
  "instr_parsed": [
   "WBNOINVD"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": false,
  "cpuid_feature_flag": "WBNOINVD Write back and do not flush internal caches;",
  "description": "initiate writing-back without flushing of external caches.",
  "page": 2037
 },
 {
  "opcode": "0F 30",
  "opcode_parsed": [
   "0F",
   "30"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "30"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "WRMSR",
  "instr_parsed": [
   "WRMSR"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Write the value in EDX:EAX to MSR specified by ECX.",
  "page": 2041
 },
 {
  "opcode": "0F C0 / r",
  "opcode_parsed": [
   "0F",
   "C0",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XADD r/m8, r8",
  "instr_parsed": [
   "XADD",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r8 and r/m8 ; load sum into r/m8 .",
  "page": 2055
 },
 {
  "opcode": "REX + 0F C0 / r",
  "opcode_parsed": [
   "REX",
   "0F",
   "C0",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XADD r/m8*, r8*",
  "instr_parsed": [
   "XADD",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange r8 and r/m8 ; load sum into r/m8 .",
  "page": 2055
 },
 {
  "opcode": "0F C1 / r",
  "opcode_parsed": [
   "0F",
   "C1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XADD r/m16, r16",
  "instr_parsed": [
   "XADD",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r16 and r/m16 ; load sum into r/m16 .",
  "page": 2055
 },
 {
  "opcode": "0F C1 / r",
  "opcode_parsed": [
   "0F",
   "C1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XADD r/m32, r32",
  "instr_parsed": [
   "XADD",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r32 and r/m32 ; load sum into r/m32 .",
  "page": 2055
 },
 {
  "opcode": "REX.W + 0F C1 / r",
  "opcode_parsed": [
   "REX.W",
   "0F",
   "C1",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "C1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XADD r/m64, r64",
  "instr_parsed": [
   "XADD",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange r64 and r/m64 ; load sum into r/m64 .",
  "page": 2055
 },
 {
  "opcode": "90+ rw",
  "opcode_parsed": [
   "90",
   "+rw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "90",
     "+rw"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG AX, r16",
  "instr_parsed": [
   "XCHG",
   "AX",
   "r16"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r16 with AX.",
  "page": 2060
 },
 {
  "opcode": "90+ rw",
  "opcode_parsed": [
   "90",
   "+rw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "90",
     "+rw"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r16 , AX",
  "instr_parsed": [
   "XCHG",
   "r16",
   "AX"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange AX with r16.",
  "page": 2060
 },
 {
  "opcode": "90+ rd",
  "opcode_parsed": [
   "90",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "90",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG EAX, r32",
  "instr_parsed": [
   "XCHG",
   "EAX",
   "r32"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r32 with EAX.",
  "page": 2060
 },
 {
  "opcode": "REX.W + 90+ rd",
  "opcode_parsed": [
   "REX.W",
   "90",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "90",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG RAX, r64",
  "instr_parsed": [
   "XCHG",
   "RAX",
   "r64"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange r64 with RAX.",
  "page": 2060
 },
 {
  "opcode": "90+ rd",
  "opcode_parsed": [
   "90",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "90",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r32 , EAX",
  "instr_parsed": [
   "XCHG",
   "r32",
   "EAX"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange EAX with r32.",
  "page": 2060
 },
 {
  "opcode": "REX.W + 90+ rd",
  "opcode_parsed": [
   "REX.W",
   "90",
   "+rd"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "90",
     "+rd"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r64 , RAX",
  "instr_parsed": [
   "XCHG",
   "r64",
   "RAX"
  ],
  "op_en": "O",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange RAX with r64.",
  "page": 2060
 },
 {
  "opcode": "86 / r",
  "opcode_parsed": [
   "86",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r/m8, r8",
  "instr_parsed": [
   "XCHG",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r8 (byte register) with byte from r/m8.",
  "page": 2060
 },
 {
  "opcode": "REX + 86 / r",
  "opcode_parsed": [
   "REX",
   "86",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r/m8*, r8*",
  "instr_parsed": [
   "XCHG",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange r8 (byte register) with byte from r/m8.",
  "page": 2060
 },
 {
  "opcode": "86 / r",
  "opcode_parsed": [
   "86",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r8, r/m8",
  "instr_parsed": [
   "XCHG",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange byte from r/m8 with r8 (byte register).",
  "page": 2060
 },
 {
  "opcode": "REX + 86 / r",
  "opcode_parsed": [
   "REX",
   "86",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "86"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r8*, r/m8*",
  "instr_parsed": [
   "XCHG",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange byte from r/m8 with r8 (byte register).",
  "page": 2060
 },
 {
  "opcode": "87 / r",
  "opcode_parsed": [
   "87",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r/m16, r16",
  "instr_parsed": [
   "XCHG",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r16 with word from r/m16.",
  "page": 2060
 },
 {
  "opcode": "87 / r",
  "opcode_parsed": [
   "87",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r16, r/m16",
  "instr_parsed": [
   "XCHG",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange word from r/m16 with r16.",
  "page": 2060
 },
 {
  "opcode": "87 / r",
  "opcode_parsed": [
   "87",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r/m32, r32",
  "instr_parsed": [
   "XCHG",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange r32 with doubleword from r/m32.",
  "page": 2060
 },
 {
  "opcode": "REX.W + 87 / r",
  "opcode_parsed": [
   "REX.W",
   "87",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r/m64, r64",
  "instr_parsed": [
   "XCHG",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange r64 with quadword from r/m64.",
  "page": 2060
 },
 {
  "opcode": "87 / r",
  "opcode_parsed": [
   "87",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r32, r/m32",
  "instr_parsed": [
   "XCHG",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Exchange doubleword from r/m32 with r32.",
  "page": 2060
 },
 {
  "opcode": "REX.W + 87 / r",
  "opcode_parsed": [
   "REX.W",
   "87",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "87"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XCHG r64, r/m64",
  "instr_parsed": [
   "XCHG",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Exchange quadword from r/m64 with r64.",
  "page": 2060
 },
 {
  "opcode": "NP 0F 01 D0",
  "opcode_parsed": [
   "NP",
   "0F",
   "01",
   "D0"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D0"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XGETBV",
  "instr_parsed": [
   "XGETBV"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Reads an XCR specified by ECX into EDX:EAX.",
  "page": 2064
 },
 {
  "opcode": "D7",
  "opcode_parsed": [
   "D7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XLAT m8",
  "instr_parsed": [
   "XLAT",
   "m8"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set AL to memory byte DS:[(E)BX + unsigned AL].",
  "page": 2066
 },
 {
  "opcode": "D7",
  "opcode_parsed": [
   "D7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "D7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XLATB",
  "instr_parsed": [
   "XLATB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Set AL to memory byte DS:[(E)BX + unsigned AL].",
  "page": 2066
 },
 {
  "opcode": "REX.W + D7",
  "opcode_parsed": [
   "REX.W",
   "D7"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D7"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XLATB",
  "instr_parsed": [
   "XLATB"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "Set AL to memory byte [RBX + unsigned AL].",
  "page": 2066
 },
 {
  "opcode": "34 ib",
  "opcode_parsed": [
   "34",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "34"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR AL, i mm8",
  "instr_parsed": [
   "XOR",
   "AL",
   "imm8"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AL  XOR imm8.",
  "page": 2068
 },
 {
  "opcode": "35 iw",
  "opcode_parsed": [
   "35",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "35"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "XOR AX, i mm16",
  "instr_parsed": [
   "XOR",
   "AX",
   "imm16"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "AX  XOR imm16.",
  "page": 2068
 },
 {
  "opcode": "35 id",
  "opcode_parsed": [
   "35",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "35"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "XOR EAX, i mm32",
  "instr_parsed": [
   "XOR",
   "EAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "EAX XOR imm32.",
  "page": 2068
 },
 {
  "opcode": "REX.W + 35 id",
  "opcode_parsed": [
   "REX.W",
   "35",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "35"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "XOR RAX, i mm32",
  "instr_parsed": [
   "XOR",
   "RAX",
   "imm32"
  ],
  "op_en": "I",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "RAX XOR imm32 (sign-extended).",
  "page": 2068
 },
 {
  "opcode": "80 /6 ib",
  "opcode_parsed": [
   "80",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m8, imm8",
  "instr_parsed": [
   "XOR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m8 XOR imm8.",
  "page": 2068
 },
 {
  "opcode": "REX + 80 /6 ib",
  "opcode_parsed": [
   "REX",
   "80",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "80"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m8*, imm8",
  "instr_parsed": [
   "XOR",
   "r/m8",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m8 XOR imm8.",
  "page": 2068
 },
 {
  "opcode": "81 /6 iw",
  "opcode_parsed": [
   "81",
   "/6",
   "iw"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "iw"
    ],
    "byte_type": "imm",
    "byte_size_min": 2,
    "byte_size_max": 2
   }
  ],
  "instr": "XOR r/m16, imm16",
  "instr_parsed": [
   "XOR",
   "r/m16",
   "imm16"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 XOR imm16.",
  "page": 2068
 },
 {
  "opcode": "81 /6 id",
  "opcode_parsed": [
   "81",
   "/6",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "XOR r/m32, imm32",
  "instr_parsed": [
   "XOR",
   "r/m32",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 XOR imm32.",
  "page": 2068
 },
 {
  "opcode": "REX.W + 81 /6 id",
  "opcode_parsed": [
   "REX.W",
   "81",
   "/6",
   "id"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "81"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "id"
    ],
    "byte_type": "imm",
    "byte_size_min": 4,
    "byte_size_max": 4
   }
  ],
  "instr": "XOR r/m64, imm32",
  "instr_parsed": [
   "XOR",
   "r/m64",
   "imm32"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 XOR imm32 (sign-extended).",
  "page": 2068
 },
 {
  "opcode": "83 /6 ib",
  "opcode_parsed": [
   "83",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m16, imm8",
  "instr_parsed": [
   "XOR",
   "r/m16",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 XOR imm8 (sign-extended).",
  "page": 2068
 },
 {
  "opcode": "83 /6 ib",
  "opcode_parsed": [
   "83",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m32, imm8",
  "instr_parsed": [
   "XOR",
   "r/m32",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 XOR imm8 (sign-extended).",
  "page": 2068
 },
 {
  "opcode": "REX.W + 83 /6 ib",
  "opcode_parsed": [
   "REX.W",
   "83",
   "/6",
   "ib"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "83"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/6"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "ib"
    ],
    "byte_type": "imm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m64, imm8",
  "instr_parsed": [
   "XOR",
   "r/m64",
   "imm8"
  ],
  "op_en": "MI",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 XOR imm8 (sign-extended).",
  "page": 2068
 },
 {
  "opcode": "30 / r",
  "opcode_parsed": [
   "30",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "30"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m8, r8",
  "instr_parsed": [
   "XOR",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m8 XOR r8.",
  "page": 2068
 },
 {
  "opcode": "REX + 30 / r",
  "opcode_parsed": [
   "REX",
   "30",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "30"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m8*, r8*",
  "instr_parsed": [
   "XOR",
   "r/m8",
   "r8"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m8 XOR r8.",
  "page": 2068
 },
 {
  "opcode": "31 / r",
  "opcode_parsed": [
   "31",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "31"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m16, r16",
  "instr_parsed": [
   "XOR",
   "r/m16",
   "r16"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m16 XOR r16.",
  "page": 2068
 },
 {
  "opcode": "31 / r",
  "opcode_parsed": [
   "31",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "31"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m32, r32",
  "instr_parsed": [
   "XOR",
   "r/m32",
   "r32"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r/m32 XOR r32.",
  "page": 2068
 },
 {
  "opcode": "REX.W + 31 / r",
  "opcode_parsed": [
   "REX.W",
   "31",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "31"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r/m64, r64",
  "instr_parsed": [
   "XOR",
   "r/m64",
   "r64"
  ],
  "op_en": "MR",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r/m64 XOR r64.",
  "page": 2068
 },
 {
  "opcode": "32 / r",
  "opcode_parsed": [
   "32",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "32"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r8, r/m8",
  "instr_parsed": [
   "XOR",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r8 XOR r/m8.",
  "page": 2068
 },
 {
  "opcode": "REX + 32 / r",
  "opcode_parsed": [
   "REX",
   "32",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "32"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r8*, r/m8*",
  "instr_parsed": [
   "XOR",
   "r8",
   "r/m8"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r8 XOR r/m8.",
  "page": 2068
 },
 {
  "opcode": "33 / r",
  "opcode_parsed": [
   "33",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "33"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r16, r/m16",
  "instr_parsed": [
   "XOR",
   "r16",
   "r/m16"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r16 XOR r/m16.",
  "page": 2068
 },
 {
  "opcode": "33 / r",
  "opcode_parsed": [
   "33",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "33"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r32, r/m32",
  "instr_parsed": [
   "XOR",
   "r32",
   "r/m32"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "r32 XOR r/m32.",
  "page": 2068
 },
 {
  "opcode": "REX.W + 33 / r",
  "opcode_parsed": [
   "REX.W",
   "33",
   "/r"
  ],
  "opcode_bytes": [
   {
    "components": [
     "REX.W"
    ],
    "byte_type": "rex-prefix",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "33"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "/r"
    ],
    "byte_type": "modrm",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XOR r64, r/m64",
  "instr_parsed": [
   "XOR",
   "r64",
   "r/m64"
  ],
  "op_en": "RM",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": false,
  "valid_in_legacy_mode": false,
  "description": "r64 XOR r/m64.",
  "page": 2068
 },
 {
  "opcode": "NP 0F 01 D1",
  "opcode_parsed": [
   "NP",
   "0F",
   "01",
   "D1"
  ],
  "opcode_bytes": [
   {
    "components": [
     "NP"
    ],
    "byte_size_min": 0,
    "byte_size_max": 0
   },
   {
    "components": [
     "0F"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "01"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   },
   {
    "components": [
     "D1"
    ],
    "byte_type": "opcode",
    "byte_size_min": 1,
    "byte_size_max": 1
   }
  ],
  "instr": "XSETBV",
  "instr_parsed": [
   "XSETBV"
  ],
  "op_en": "ZO",
  "valid_in_64bit_mode": true,
  "valid_in_compatibility_mode": true,
  "valid_in_legacy_mode": true,
  "description": "Write the value in EDX:EAX to the XCR specified by ECX.",
  "page": 2097
 }
]